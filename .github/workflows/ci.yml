name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DENO_VERSION: v1.40.0

jobs:
  test:
    name: Test (macOS)
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Cache Deno dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/import_map.json', '**/deno.json', '**/deps.ts') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Run tests
        run: |
          deno test --allow-all --coverage=coverage
          deno coverage coverage --lcov --output=coverage.lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.lcov
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build (macOS)
    runs-on: macos-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: ${{ env.DENO_VERSION }}

      - name: Generate embedded stdlib
        run: |
          deno run --allow-all src/embed-stdlib.ts

      - name: Build binary (native macOS)
        run: |
          deno compile \
            --allow-all \
            --no-check \
            --output hlvm \
            src/hlvm-repl.ts
          ARCH=$(uname -m)
          if [ "$ARCH" = "arm64" ]; then OUT=hlvm-macos-arm64; else OUT=hlvm-macos-x64; fi
          mv hlvm "$OUT"
          echo "OUT=$OUT" >> $GITHUB_ENV

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: hlvm-macos
          path: ${{ env.OUT }}

  release:
    name: Release (macOS)
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download macOS artifact
        uses: actions/download-artifact@v3
        with:
          name: hlvm-macos

      - name: Create release assets
        run: |
          # Determine macOS arch and name
          FILE=$(ls -1 hlvm-macos-* 2>/dev/null || true)
          if [ -z "$FILE" ]; then FILE=$(ls -1 hlvm-macos* 2>/dev/null || true); fi
          if [ -z "$FILE" ]; then echo "No macOS binary found" && exit 1; fi
          BASENAME=$(basename "$FILE")
          echo "BINARY=$BASENAME" >> $GITHUB_ENV
          # Create checksum
          sha256sum "$BASENAME" > "$BASENAME.sha256"

          # List artifacts
          ls -lh

      - name: Upload macOS binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.BINARY }}
          asset_name: ${{ env.BINARY }}
          asset_content_type: application/octet-stream

      - name: Upload macOS checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.BINARY }}.sha256
          asset_name: ${{ env.BINARY }}.sha256
          asset_content_type: text/plain

      - name: Upload macOS checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./hlvm-macos-x64.sha256
          asset_name: hlvm-macos-x64.sha256
          asset_content_type: text/plain

      - name: Upload Windows checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./hlvm-windows-x64.sha256
          asset_name: hlvm-windows-x64.sha256
          asset_content_type: text/plain

  homebrew:
    name: Update Homebrew (macOS)
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
      - name: Checkout Homebrew tap
        uses: actions/checkout@v4
        with:
          repository: hlvm-dev/homebrew-hlvm
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}

      - name: Update formula (macOS only)
        run: |
          # Update version and SHA256
          sed -i "s/version \".*\"/version \"${{ github.event.release.tag_name }}\"/" Formula/hlvm.rb
          
          # Pick the macOS checksum available (x64 or arm64)
          SHA256=$(curl -sL https://github.com/hlvm-dev/hlvm/releases/download/${{ github.event.release.tag_name }}/hlvm-macos-x64.sha256 2>/dev/null | cut -d' ' -f1)
          if [ -z "$SHA256" ]; then
            SHA256=$(curl -sL https://github.com/hlvm-dev/hlvm/releases/download/${{ github.event.release.tag_name }}/hlvm-macos-arm64.sha256 2>/dev/null | cut -d' ' -f1)
          fi
          if [ -n "$SHA256" ]; then
            sed -i "0,/sha256 \".*\"/s//sha256 \"$SHA256\"/" Formula/hlvm.rb
          fi

      - name: Commit and push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add Formula/hlvm.rb
          git commit -m "Update to version ${{ github.event.release.tag_name }}"
          git push
