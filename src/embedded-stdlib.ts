// Auto-generated file with embedded stdlib modules
// This file is generated by embed-stdlib.ts and should not be edited manually

export const embeddedStdlib = {
  "ai/ollama.js": "// Ollama module - Complete mirror of Ollama API\n// https://github.com/ollama/ollama/blob/main/docs/api.md\n\nconst OLLAMA_HOST = Deno.env.get(\"OLLAMA_HOST\") || \"http://localhost:11434\";\n\n// Helper for streaming responses\nasync function* streamResponse(response) {\n  const reader = response.body.getReader();\n  const decoder = new TextDecoder();\n  let buffer = \"\";\n  \n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) break;\n    \n    buffer += decoder.decode(value, { stream: true });\n    const lines = buffer.split('\\n');\n    buffer = lines.pop() || \"\";\n    \n    for (const line of lines) {\n      if (line.trim()) {\n        try {\n          yield JSON.parse(line);\n        } catch (e) {\n          console.error(\"Failed to parse:\", line);\n        }\n      }\n    }\n  }\n}\n\n// Generic API request handler - DRY principle\nasync function apiRequest(endpoint, method = \"GET\", body = null) {\n  const options = {\n    method,\n    headers: method !== \"GET\" ? { \"Content-Type\": \"application/json\" } : {}\n  };\n  \n  if (body && method !== \"GET\") {\n    options.body = JSON.stringify(body);\n  }\n  \n  const response = await fetch(`${OLLAMA_HOST}/api/${endpoint}`, options);\n  \n  if (!response.ok) {\n    const errorText = await response.text();\n    let message = `Ollama ${endpoint} failed: ${response.statusText}`;\n    try {\n      const parsed = JSON.parse(errorText);\n      if (parsed.error) message = parsed.error;\n    } catch {}\n    throw new Error(message);\n  }\n  \n  return response;\n}\n\n// Handle streaming or JSON response - DRY principle\nasync function handleResponse(response, request) {\n  if (request?.stream === false) {\n    return await response.json();\n  }\n  return response.headers.get(\"content-type\")?.includes(\"application/json\")\n    ? await response.json()\n    : streamResponse(response);\n}\n\n// API Methods - now much more concise\nexport async function generate(request) {\n  const response = await apiRequest(\"generate\", \"POST\", request);\n  return handleResponse(response, request);\n}\n\nexport async function chat(request) {\n  const response = await apiRequest(\"chat\", \"POST\", request);\n  return handleResponse(response, request);\n}\n\nexport async function create(request) {\n  const response = await apiRequest(\"create\", \"POST\", request);\n  return handleResponse(response, request);\n}\n\nexport async function list() {\n  const response = await apiRequest(\"tags\");\n  return response.json();\n}\n\nexport async function show(request) {\n  const response = await apiRequest(\"show\", \"POST\", request);\n  return response.json();\n}\n\nexport async function copy(request) {\n  await apiRequest(\"copy\", \"POST\", request);\n  return true;\n}\n\nexport async function deleteModel(request) {\n  await apiRequest(\"delete\", \"DELETE\", request);\n  return true;\n}\n\nexport async function pull(request) {\n  const response = await apiRequest(\"pull\", \"POST\", request);\n  return handleResponse(response, request);\n}\n\nexport async function push(request) {\n  const response = await apiRequest(\"push\", \"POST\", request);\n  return handleResponse(response, request);\n}\n\nexport async function embeddings(request) {\n  const response = await apiRequest(\"embeddings\", \"POST\", request);\n  return response.json();\n}\n\nexport async function ps() {\n  const response = await apiRequest(\"ps\");\n  return response.json();\n}\n\nexport async function isRunning() {\n  try {\n    const response = await fetch(`${OLLAMA_HOST}/api/tags`);\n    return response.ok;\n  } catch {\n    return false;\n  }\n}",
  "computer/context.js": "// Context Module - Captures current system state for developer productivity\n// Provides easy access to clipboard, selection, and screen content\n\nimport * as clipboardModule from \"../io/clipboard.js\";\nimport * as screenModule from \"./screen.js\";\nimport * as system from \"../core/system.js\";\n\n// Helper to get selected text\n// Uses multiple strategies depending on platform\nasync function getSelectedText() {\n  try {\n    // Strategy 1: Try to get selection via OS commands\n    if (Deno.build.os === \"darwin\") {\n      // On macOS, try using osascript to get selection from frontmost app\n      try {\n        const result = await system.exec(\n          `osascript -e 'tell application \"System Events\" to keystroke \"c\" using command down' && pbpaste`\n        );\n        if (result.success && result.stdout.trim()) {\n          return result.stdout.trim();\n        }\n      } catch {\n        // Fall through to next strategy\n      }\n    } else if (Deno.build.os === \"linux\") {\n      // On Linux, try xclip or xsel for primary selection\n      try {\n        const result = await system.exec(\"xclip -o -selection primary 2>/dev/null || xsel -o -p 2>/dev/null\");\n        if (result.success && result.stdout.trim()) {\n          return result.stdout.trim();\n        }\n      } catch {\n        // Fall through to next strategy\n      }\n    } else if (Deno.build.os === \"windows\") {\n      // On Windows, selection is harder to get directly\n      // Fall through to clipboard strategy\n    }\n    \n    // Strategy 2: Return null if no selection available\n    // This is better than returning stale clipboard data\n    return null;\n  } catch (error) {\n    console.error(\"Failed to get selection:\", error.message);\n    return null;\n  }\n}\n\n// Extract text from image using OCR\n// This is a placeholder - real implementation would use Vision framework on macOS,\n// Tesseract on Linux, or Windows OCR APIs\nasync function extractTextFromImage(imageData) {\n  try {\n    if (Deno.build.os === \"darwin\") {\n      // Save image temporarily and use macOS Vision framework via shortcuts or swift\n      const tempPath = `/tmp/hlvm_ocr_${Date.now()}.png`;\n      await Deno.writeFile(tempPath, imageData);\n      \n      // Try using shortcuts cli if available\n      const result = await system.exec(\n        `shortcuts run \"Extract Text from Image\" -i \"${tempPath}\" 2>/dev/null || echo \"\"`\n      );\n      \n      // Clean up temp file\n      try { await Deno.remove(tempPath); } catch {}\n      \n      if (result.success && result.stdout.trim()) {\n        return result.stdout.trim();\n      }\n    }\n    \n    // For now, return placeholder for other platforms\n    // Real implementation would integrate with Tesseract or other OCR\n    return \"[OCR not available on this platform yet]\";\n  } catch (error) {\n    console.error(\"OCR failed:\", error.message);\n    return \"\";\n  }\n}\n\n// Context namespace - provides current state\nexport const context = {\n  // Get currently selected text\n  get selection() {\n    // This is synchronous but internally uses cached async result\n    // For now, we'll make it async and users need to await\n    console.warn(\"Note: context.selection requires await\");\n    return getSelectedText();\n  },\n  \n  // Screen context object\n  screen: {\n    // Get current screen as image data - SYNCHRONOUS\n    get image() {\n      try {\n        // Capture to temp file and read as bytes\n        const tempPath = `/tmp/hlvm_screen_${Date.now()}.png`;\n        \n        // Use screencapture command directly for sync operation\n        if (Deno.build.os === \"darwin\") {\n          const p = new Deno.Command(\"screencapture\", {\n            args: [\"-x\", \"-C\", tempPath] // -x: no sound, -C: capture cursor\n          });\n          const output = p.outputSync();\n          if (!output.success) {\n            throw new Error(\"Screen capture failed\");\n          }\n        } else if (Deno.build.os === \"linux\") {\n          // Try various Linux screenshot tools\n          const tools = [\n            { cmd: \"import\", args: [\"-window\", \"root\", tempPath] }, // ImageMagick\n            { cmd: \"scrot\", args: [tempPath] },\n            { cmd: \"gnome-screenshot\", args: [\"-f\", tempPath] }\n          ];\n          \n          let captured = false;\n          for (const tool of tools) {\n            try {\n              const p = new Deno.Command(tool.cmd, { args: tool.args });\n              const output = p.outputSync();\n              if (output.success) {\n                captured = true;\n                break;\n              }\n            } catch {\n              // Try next tool\n            }\n          }\n          \n          if (!captured) {\n            throw new Error(\"No screenshot tool available\");\n          }\n        } else if (Deno.build.os === \"windows\") {\n          // Windows: Use PowerShell screenshot\n          const script = `\n            Add-Type -AssemblyName System.Windows.Forms\n            Add-Type -AssemblyName System.Drawing\n            $screen = [System.Windows.Forms.SystemInformation]::VirtualScreen\n            $bitmap = New-Object System.Drawing.Bitmap $screen.Width, $screen.Height\n            $graphics = [System.Drawing.Graphics]::FromImage($bitmap)\n            $graphics.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size)\n            $bitmap.Save('${tempPath}')\n          `;\n          const p = new Deno.Command(\"powershell\", {\n            args: [\"-NoProfile\", \"-Command\", script]\n          });\n          const output = p.outputSync();\n          if (!output.success) {\n            throw new Error(\"Screen capture failed\");\n          }\n        }\n        \n        // Read the captured image\n        const imageData = Deno.readFileSync(tempPath);\n        \n        // Clean up temp file\n        try { Deno.removeSync(tempPath); } catch {}\n        \n        return imageData;\n      } catch (error) {\n        console.error(\"Failed to capture screen:\", error.message);\n        return new Uint8Array();\n      }\n    },\n    \n    // Get text from current screen via OCR\n    get text() {\n      try {\n        // Get screen image first\n        const imageData = this.image;\n        if (imageData.length === 0) return \"\";\n        \n        // Extract text via OCR (this would be async in real implementation)\n        // For now return a sync placeholder\n        console.warn(\"Note: OCR is experimental and requires platform support\");\n        return \"[Screen text extraction pending implementation]\";\n      } catch (error) {\n        console.error(\"Failed to extract screen text:\", error.message);\n        return \"\";\n      }\n    }\n  }\n};\n\n// Make selection truly async since it needs to run commands\nObject.defineProperty(context, 'selection', {\n  get() {\n    return getSelectedText();\n  },\n  enumerable: true,\n  configurable: false\n});\n\n// Re-export for convenience\nexport default context;",
  "computer/keyboard.js": "// Keyboard module - Cross-platform keyboard automation\n\nimport * as platform from \"../core/platform.js\";\nimport { escapeKeyboard, powershell, linuxTool, PS, ERRORS } from \"../core/platform.js\";\n\nexport async function type(text) {\n  const escapedText = escapeKeyboard(text);\n  \n  if (platform.isDarwin) {\n    // macOS: osascript (built-in)\n    const script = `tell application \"System Events\" to keystroke \"${escapedText}\"`;\n    const result = await new Deno.Command(\"osascript\", { args: [\"-e\", script] }).output();\n    if (!result.success) {\n      const error = new TextDecoder().decode(result.stderr);\n      if (error.includes(\"not allowed to send keystrokes\")) {\n        throw new Error(\"Keyboard control requires accessibility permissions. Go to System Settings → Privacy & Security → Accessibility and add your terminal app.\");\n      }\n      throw new Error(`Keyboard type failed: ${error}`);\n    }\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell SendKeys (built-in)\n    const script = `\n      ${PS.forms}\n      [System.Windows.Forms.SendKeys]::SendWait(\"${escapedText}\")\n    `;\n    await powershell(script);\n    \n  } else {\n    // Linux: Try xdotool or ydotool\n    await linuxTool(\n      [\"type\", text], // xdotool args\n      [\"type\", text], // ydotool args\n      ERRORS.LINUX_TOOLS\n    );\n  }\n}\n\n// Key mappings for cross-platform support\nconst KEY_MAP = {\n  // Common keys\n  \"enter\": { \n    darwin: \"return\", \n    windows: \"{ENTER}\", \n    linux: \"Return\" \n  },\n  \"return\": { \n    darwin: \"return\", \n    windows: \"{ENTER}\", \n    linux: \"Return\" \n  },\n  \"tab\": { \n    darwin: \"tab\", \n    windows: \"{TAB}\", \n    linux: \"Tab\" \n  },\n  \"delete\": { \n    darwin: \"delete\", \n    windows: \"{DEL}\", \n    linux: \"Delete\" \n  },\n  \"backspace\": { \n    darwin: \"delete\", \n    windows: \"{BACKSPACE}\", \n    linux: \"BackSpace\" \n  },\n  \"escape\": { \n    darwin: \"escape\", \n    windows: \"{ESC}\", \n    linux: \"Escape\" \n  },\n  \"space\": { \n    darwin: \"space\", \n    windows: \" \", \n    linux: \"space\" \n  },\n  \"up\": { \n    darwin: \"up arrow\", \n    windows: \"{UP}\", \n    linux: \"Up\" \n  },\n  \"down\": { \n    darwin: \"down arrow\", \n    windows: \"{DOWN}\", \n    linux: \"Down\" \n  },\n  \"left\": { \n    darwin: \"left arrow\", \n    windows: \"{LEFT}\", \n    linux: \"Left\" \n  },\n  \"right\": { \n    darwin: \"right arrow\", \n    windows: \"{RIGHT}\", \n    linux: \"Right\" \n  },\n  \"home\": { \n    darwin: \"home\", \n    windows: \"{HOME}\", \n    linux: \"Home\" \n  },\n  \"end\": { \n    darwin: \"end\", \n    windows: \"{END}\", \n    linux: \"End\" \n  },\n  \"pageup\": { \n    darwin: \"page up\", \n    windows: \"{PGUP}\", \n    linux: \"Page_Up\" \n  },\n  \"pagedown\": { \n    darwin: \"page down\", \n    windows: \"{PGDN}\", \n    linux: \"Page_Down\" \n  }\n};\n\nexport async function press(key, modifiers = {}) {\n  // Normalize key name\n  const normalizedKey = key.toLowerCase();\n  const keyMapping = KEY_MAP[normalizedKey] || {\n    darwin: key,\n    windows: key,\n    linux: key\n  };\n  \n  if (platform.isDarwin) {\n    // macOS: osascript with modifiers\n    const mods = [];\n    if (modifiers.cmd || modifiers.command) mods.push(\"command down\");\n    if (modifiers.ctrl || modifiers.control) mods.push(\"control down\");\n    if (modifiers.alt || modifiers.option) mods.push(\"option down\");\n    if (modifiers.shift) mods.push(\"shift down\");\n    \n    const keyName = keyMapping.darwin;\n    const script = mods.length > 0\n      ? `tell application \"System Events\" to keystroke \"${keyName}\" using {${mods.join(\", \")}}`\n      : `tell application \"System Events\" to keystroke \"${keyName}\"`;\n    \n    const result = await new Deno.Command(\"osascript\", { args: [\"-e\", script] }).output();\n    if (!result.success) {\n      const error = new TextDecoder().decode(result.stderr);\n      if (error.includes(\"not allowed to send keystrokes\")) {\n        throw new Error(\"Keyboard control requires accessibility permissions. Go to System Settings → Privacy & Security → Accessibility and add your terminal app.\");\n      }\n      throw new Error(`Keyboard press failed: ${error}`);\n    }\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell SendKeys with modifiers\n    let keys = \"\";\n    if (modifiers.ctrl || modifiers.control) keys += \"^\";\n    if (modifiers.alt) keys += \"%\";\n    if (modifiers.shift) keys += \"+\";\n    keys += keyMapping.windows;\n    \n    const script = `\n      ${PS.forms}\n      [System.Windows.Forms.SendKeys]::SendWait(\"${keys}\")\n    `;\n    await powershell(script);\n    \n  } else {\n    // Linux: xdotool or ydotool\n    const keys = [];\n    if (modifiers.ctrl || modifiers.control) keys.push(\"ctrl\");\n    if (modifiers.alt) keys.push(\"alt\");\n    if (modifiers.shift) keys.push(\"shift\");\n    if (modifiers.cmd || modifiers.command || modifiers.super) keys.push(\"super\");\n    keys.push(keyMapping.linux);\n    \n    await linuxTool(\n      [\"key\", keys.join(\"+\")], // xdotool args\n      [\"key\", ...keys], // ydotool args\n      ERRORS.LINUX_TOOLS\n    );\n  }\n}\n\n// Send keyboard shortcut (convenience function)\nexport async function shortcut(keys) {\n  // Parse shortcut like \"cmd+a\" or \"ctrl+shift+t\"\n  const parts = keys.toLowerCase().split(\"+\");\n  const modifiers = {};\n  let key = \"\";\n  \n  for (const part of parts) {\n    if ([\"cmd\", \"command\", \"ctrl\", \"control\", \"alt\", \"option\", \"shift\", \"super\"].includes(part)) {\n      if (part === \"cmd\" || part === \"command\") modifiers.cmd = true;\n      if (part === \"ctrl\" || part === \"control\") modifiers.ctrl = true;\n      if (part === \"alt\" || part === \"option\") modifiers.alt = true;\n      if (part === \"shift\") modifiers.shift = true;\n      if (part === \"super\") modifiers.super = true;\n    } else {\n      key = part;\n    }\n  }\n  \n  return press(key, modifiers);\n}",
  "computer/mouse.js": "// Mouse module - Cross-platform mouse automation\n\nimport { runPlatformCommand } from \"../core/command.js\";\nimport { PS } from \"../core/platform.js\";\n\nexport async function move(x, y) {\n  await runPlatformCommand({\n    mac: {\n      cmd: \"cliclick\",\n      args: [`m:${x},${y}`],\n      fallback: {\n        cmd: \"python3\",\n        args: [\"-c\", `\nimport Quartz\nQuartz.CGWarpMouseCursorPosition((${x}, ${y}))\n        `]\n      }\n    },\n    windows: {\n      script: `\n        ${PS.forms}\n        [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point(${x}, ${y})\n      `\n    },\n    linux: {\n      xdotool: [\"mousemove\", String(x), String(y)],\n      ydotool: [\"mousemove\", String(x), String(y)],\n      errorMsg: \"Mouse move failed. Install xdotool (X11) or ydotool (Wayland)\"\n    }\n  });\n}\n\nexport async function click(x = null, y = null, button = \"left\") {\n  // Move to position if specified\n  if (x !== null && y !== null) {\n    await move(x, y);\n  }\n  \n  const buttonMap = {\n    linux: { \"left\": \"1\", \"middle\": \"2\", \"right\": \"3\" },\n    mac: { \"left\": \"c\", \"right\": \"rc\", \"middle\": \"mc\" }\n  };\n  \n  await runPlatformCommand({\n    mac: {\n      cmd: \"cliclick\",\n      args: x !== null && y !== null \n        ? [`${buttonMap.mac[button]}:${x},${y}`]\n        : [buttonMap.mac[button]],\n      fallback: {\n        cmd: \"python3\",\n        args: [\"-c\", `\nimport Quartz\nimport time\n\n# Get current position if not specified\n${x === null ? `\npos = Quartz.NSEvent.mouseLocation()\nx, y = pos.x, pos.y\n` : `x, y = ${x}, ${y}`}\n\n# Create mouse events\nbutton_map = {\n  \"left\": Quartz.kCGMouseButtonLeft,\n  \"right\": Quartz.kCGMouseButtonRight,\n  \"middle\": Quartz.kCGMouseButtonCenter\n}\n\nevent_down = {\n  \"left\": Quartz.kCGEventLeftMouseDown,\n  \"right\": Quartz.kCGEventRightMouseDown,\n  \"middle\": Quartz.kCGEventOtherMouseDown\n}\n\nevent_up = {\n  \"left\": Quartz.kCGEventLeftMouseUp,\n  \"right\": Quartz.kCGEventRightMouseUp,\n  \"middle\": Quartz.kCGEventOtherMouseUp\n}\n\nbutton_type = button_map.get(\"${button}\", button_map[\"left\"])\ndown_type = event_down.get(\"${button}\", event_down[\"left\"])\nup_type = event_up.get(\"${button}\", event_up[\"left\"])\n\nevent = Quartz.CGEventCreateMouseEvent(None, down_type, (x, y), button_type)\nQuartz.CGEventPost(Quartz.kCGHIDEventTap, event)\n\nevent = Quartz.CGEventCreateMouseEvent(None, up_type, (x, y), button_type)\nQuartz.CGEventPost(Quartz.kCGHIDEventTap, event)\n        `]\n      }\n    },\n    windows: {\n      script: `\n        Add-Type @\"\n          using System;\n          using System.Runtime.InteropServices;\n          public class Mouse {\n            [DllImport(\"user32.dll\")]\n            public static extern void mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);\n          }\n\"@\n        \n        ${x !== null && y !== null ? `\n        ${PS.forms}\n        [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point(${x}, ${y})\n        ` : \"\"}\n        \n        $flags = @{\n          left = @{ down = 0x0002; up = 0x0004 }\n          right = @{ down = 0x0008; up = 0x0010 }\n          middle = @{ down = 0x0020; up = 0x0040 }\n        }\n        \n        $buttonFlags = $flags[\"${button}\"]\n        if (-not $buttonFlags) { $buttonFlags = $flags.left }\n        \n        [Mouse]::mouse_event($buttonFlags.down, 0, 0, 0, 0)\n        [Mouse]::mouse_event($buttonFlags.up, 0, 0, 0, 0)\n      `\n    },\n    linux: {\n      xdotool: x !== null && y !== null \n        ? [\"mousemove\", String(x), String(y), \"click\", buttonMap.linux[button] || \"1\"]\n        : [\"click\", buttonMap.linux[button] || \"1\"],\n      ydotool: x !== null && y !== null\n        ? [\"mousemove\", String(x), String(y), \"click\", buttonMap.linux[button] || \"1\"]\n        : [\"click\", buttonMap.linux[button] || \"1\"],\n      errorMsg: \"Mouse click failed. Install xdotool (X11) or ydotool (Wayland)\"\n    }\n  });\n}\n\nexport async function position() {\n  const result = await runPlatformCommand({\n    mac: {\n      cmd: \"cliclick\",\n      args: [\"p\"],\n      fallback: {\n        cmd: \"python3\",\n        args: [\"-c\", `\nimport Quartz\npos = Quartz.NSEvent.mouseLocation()\nprint(f\"{int(pos.x)},{int(pos.y)}\")\n        `]\n      }\n    },\n    windows: {\n      script: `\n        ${PS.forms}\n        $pos = [System.Windows.Forms.Cursor]::Position\n        Write-Host \"$($pos.X),$($pos.Y)\"\n      `\n    },\n    linux: {\n      cmd: \"xdotool\",\n      args: [\"getmouselocation\"],\n      fallback: [\n        { cmd: \"ydotool\", args: [\"mousemove\", \"--get\"] }\n      ],\n      errorMsg: \"Mouse position failed. Install xdotool (X11) or ydotool (Wayland)\"\n    }\n  });\n  \n  // Parse position from result\n  if (typeof result === 'string') {\n    const output = result.trim();\n    \n    // Linux xdotool format: \"x:123 y:456 ...\"\n    if (output.includes(\"x:\") && output.includes(\"y:\")) {\n      const x = parseInt(output.match(/x:(\\d+)/)?.[1] || \"0\");\n      const y = parseInt(output.match(/y:(\\d+)/)?.[1] || \"0\");\n      return { x, y };\n    }\n    \n    // Common format: \"123,456\"\n    if (output.includes(\",\")) {\n      const [x, y] = output.split(\",\").map(n => parseInt(n));\n      return { x, y };\n    }\n    \n    // ydotool format: \"123 456\"\n    const parts = output.split(\" \").map(n => parseInt(n));\n    if (parts.length >= 2) {\n      return { x: parts[0], y: parts[1] };\n    }\n  }\n  \n  throw new Error(\"Failed to get mouse position\");\n}\n\n// Double click\nexport async function doubleClick(x = null, y = null) {\n  await click(x, y);\n  await new Promise(r => setTimeout(r, 50)); // Small delay\n  await click(x, y);\n}\n\n// Drag from one position to another\nexport async function drag(fromX, fromY, toX, toY) {\n  await runPlatformCommand({\n    mac: {\n      cmd: \"cliclick\",\n      args: [`dd:${fromX},${fromY}`, `du:${toX},${toY}`],\n      fallback: async () => {\n        await move(fromX, fromY);\n        await click(fromX, fromY);\n        await move(toX, toY);\n        await click(toX, toY);\n      }\n    },\n    windows: {\n      script: `\n        Add-Type @\"\n          using System;\n          using System.Runtime.InteropServices;\n          public class Mouse {\n            [DllImport(\"user32.dll\")]\n            public static extern void mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);\n          }\n\"@\n        ${PS.forms}\n        \n        # Move to start position\n        [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point(${fromX}, ${fromY})\n        # Mouse down\n        [Mouse]::mouse_event(0x0002, 0, 0, 0, 0)\n        # Move to end position\n        [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point(${toX}, ${toY})\n        # Mouse up\n        [Mouse]::mouse_event(0x0004, 0, 0, 0, 0)\n      `\n    },\n    linux: {\n      xdotool: [\"mousemove\", String(fromX), String(fromY), \"mousedown\", \"1\",\n                \"mousemove\", String(toX), String(toY), \"mouseup\", \"1\"],\n      ydotool: [\"mousemove\", String(fromX), String(fromY), \"mousedown\", \"1\",\n                \"mousemove\", String(toX), String(toY), \"mouseup\", \"1\"],\n      fallback: async () => {\n        await move(fromX, fromY);\n        await click(fromX, fromY);\n        await move(toX, toY);\n        await click(toX, toY);\n      }\n    }\n  });\n}",
  "computer/notification.js": "// Notification module - Cross-platform UI dialogs and notifications\n\nimport * as platform from \"../core/platform.js\";\nimport { escapeShell, decode, powershell, PS, ERRORS } from \"../core/platform.js\";\n\n// DRY: Generic Linux dialog handler\nasync function linuxDialog(type, message, title, defaultValue = \"\") {\n  const tools = [\n    {\n      cmd: \"zenity\",\n      args: {\n        alert: [\"--info\", \"--text\", message, \"--title\", title],\n        confirm: [\"--question\", \"--text\", message, \"--title\", title],\n        prompt: [\"--entry\", \"--text\", message, \"--title\", title, ...(defaultValue ? [\"--entry-text\", defaultValue] : [])]\n      }\n    },\n    {\n      cmd: \"kdialog\",\n      args: {\n        alert: [\"--msgbox\", message, \"--title\", title],\n        confirm: [\"--yesno\", message, \"--title\", title],\n        prompt: [\"--inputbox\", message, defaultValue, \"--title\", title]\n      }\n    }\n  ];\n  \n  for (const tool of tools) {\n    try {\n      const result = await new Deno.Command(tool.cmd, {\n        args: tool.args[type]\n      }).output();\n      \n      if (type === \"alert\") return;\n      if (type === \"confirm\") return result.code === 0;\n      if (type === \"prompt\") return result.code === 0 ? decode(result.stdout).trim() : null;\n    } catch {\n      // Try next tool\n    }\n  }\n  \n  // Fallback\n  if (type === \"alert\") {\n    await notify(message, title);\n  } else {\n    console.error(ERRORS.LINUX_DIALOG);\n    return type === \"confirm\" ? false : null;\n  }\n}\n\n// DRY: Generic osascript handler\nasync function osascriptDialog(type, message, title, defaultValue = \"\") {\n  const escapedMessage = escapeShell(message);\n  const escapedTitle = escapeShell(title);\n  const escapedDefault = escapeShell(defaultValue);\n  \n  const scripts = {\n    alert: `display alert \"${escapedTitle}\" message \"${escapedMessage}\"`,\n    confirm: `\n      button returned of (display dialog \"${escapedMessage}\" ¬\n        with title \"${escapedTitle}\" ¬\n        buttons {\"Cancel\", \"OK\"} ¬\n        default button \"OK\")\n    `,\n    prompt: `\n      text returned of (display dialog \"${escapedMessage}\" ¬\n        with title \"${escapedTitle}\" ¬\n        default answer \"${escapedDefault}\" ¬\n        buttons {\"Cancel\", \"OK\"} ¬\n        default button \"OK\")\n    `\n  };\n  \n  try {\n    const result = await new Deno.Command(\"osascript\", { \n      args: [\"-e\", scripts[type]] \n    }).output();\n    \n    if (type === \"alert\") return;\n    if (type === \"confirm\") return decode(result.stdout).trim() === \"OK\";\n    if (type === \"prompt\") return decode(result.stdout).trim();\n  } catch {\n    return type === \"confirm\" ? false : null;\n  }\n}\n\n// DRY: Generic PowerShell dialog handler\nasync function windowsDialog(type, message, title, defaultValue = \"\") {\n  const escapedMessage = escapeShell(message);\n  const escapedTitle = escapeShell(title);\n  const escapedDefault = escapeShell(defaultValue);\n  \n  const scripts = {\n    alert: `\n      ${PS.forms}\n      [System.Windows.Forms.MessageBox]::Show(\"${escapedMessage}\", \"${escapedTitle}\")\n    `,\n    confirm: `\n      ${PS.forms}\n      $result = [System.Windows.Forms.MessageBox]::Show(\n        \"${escapedMessage}\", \n        \"${escapedTitle}\", \n        [System.Windows.Forms.MessageBoxButtons]::YesNo\n      )\n      if ($result -eq [System.Windows.Forms.DialogResult]::Yes) {\n        Write-Host \"true\"\n      } else {\n        Write-Host \"false\"\n      }\n    `,\n    prompt: `\n      ${PS.visualBasic}\n      $result = [Microsoft.VisualBasic.Interaction]::InputBox(\n        \"${escapedMessage}\", \n        \"${escapedTitle}\", \n        \"${escapedDefault}\"\n      )\n      if ($result -eq \"\") {\n        if ($LastExitCode -eq 0) { Write-Host \"\" }\n      } else {\n        Write-Host $result\n      }\n    `\n  };\n  \n  const { stdout } = await powershell(scripts[type]);\n  \n  if (type === \"alert\") return;\n  if (type === \"confirm\") return decode(stdout).trim() === \"true\";\n  if (type === \"prompt\") return decode(stdout).trim();\n}\n\n// Public API - Now much cleaner\nexport async function alert(message, title = \"Alert\") {\n  if (platform.isDarwin) {\n    return osascriptDialog(\"alert\", message, title);\n  } else if (platform.isWindows) {\n    return windowsDialog(\"alert\", message, title);\n  } else {\n    return linuxDialog(\"alert\", message, title);\n  }\n}\n\nexport async function confirm(message, title = \"Confirm\") {\n  if (platform.isDarwin) {\n    return osascriptDialog(\"confirm\", message, title);\n  } else if (platform.isWindows) {\n    return windowsDialog(\"confirm\", message, title);\n  } else {\n    return linuxDialog(\"confirm\", message, title);\n  }\n}\n\nexport async function prompt(message, defaultValue = \"\", title = \"Input\") {\n  if (platform.isDarwin) {\n    return osascriptDialog(\"prompt\", message, title, defaultValue);\n  } else if (platform.isWindows) {\n    return windowsDialog(\"prompt\", message, title, defaultValue);\n  } else {\n    return linuxDialog(\"prompt\", message, title, defaultValue);\n  }\n}\n\nexport async function notify(message, title = \"Notification\", subtitle = \"\") {\n  const escapedMessage = escapeShell(message);\n  const escapedTitle = escapeShell(title);\n  \n  if (platform.isDarwin) {\n    let script = `display notification \"${escapedMessage}\" with title \"${escapedTitle}\"`;\n    if (subtitle) {\n      script += ` subtitle \"${escapeShell(subtitle)}\"`;\n    }\n    await new Deno.Command(\"osascript\", { args: [\"-e\", script] }).output();\n    \n  } else if (platform.isWindows) {\n    // Windows toast notification\n    try {\n      const script = `\n        [Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime] | Out-Null\n        [Windows.Data.Xml.Dom.XmlDocument, Windows.Data.Xml.Dom.XmlDocument, ContentType = WindowsRuntime] | Out-Null\n        \n        $template = @\"\n        <toast>\n          <visual>\n            <binding template=\"ToastGeneric\">\n              <text>${escapedTitle}</text>\n              <text>${escapedMessage}</text>\n            </binding>\n          </visual>\n        </toast>\n\"@\n        $xml = New-Object Windows.Data.Xml.Dom.XmlDocument\n        $xml.LoadXml($template)\n        $toast = New-Object Windows.UI.Notifications.ToastNotification $xml\n        [Windows.UI.Notifications.ToastNotificationManager]::CreateToastNotifier(\"HLVM\").Show($toast)\n      `;\n      await powershell(script);\n    } catch {\n      await alert(message, title);\n    }\n    \n  } else {\n    // Linux notify-send\n    try {\n      await new Deno.Command(\"notify-send\", {\n        args: [title, message]\n      }).output();\n    } catch {\n      console.error(ERRORS.LINUX_NOTIFY);\n    }\n  }\n}",
  "computer/screen.js": "// Screen module - Cross-platform screen capture\n\nimport * as platform from \"../core/platform.js\";\n\nexport async function capture(output = null, options = {}) {\n  // Use platform-specific temp file if no output specified\n  if (!output) {\n    const tempDir = platform.tempDir();\n    const timestamp = Date.now();\n    output = `${tempDir}${platform.pathSep}screenshot-${timestamp}.png`;\n  }\n  \n  if (platform.isDarwin) {\n    // macOS: screencapture (built-in)\n    const args = [\"-x\"]; // No sound\n    \n    if (options.interactive) {\n      args.push(\"-i\"); // Interactive mode (user selects window)\n    }\n    if (options.selection || options.select) {\n      args.push(\"-s\"); // Selection mode (user draws rectangle)\n    }\n    if (options.window) {\n      args.push(\"-w\"); // Window selection mode\n    }\n    if (options.delay) {\n      args.push(\"-T\", String(options.delay)); // Delay in seconds\n    }\n    \n    args.push(output);\n    \n    const { success } = await new Deno.Command(\"screencapture\", { args }).output();\n    if (!success) throw new Error(\"Screenshot failed\");\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell screenshot (built-in)\n    const script = `\n      Add-Type -AssemblyName System.Windows.Forms\n      Add-Type -AssemblyName System.Drawing\n      \n      $screen = [System.Windows.Forms.Screen]::PrimaryScreen\n      $bounds = $screen.Bounds\n      $bitmap = New-Object System.Drawing.Bitmap($bounds.Width, $bounds.Height)\n      $graphics = [System.Drawing.Graphics]::FromImage($bitmap)\n      $graphics.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)\n      $bitmap.Save(\"${output.replace(/\\\\/g, '\\\\\\\\')}\")\n      $graphics.Dispose()\n      $bitmap.Dispose()\n    `;\n    \n    const { success } = await new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", script]\n    }).output();\n    if (!success) throw new Error(\"Screenshot failed\");\n    \n  } else {\n    // Linux: Try multiple screenshot tools\n    const tools = [\n      {\n        cmd: \"scrot\",\n        args: options.selection ? [\"-s\", output] : [output]\n      },\n      {\n        cmd: \"gnome-screenshot\",\n        args: options.selection \n          ? [\"-a\", \"-f\", output]\n          : [\"-f\", output]\n      },\n      {\n        cmd: \"spectacle\",\n        args: options.selection\n          ? [\"-r\", \"-b\", \"-n\", \"-o\", output]\n          : [\"-b\", \"-n\", \"-o\", output]\n      },\n      {\n        cmd: \"import\", // ImageMagick\n        args: [output]\n      }\n    ];\n    \n    let captured = false;\n    for (const tool of tools) {\n      try {\n        const { success } = await new Deno.Command(tool.cmd, {\n          args: tool.args\n        }).output();\n        if (success) {\n          captured = true;\n          break;\n        }\n      } catch {\n        // Try next tool\n      }\n    }\n    \n    if (!captured) {\n      throw new Error(\n        \"Screenshot failed. Install one of: scrot, gnome-screenshot, spectacle, or imagemagick\"\n      );\n    }\n  }\n  \n  return output;\n}\n\n// Get screen dimensions (cross-platform)\nexport async function getScreenSize() {\n  if (platform.isDarwin) {\n    // macOS: Use system_profiler\n    const { stdout } = await new Deno.Command(\"system_profiler\", {\n      args: [\"SPDisplaysDataType\", \"-json\"]\n    }).output();\n    \n    try {\n      const data = JSON.parse(new TextDecoder().decode(stdout));\n      const display = data.SPDisplaysDataType[0].spdisplays_ndrvs[0];\n      const resolution = display._spdisplays_resolution.match(/(\\d+) x (\\d+)/);\n      if (resolution) {\n        return {\n          width: parseInt(resolution[1]),\n          height: parseInt(resolution[2])\n        };\n      }\n    } catch {}\n    \n  } else if (platform.isWindows) {\n    // Windows: Use PowerShell\n    const script = `\n      Add-Type -AssemblyName System.Windows.Forms\n      $screen = [System.Windows.Forms.Screen]::PrimaryScreen\n      Write-Host \"$($screen.Bounds.Width),$($screen.Bounds.Height)\"\n    `;\n    \n    const { stdout } = await new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", script]\n    }).output();\n    \n    const [width, height] = new TextDecoder().decode(stdout).trim().split(\",\");\n    return {\n      width: parseInt(width),\n      height: parseInt(height)\n    };\n    \n  } else {\n    // Linux: Try xrandr or xdpyinfo\n    try {\n      const { stdout } = await new Deno.Command(\"xrandr\", {\n        args: [\"--current\"]\n      }).output();\n      \n      const output = new TextDecoder().decode(stdout);\n      const match = output.match(/primary (\\d+)x(\\d+)/);\n      if (match) {\n        return {\n          width: parseInt(match[1]),\n          height: parseInt(match[2])\n        };\n      }\n    } catch {\n      try {\n        const { stdout } = await new Deno.Command(\"xdpyinfo\").output();\n        const output = new TextDecoder().decode(stdout);\n        const match = output.match(/dimensions:\\s+(\\d+)x(\\d+)/);\n        if (match) {\n          return {\n            width: parseInt(match[1]),\n            height: parseInt(match[2])\n          };\n        }\n      } catch {}\n    }\n  }\n  \n  // Fallback\n  return { width: 1920, height: 1080 };\n}",
  "core/command.js": "// Unified cross-platform command execution\n// Eliminates duplicate platform detection across modules\n\nimport { isDarwin, isWindows, isLinux, decode, powershell, linuxTool } from \"./platform.js\";\n\n/**\n * Execute platform-specific commands with automatic OS detection\n * @param {Object} commands - Object with mac, windows, linux command configs\n * @returns {Promise<any>} Command output\n */\nexport async function runPlatformCommand(commands) {\n  if (isDarwin && commands.mac) {\n    return await runMacCommand(commands.mac);\n  } else if (isWindows && commands.windows) {\n    return await runWindowsCommand(commands.windows);\n  } else if (isLinux && commands.linux) {\n    return await runLinuxCommand(commands.linux);\n  }\n  throw new Error(`Unsupported platform or missing command configuration`);\n}\n\nasync function runMacCommand(config) {\n  const { cmd = \"osascript\", args = [], script, fallback } = config;\n  \n  try {\n    if (script) {\n      const result = await new Deno.Command(cmd, {\n        args: [...args, \"-e\", script]\n      }).output();\n      \n      if (config.decode !== false) {\n        return decode(result.stdout);\n      }\n      return result;\n    }\n    \n    const result = await new Deno.Command(cmd, { args }).output();\n    if (!result.success && fallback) {\n      throw new Error(\"Primary command failed\");\n    }\n    \n    if (config.decode !== false && result.stdout) {\n      return decode(result.stdout);\n    }\n    return result;\n  } catch (error) {\n    if (fallback) {\n      // Handle fallback - can be a function or command config\n      if (typeof fallback === 'function') {\n        return await fallback();\n      }\n      return await runMacCommand(fallback);\n    }\n    throw error;\n  }\n}\n\nasync function runWindowsCommand(config) {\n  const { script, decode: shouldDecode = true } = config;\n  \n  if (script) {\n    const result = await powershell(script);\n    if (shouldDecode) {\n      return decode(result.stdout);\n    }\n    return result;\n  }\n  \n  throw new Error(\"Windows command requires a script\");\n}\n\nasync function runLinuxCommand(config) {\n  const { xdotool, ydotool, fallback, errorMsg, cmd, args } = config;\n  \n  // Use specific command if provided\n  if (cmd) {\n    try {\n      const result = await new Deno.Command(cmd, { args: args || [] }).output();\n      if (!result.success && fallback) {\n        throw new Error(\"Primary command failed\");\n      }\n      if (config.decode !== false) {\n        return decode(result.stdout);\n      }\n      return result;\n    } catch (error) {\n      if (fallback) {\n        // Handle fallback - can be function, array, or single command\n        if (typeof fallback === 'function') {\n          return await fallback();\n        }\n        if (Array.isArray(fallback)) {\n          for (const fb of fallback) {\n            try {\n              const result = await new Deno.Command(fb.cmd, { args: fb.args }).output();\n              if (config.decode !== false) {\n                return decode(result.stdout);\n              }\n              return result;\n            } catch {\n              continue;\n            }\n          }\n          throw new Error(errorMsg || \"No Linux command available\");\n        }\n        // Single fallback command\n        return await runLinuxCommand(fallback);\n      }\n      throw error;\n    }\n  }\n  \n  // Use xdotool/ydotool fallback pattern\n  if (xdotool && ydotool) {\n    const result = await linuxTool(xdotool, ydotool, errorMsg);\n    if (config.decode !== false) {\n      return decode(result.stdout);\n    }\n    return result;\n  }\n  \n  // Use fallback if no primary command\n  if (fallback) {\n    if (typeof fallback === 'function') {\n      return await fallback();\n    }\n    if (Array.isArray(fallback)) {\n      for (const fb of fallback) {\n        try {\n          const result = await new Deno.Command(fb.cmd, { args: fb.args }).output();\n          if (config.decode !== false) {\n            return decode(result.stdout);\n          }\n          return result;\n        } catch {\n          continue;\n        }\n      }\n    }\n    throw new Error(errorMsg || \"No Linux command available\");\n  }\n  \n  throw new Error(\"Linux command configuration required\");\n}\n\n/**\n * Simple command runner that returns decoded text by default\n */\nexport async function runCommand(cmd, args = []) {\n  const result = await new Deno.Command(cmd, { args }).output();\n  return decode(result.stdout);\n}\n\n/**\n * Check if a command exists on the system\n */\nexport async function commandExists(cmd) {\n  try {\n    const checkCmd = isWindows ? \"where\" : \"which\";\n    await new Deno.Command(checkCmd, { args: [cmd] }).output();\n    return true;\n  } catch {\n    return false;\n  }\n}",
  "core/database.js": "// Database module - Cross-platform SQLite persistence\n\nimport { DatabaseSync } from \"node:sqlite\";  // Works in compiled binaries!\nimport * as platform from \"./platform.js\";\nimport { notifyModulesChanged, notifyEvent } from \"./notifier.js\";\n\n// Module configuration\nclass ModuleConfig {\n  static get dbPath() {\n    if (platform.isDarwin) {\n      return `${platform.homeDir()}/Library/Application Support/HLVM/HLVM.sqlite`;\n    } else if (platform.isWindows) {\n      const appData = Deno.env.get(\"APPDATA\") || `${platform.homeDir()}\\\\AppData\\\\Roaming`;\n      return `${appData}\\\\HLVM\\\\HLVM.sqlite`;\n    } else {\n      const xdgData = Deno.env.get(\"XDG_DATA_HOME\") || `${platform.homeDir()}/.local/share`;\n      return `${xdgData}/HLVM/HLVM.sqlite`;\n    }\n  }\n\n  static get dbDir() {\n    const path = this.dbPath;\n    return path.substring(0, path.lastIndexOf(platform.isWindows ? \"\\\\\" : \"/\"));\n  }\n\n  static get modulesDir() {\n    return `${this.dbDir}${platform.pathSep}modules`;\n  }\n}\n\n// Database manager\nclass DatabaseManager {\n  constructor() {\n    this.path = ModuleConfig.dbPath;\n    this.dbDir = ModuleConfig.dbDir;\n    this.modulesDir = ModuleConfig.modulesDir;\n    this.db = null;\n    this.esbuild = null;\n  }\n\n  async init() {\n    // Ensure directories exist\n    await Deno.mkdir(this.dbDir, { recursive: true });\n    await Deno.mkdir(this.modulesDir, { recursive: true });\n\n    // Open database with WAL mode\n    this.db = new DatabaseSync(this.path);\n    this.db.exec(\"PRAGMA journal_mode=WAL\");\n\n    // Initialize schema\n    await this.initSchema();\n\n    // Try to load esbuild for bundling\n    try {\n      this.esbuild = await import(\"https://deno.land/x/esbuild@0.20.0/mod.js\");\n    } catch {\n      // esbuild not available - bundling will be disabled\n    }\n  }\n\n  async initSchema() {\n    const tableInfo = this.db.prepare(\"PRAGMA table_info(modules)\").all();\n    const hasSourceCode = tableInfo.some(col => col.name === 'source_code');\n    const hasFilePath = tableInfo.some(col => col.name === 'file_path');\n\n    if (hasSourceCode && !hasFilePath) {\n      await this.migrateFromOldSchema();\n    } else if (!hasSourceCode && !hasFilePath) {\n      this.createNewSchema();\n    }\n  }\n\n  async migrateFromOldSchema() {\n    console.log(\"Migrating HLVM database to new schema...\");\n    \n    this.db.exec(`\n      CREATE TABLE IF NOT EXISTS modules_new (\n        key TEXT PRIMARY KEY,\n        namespace TEXT NOT NULL,\n        file_path TEXT NOT NULL,\n        entry_point TEXT DEFAULT 'default',\n        metadata TEXT DEFAULT '{}',\n        type TEXT DEFAULT 'javascript',\n        updated_at INTEGER NOT NULL,\n        spotlight BOOLEAN DEFAULT 1\n      )\n    `);\n    \n    const oldModules = this.db.prepare(\"SELECT * FROM modules\").all();\n    for (const mod of oldModules) {\n      const fileName = `${mod.key}.module.js`;\n      const filePath = `${this.modulesDir}${platform.pathSep}${fileName}`;\n      await Deno.writeTextFile(filePath, mod.source_code);\n      \n      this.db.prepare(`\n        INSERT INTO modules_new (key, namespace, file_path, entry_point, metadata, type, updated_at, spotlight)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n      `).run(mod.key, mod.namespace, `modules/${fileName}`, 'default', mod.metadata, mod.type, mod.updated_at, mod.spotlight);\n    }\n    \n    this.db.exec(\"DROP TABLE modules\");\n    this.db.exec(\"ALTER TABLE modules_new RENAME TO modules\");\n    console.log(\"Migration complete!\");\n  }\n\n  createNewSchema() {\n    this.db.exec(`\n      CREATE TABLE IF NOT EXISTS modules (\n        key TEXT PRIMARY KEY,\n        namespace TEXT NOT NULL,\n        file_path TEXT NOT NULL,\n        entry_point TEXT DEFAULT 'default',\n        metadata TEXT DEFAULT '{}',\n        type TEXT DEFAULT 'javascript',\n        updated_at INTEGER NOT NULL,\n        spotlight BOOLEAN DEFAULT 1\n      )\n    `);\n  }\n}\n\n// Module bundler\nclass ModuleBundler {\n  constructor(esbuild) {\n    this.esbuild = esbuild;\n  }\n\n  isFilePath(input) {\n    try {\n      const stat = Deno.statSync(input);\n      return stat.isFile;\n    } catch {\n      return input.includes('/') || input.endsWith('.js') || input.endsWith('.ts');\n    }\n  }\n\n  async bundle(codeOrPath) {\n    if (!this.esbuild) {\n      // Fallback without bundling\n      const isPath = this.isFilePath(codeOrPath);\n      if (isPath) {\n        return await Deno.readTextFile(codeOrPath);\n      }\n      return typeof codeOrPath === 'function' \n        ? `export default ${codeOrPath.toString()}`\n        : codeOrPath;\n    }\n    \n    const isPath = this.isFilePath(codeOrPath);\n    \n    try {\n      const result = await this.esbuild.build({\n        entryPoints: isPath ? [codeOrPath] : undefined,\n        stdin: !isPath ? {\n          contents: typeof codeOrPath === 'function' \n            ? `export default ${codeOrPath.toString()}`\n            : codeOrPath,\n          loader: 'js',\n          resolveDir: Deno.cwd(),\n        } : undefined,\n        bundle: true,\n        format: 'esm',\n        platform: 'browser',\n        target: 'esnext',\n        write: false,\n      });\n      \n      if (result.errors.length > 0) {\n        const error = result.errors[0];\n        throw new Error(`${error.text} at ${error.location?.file || 'input'}:${error.location?.line || 0}`);\n      }\n      \n      await this.esbuild.stop();\n      return result.outputFiles[0].text;\n    } catch (error) {\n      error.type = this.getErrorType(error.message);\n      throw error;\n    }\n  }\n\n  getErrorType(message) {\n    if (message.includes('Could not resolve')) return 'import';\n    if (message.includes('Syntax') || message.includes('Unexpected')) return 'syntax';\n    return 'bundle';\n  }\n}\n\n// Module operations\nclass ModuleOperations {\n  constructor(dbManager, bundler) {\n    this.dbManager = dbManager;\n    this.bundler = bundler;\n  }\n\n  async save(name, codeOrPath) {\n    try {\n      const bundled = await this.bundler.bundle(codeOrPath);\n      const hasDefaultFunction = this.hasDefaultExport(bundled);\n      \n      // Save file\n      const fileName = `${name}.module.js`;\n      const filePath = `${this.dbManager.modulesDir}${platform.pathSep}${fileName}`;\n      await Deno.writeTextFile(filePath, bundled);\n      \n      // Save metadata\n      const metadata = this.createMetadata(hasDefaultFunction);\n      this.saveToDatabase(name, fileName, hasDefaultFunction, metadata);\n      \n      await notifyModulesChanged();\n      return true;\n    } catch (error) {\n      await this.handleSaveError(name, error);\n      throw error;\n    }\n  }\n\n  hasDefaultExport(code) {\n    return code.includes('export default function') || \n           code.includes('export default async function');\n  }\n\n  createMetadata(hasDefaultFunction) {\n    return JSON.stringify({\n      hasDefaultFunction,\n      createdAt: new Date().toISOString(),\n      platform: platform.os,\n      bundled: true,\n      isUserModule: true\n    });\n  }\n\n  saveToDatabase(name, fileName, hasDefaultFunction, metadata) {\n    const namespace = `hlvm.${name}`;\n    const entryPoint = hasDefaultFunction ? 'default' : 'script';\n    \n    this.dbManager.db.prepare(`\n      INSERT OR REPLACE INTO modules \n      (key, namespace, file_path, entry_point, metadata, type, updated_at, spotlight)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    `).run(name, namespace, `modules/${fileName}`, entryPoint, metadata, 'javascript', Date.now(), 1);\n  }\n\n  async handleSaveError(name, error) {\n    console.error(`❌ Failed to save '${name}': ${error.message}`);\n    await notifyEvent('module.bundle.failed', {\n      name,\n      error: error.message,\n      type: error.type || 'unknown'\n    });\n  }\n\n  async load(name) {\n    try {\n      const module = this.getModule(name);\n      if (!module) throw new Error(`Module '${name}' not found`);\n      \n      const code = await this.readModuleCode(module);\n      const imported = await this.importModule(name, code);\n      \n      return imported.default || imported;\n    } catch (e) {\n      throw new Error(`Load failed: ${e.message}`);\n    }\n  }\n\n  getModule(name) {\n    return this.dbManager.db.prepare(\"SELECT * FROM modules WHERE key = ?\").get(name);\n  }\n\n  async readModuleCode(module) {\n    const filePath = `${this.dbManager.dbDir}${platform.pathSep}${module.file_path}`;\n    return await Deno.readTextFile(filePath);\n  }\n\n  async importModule(name, code) {\n    const tempDir = platform.tempDir();\n    const tempFile = `${tempDir}${platform.pathSep}hlvm-module-${name}-${Date.now()}.js`;\n    await Deno.writeTextFile(tempFile, code);\n    \n    const imported = await import(`file://${tempFile}`);\n    \n    // Clean up after import\n    setTimeout(() => Deno.remove(tempFile).catch(() => {}), 1000);\n    \n    return imported;\n  }\n\n  async getSource(name) {\n    try {\n      const module = this.getModule(name);\n      if (!module) throw new Error(`Module '${name}' not found`);\n      \n      return await this.readModuleCode(module);\n    } catch (e) {\n      throw new Error(`Get source failed: ${e.message}`);\n    }\n  }\n\n  list() {\n    try {\n      const modules = this.dbManager.db.prepare(`\n        SELECT key, namespace, file_path, entry_point, type, updated_at, spotlight \n        FROM modules \n        WHERE spotlight = 1 \n        ORDER BY updated_at DESC\n      `).all();\n      \n      return modules.map(m => ({\n        key: m.key,\n        namespace: m.namespace,\n        filePath: m.file_path,\n        entryPoint: m.entry_point,\n        type: m.type,\n        updatedAt: new Date(m.updated_at)\n      }));\n    } catch (e) {\n      return [];\n    }\n  }\n\n  async remove(name) {\n    try {\n      const module = this.getModule(name);\n      \n      if (module) {\n        const filePath = `${this.dbManager.dbDir}${platform.pathSep}${module.file_path}`;\n        await Deno.remove(filePath).catch(() => {});\n      }\n      \n      this.dbManager.db.prepare(\"DELETE FROM modules WHERE key = ?\").run(name);\n      await notifyModulesChanged();\n      \n      return true;\n    } catch (e) {\n      throw new Error(`Remove failed: ${e.message}`);\n    }\n  }\n}\n\n// Initialize and export\nconst dbManager = new DatabaseManager();\nawait dbManager.init();\n\nconst bundler = new ModuleBundler(dbManager.esbuild);\nconst operations = new ModuleOperations(dbManager, bundler);\n\n// Export public API\nexport const path = dbManager.path;\nexport const db = dbManager.db;\nexport const save = (name, codeOrPath) => operations.save(name, codeOrPath);\nexport const load = (name) => operations.load(name);\nexport const getSource = (name) => operations.getSource(name);\nexport const list = () => operations.list();\nexport const remove = (name) => operations.remove(name);",
  "core/notifier.js": "// Cross-platform system notification module\n// Notifies other processes about HLVM changes\n\nimport * as platform from \"./platform.js\";\n\n/**\n * Notify system-wide that HLVM modules have changed\n * This allows GUI apps to refresh their module lists in real-time\n */\nexport async function notifyModulesChanged() {\n  try {\n    if (platform.isDarwin) {\n      // macOS: Use Darwin distributed notifications via Swift\n      const cmd = new Deno.Command(\"swift\", {\n        args: [\"-e\", `\n          import Foundation\n          CFNotificationCenterPostNotification(\n            CFNotificationCenterGetDarwinNotifyCenter(),\n            CFNotificationName(\"com.hlvm.modules.changed\" as CFString),\n            nil,\n            nil,\n            true\n          )\n        `],\n        stdout: \"null\",\n        stderr: \"null\"\n      });\n      await cmd.output();\n      console.log(\"📢 Notified system: modules changed\");\n      return true;\n      \n    } else if (platform.isWindows) {\n      // Windows: Could use named pipes or registry events\n      // For now, just log\n      console.log(\"📢 Windows notification not implemented yet\");\n      return false;\n      \n    } else if (platform.isLinux) {\n      // Linux: Could use D-Bus notifications\n      try {\n        const cmd = new Deno.Command(\"dbus-send\", {\n          args: [\n            \"--system\",\n            \"--type=signal\",\n            \"/com/hlvm/modules\",\n            \"com.hlvm.modules.Changed\"\n          ],\n          stdout: \"null\",\n          stderr: \"null\"\n        });\n        await cmd.output();\n        console.log(\"📢 Notified system via D-Bus: modules changed\");\n        return true;\n      } catch {\n        console.log(\"📢 Linux notification failed (D-Bus not available)\");\n        return false;\n      }\n      \n    } else {\n      console.log(\"📢 Platform notification not supported\");\n      return false;\n    }\n  } catch (error) {\n    console.error(\"Failed to send system notification:\", error.message);\n    return false;\n  }\n}\n\n/**\n * Notify system about a specific event\n * @param {string} event - Event name (e.g., \"module.saved\", \"module.removed\")\n * @param {object} data - Optional event data\n */\nexport async function notifyEvent(event, data = null) {\n  try {\n    if (platform.isDarwin) {\n      // macOS: Send event-specific notification\n      const notificationName = `com.hlvm.${event}`;\n      const cmd = new Deno.Command(\"swift\", {\n        args: [\"-e\", `\n          import Foundation\n          CFNotificationCenterPostNotification(\n            CFNotificationCenterGetDarwinNotifyCenter(),\n            CFNotificationName(\"${notificationName}\" as CFString),\n            nil,\n            ${data ? `[\"data\": \"${JSON.stringify(data).replace(/\"/g, '\\\\\"')}\"] as CFDictionary` : 'nil'},\n            true\n          )\n        `],\n        stdout: \"null\",\n        stderr: \"null\"\n      });\n      await cmd.output();\n      console.log(`📢 Notified system: ${event}`);\n      return true;\n    }\n    // Add other platforms as needed\n    return false;\n  } catch (error) {\n    console.error(`Failed to send ${event} notification:`, error.message);\n    return false;\n  }\n}\n\n// Export convenience functions for common events\nexport const notifyModuleSaved = (moduleName) => notifyEvent(\"module.saved\", { name: moduleName });\nexport const notifyModuleRemoved = (moduleName) => notifyEvent(\"module.removed\", { name: moduleName });\nexport const notifyDatabaseChanged = () => notifyEvent(\"database.changed\");",
  "core/platform.js": "// Platform module - Cross-platform OS information\n\nexport const os = Deno.build.os;\nexport const arch = Deno.build.arch;\nexport const version = Deno.osRelease();\nexport const isDarwin = os === \"darwin\";\nexport const isWindows = os === \"windows\";\nexport const isLinux = os === \"linux\";\nexport function tempDir() {\n  const envTemp = Deno.env.get(\"TMPDIR\") || \n                  Deno.env.get(\"TEMP\") || \n                  Deno.env.get(\"TMP\");\n  if (envTemp) return envTemp;\n  \n  if (isWindows) {\n    const userProfile = Deno.env.get(\"USERPROFILE\");\n    if (userProfile) {\n      return `${userProfile}\\\\AppData\\\\Local\\\\Temp`;\n    }\n    return \"C:\\\\Windows\\\\Temp\";\n  }\n  \n  return \"/tmp\";\n}\n\nexport function homeDir() {\n  if (isWindows) {\n    return Deno.env.get(\"USERPROFILE\") || Deno.env.get(\"HOMEDRIVE\") + Deno.env.get(\"HOMEPATH\");\n  }\n  return Deno.env.get(\"HOME\") || \"/\";\n}\n\n// Path and executable info\nexport const pathSep = isWindows ? \"\\\\\" : \"/\";\nexport const exeExt = isWindows ? \".exe\" : \"\";\n\n// Shell access\nexport function shell() {\n  if (isWindows) {\n    return [\"cmd\", \"/c\"];\n  }\n  return [\"sh\", \"-c\"];\n}\n\n// ===== MERGED FROM utils.js =====\n\n// Escape string for shell command (cross-platform)\nexport function escapeShell(str) {\n  if (isWindows) {\n    // PowerShell escaping\n    return str.replace(/\"/g, '`\"').replace(/\\$/g, '`$');\n  } else {\n    // Unix shell escaping\n    return str.replace(/'/g, \"'\\\\''\");\n  }\n}\n\n// Escape text for keyboard input (cross-platform)\nexport function escapeKeyboard(text) {\n  if (isWindows) {\n    // PowerShell SendKeys escaping\n    return text\n      .replace(/\\{/g, '{{')\n      .replace(/\\}/g, '}}')\n      .replace(/\\(/g, '{(}')\n      .replace(/\\)/g, '{)}')\n      .replace(/\\+/g, '{+}')\n      .replace(/\\^/g, '{^}')\n      .replace(/%/g, '{%}')\n      .replace(/~/g, '{~}');\n  } else {\n    // Unix shell escaping for osascript\n    return text.replace(/'/g, \"'\\\\''\");\n  }\n}\n\n// ===== MERGED FROM exec.js =====\n\n// Decode text from command output\nexport function decode(buffer) {\n  return new TextDecoder().decode(buffer);\n}\n\n// Run PowerShell command with standard args\nexport async function powershell(script) {\n  return await new Deno.Command(\"powershell\", {\n    args: [\"-NoProfile\", \"-Command\", script]\n  }).output();\n}\n\n// PowerShell script boilerplate\nexport const PS = {\n  forms: \"Add-Type -AssemblyName System.Windows.Forms\",\n  drawing: \"Add-Type -AssemblyName System.Drawing\",\n  visualBasic: \"Add-Type -AssemblyName Microsoft.VisualBasic\"\n};\n\n// Linux tool with xdotool/ydotool fallback\nexport async function linuxTool(xdotoolArgs, ydotoolArgs, errorMsg) {\n  try {\n    return await new Deno.Command(\"xdotool\", { args: xdotoolArgs }).output();\n  } catch {\n    try {\n      return await new Deno.Command(\"ydotool\", { args: ydotoolArgs }).output();\n    } catch {\n      throw new Error(errorMsg || \"Install xdotool (X11) or ydotool (Wayland)\");\n    }\n  }\n}\n\n// Common error messages\nexport const ERRORS = {\n  LINUX_TOOLS: \"Install xdotool (X11) or ydotool (Wayland)\",\n  LINUX_NOTIFY: \"Install libnotify-bin (notify-send)\",\n  LINUX_DIALOG: \"Install zenity or kdialog\"\n};",
  "core/system.js": "// System module - Cross-platform system utilities\n\nimport * as platform from \"./platform.js\";\n\nexport async function hostname() {\n  try {\n    return Deno.hostname();\n  } catch {\n    const p = new Deno.Command(\"hostname\");\n    const { stdout } = await p.output();\n    return new TextDecoder().decode(stdout).trim();\n  }\n}\n\nexport async function exec(cmd) {\n  const shell = platform.shell();\n  const p = new Deno.Command(shell[0], { \n    args: [...shell.slice(1), cmd] \n  });\n  const { stdout, stderr, code } = await p.output();\n  return {\n    stdout: new TextDecoder().decode(stdout),\n    stderr: new TextDecoder().decode(stderr),\n    code\n  };\n}\n\n// Direct exports from Deno\nexport const exit = Deno.exit;\nexport const pid = () => Deno.pid;\nexport const cwd = Deno.cwd;\nexport const chdir = Deno.chdir;\n\nexport function env(key, value) {\n  if (value !== undefined) {\n    Deno.env.set(key, value);\n  }\n  return Deno.env.get(key);\n}",
  "fs/filesystem.js": "// Filesystem module - Cross-platform file operations\n\nimport * as platform from \"../core/platform.js\";\n\n// File operations\nclass FileOps {\n  static read = (path) => Deno.readTextFile(path);\n  static write = (path, content) => Deno.writeTextFile(path, content);\n  static readBytes = (path) => Deno.readFile(path);\n  static writeBytes = (path, data) => Deno.writeFile(path, data);\n  \n  static async exists(path) {\n    try {\n      await Deno.stat(path);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  \n  static stat = (path) => Deno.stat(path);\n}\n\n// Directory operations\nclass DirOps {\n  static mkdir = (path, options = { recursive: true }) => Deno.mkdir(path, options);\n  static readdir = (path) => Deno.readDir(path);\n  static remove = (path, options = { recursive: true }) => Deno.remove(path, options);\n  \n  static async copy(src, dest) {\n    const srcStat = await FileOps.stat(src);\n    \n    if (srcStat.isFile) {\n      const data = await FileOps.readBytes(src);\n      await FileOps.writeBytes(dest, data);\n    } else if (srcStat.isDirectory) {\n      await this.mkdir(dest);\n      for await (const entry of this.readdir(src)) {\n        await this.copy(\n          PathUtils.join(src, entry.name),\n          PathUtils.join(dest, entry.name)\n        );\n      }\n    }\n  }\n  \n  static async move(src, dest) {\n    try {\n      await Deno.rename(src, dest);\n    } catch {\n      // If rename fails (e.g., across drives on Windows), copy and delete\n      await this.copy(src, dest);\n      await this.remove(src);\n    }\n  }\n}\n\n// Path utilities\nclass PathUtils {\n  static join(...paths) {\n    return paths.join(platform.pathSep);\n  }\n  \n  static dirname(path) {\n    const sep = platform.pathSep;\n    const lastIndex = path.lastIndexOf(sep);\n    return lastIndex === -1 ? \".\" : path.substring(0, lastIndex);\n  }\n  \n  static basename(path, ext = \"\") {\n    const sep = platform.pathSep;\n    const lastIndex = path.lastIndexOf(sep);\n    const base = lastIndex === -1 ? path : path.substring(lastIndex + 1);\n    return ext && base.endsWith(ext) \n      ? base.substring(0, base.length - ext.length)\n      : base;\n  }\n  \n  static extname(path) {\n    const lastDot = path.lastIndexOf(\".\");\n    return lastDot === -1 ? \"\" : path.substring(lastDot);\n  }\n}\n\n// Export public API (maintain backward compatibility)\nexport const read = FileOps.read;\nexport const write = FileOps.write;\nexport const readBytes = FileOps.readBytes;\nexport const writeBytes = FileOps.writeBytes;\nexport const exists = FileOps.exists;\nexport const stat = FileOps.stat;\n\nexport const mkdir = DirOps.mkdir;\nexport const readdir = DirOps.readdir;\nexport const remove = DirOps.remove;\nexport const copy = DirOps.copy;\nexport const move = DirOps.move;\n\nexport const join = PathUtils.join;\nexport const dirname = PathUtils.dirname;\nexport const basename = PathUtils.basename;\nexport const extname = PathUtils.extname;",
  "io/clipboard.js": "// Clipboard module - Cross-platform clipboard operations\n\nimport * as platform from \"../core/platform.js\";\n\nexport async function read() {\n  if (platform.isDarwin) {\n    // macOS: pbpaste (built-in)\n    const p = new Deno.Command(\"pbpaste\");\n    const { stdout } = await p.output();\n    return new TextDecoder().decode(stdout);\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell Get-Clipboard (built-in)\n    const p = new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", \"Get-Clipboard\"]\n    });\n    const { stdout } = await p.output();\n    return new TextDecoder().decode(stdout).replace(/\\r\\n$/, '');\n    \n  } else {\n    // Linux: Try multiple clipboard tools in order of preference\n    const tools = [\n      { cmd: \"xclip\", args: [\"-selection\", \"clipboard\", \"-o\"] },\n      { cmd: \"xsel\", args: [\"--clipboard\", \"--output\"] },\n      { cmd: \"wl-paste\", args: [] } // Wayland\n    ];\n    \n    for (const tool of tools) {\n      try {\n        const p = new Deno.Command(tool.cmd, { args: tool.args });\n        const { stdout, success } = await p.output();\n        if (success) {\n          return new TextDecoder().decode(stdout);\n        }\n      } catch {\n        // Try next tool\n      }\n    }\n    \n    throw new Error(\n      \"Clipboard read failed. Install one of: xclip, xsel, or wl-clipboard\"\n    );\n  }\n}\n\nexport async function write(text) {\n  if (platform.isDarwin) {\n    // macOS: pbcopy (built-in)\n    const p = new Deno.Command(\"pbcopy\", { stdin: \"piped\" });\n    const proc = p.spawn();\n    const writer = proc.stdin.getWriter();\n    await writer.write(new TextEncoder().encode(text));\n    await writer.close();\n    await proc.status;\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell Set-Clipboard (built-in)\n    // Escape quotes for PowerShell\n    const escaped = text.replace(/\"/g, '`\"').replace(/\\$/g, '`$');\n    const p = new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", `Set-Clipboard -Value \"${escaped}\"`]\n    });\n    await p.output();\n    \n  } else {\n    // Linux: Try multiple clipboard tools\n    const tools = [\n      { cmd: \"xclip\", args: [\"-selection\", \"clipboard\"] },\n      { cmd: \"xsel\", args: [\"--clipboard\", \"--input\"] },\n      { cmd: \"wl-copy\", args: [] } // Wayland\n    ];\n    \n    for (const tool of tools) {\n      try {\n        const p = new Deno.Command(tool.cmd, { \n          args: tool.args,\n          stdin: \"piped\"\n        });\n        const proc = p.spawn();\n        const writer = proc.stdin.getWriter();\n        await writer.write(new TextEncoder().encode(text));\n        await writer.close();\n        const { success } = await proc.status;\n        if (success) return;\n      } catch {\n        // Try next tool\n      }\n    }\n    \n    throw new Error(\n      \"Clipboard write failed. Install one of: xclip, xsel, or wl-clipboard\"\n    );\n  }\n}\n\n// Check if clipboard is available\nexport async function isAvailable() {\n  try {\n    if (platform.isDarwin || platform.isWindows) {\n      return true; // Built-in support\n    }\n    \n    // Linux: Check for tools\n    const tools = [\"xclip\", \"xsel\", \"wl-paste\"];\n    for (const tool of tools) {\n      try {\n        const p = new Deno.Command(\"which\", { args: [tool] });\n        const { success } = await p.output();\n        if (success) return true;\n      } catch {}\n    }\n    return false;\n  } catch {\n    return false;\n  }\n}",
  "ui/control.js": "// UI Control Module - Control macOS GUI via WebSocket\n// Replaces __HLVM_COMMAND__ strings with proper JSON-RPC calls\n\nlet socket = null;\nlet requestId = 0;\nconst pending = new Map();\n\n// Connect to macOS app WebSocket server\nasync function connect(port = 11436) {\n  return new Promise((resolve, reject) => {\n    try {\n      socket = new WebSocket(`ws://localhost:${port}`);\n      \n      socket.onopen = () => {\n        console.log(\"Connected to macOS app\");\n        resolve(true);\n      };\n      \n      socket.onerror = (error) => {\n        reject(new Error(`Connection failed: ${error}`));\n      };\n      \n      socket.onmessage = (event) => {\n        try {\n          const msg = JSON.parse(event.data);\n          \n          // Handle response to our request\n          if (msg.id && pending.has(msg.id)) {\n            const { resolve, reject } = pending.get(msg.id);\n            pending.delete(msg.id);\n            \n            if (msg.error) {\n              reject(new Error(msg.error.message));\n            } else {\n              resolve(msg.result);\n            }\n          }\n          \n          // Handle notifications from app\n          if (!msg.id && msg.method) {\n            handleNotification(msg.method, msg.params);\n          }\n        } catch (e) {\n          console.error(\"Message handling error:\", e);\n        }\n      };\n      \n      socket.onclose = () => {\n        console.log(\"Disconnected from macOS app\");\n        socket = null;\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n// Send JSON-RPC request and wait for response\nasync function request(method, params = null) {\n  if (!socket || socket.readyState !== WebSocket.OPEN) {\n    // Try to connect\n    try {\n      await connect();\n    } catch {\n      return { error: \"macOS app not available\" };\n    }\n  }\n  \n  const id = `req-${++requestId}`;\n  \n  return new Promise((resolve, reject) => {\n    const timeout = setTimeout(() => {\n      pending.delete(id);\n      reject(new Error(\"Request timeout\"));\n    }, 5000);\n    \n    pending.set(id, { \n      resolve: (result) => {\n        clearTimeout(timeout);\n        resolve(result);\n      }, \n      reject: (error) => {\n        clearTimeout(timeout);\n        reject(error);\n      }\n    });\n    \n    const request = {\n      jsonrpc: \"2.0\",\n      id,\n      method,\n      params\n    };\n    \n    socket.send(JSON.stringify(request));\n  });\n}\n\n// Send notification (no response expected)\nfunction notify(method, params = null) {\n  if (!socket || socket.readyState !== WebSocket.OPEN) {\n    console.warn(\"App not connected\");\n    return;\n  }\n  \n  const notification = {\n    jsonrpc: \"2.0\",\n    method,\n    params\n  };\n  \n  socket.send(JSON.stringify(notification));\n}\n\n// Handle notifications from app\nfunction handleNotification(method, params) {\n  console.log(`Notification from app: ${method}`, params);\n  \n  // Emit events if needed\n  if (globalThis.hlvm?.events) {\n    globalThis.hlvm.events.emit(method, params);\n  }\n}\n\n// UI control commands (replacing __HLVM_COMMAND__ strings)\nexport const ui = {\n  // Connection management\n  connect,\n  disconnect: () => {\n    if (socket) {\n      socket.close();\n      socket = null;\n    }\n  },\n  \n  isConnected: () => socket && socket.readyState === WebSocket.OPEN,\n  \n  // Spotlight commands (replacing __HLVM_SPOTLIGHT_*)\n  spotlight: {\n    toggle: () => request(\"spotlight.toggle\"),\n    show: () => request(\"spotlight.show\"),\n    hide: () => request(\"spotlight.hide\"),\n    navigateIn: () => request(\"spotlight.navigateIn\"),\n    navigateOut: () => request(\"spotlight.navigateOut\"),\n    search: (query) => request(\"spotlight.search\", { query }),\n    \n    // Note: Module management moved to hlvm.modules for generic use\n  },\n  \n  // Chat commands (replacing __HLVM_CHAT_*)\n  chat: {\n    toggle: () => request(\"chat.toggle\"),\n    stop: () => request(\"chat.stop\"),\n    cancel: () => request(\"chat.cancel\"),\n    createRoom: (name) => request(\"chat.createRoom\", { name }),\n    send: (message) => request(\"chat.send\", { message }),\n    list: () => request(\"chat.list\"),\n    selectRoom: (id) => request(\"chat.selectRoom\", { id }),\n    ask: (prompt) => request(\"chat.ask\", { prompt })\n  },\n  \n  // Playground commands (replacing __HLVM_PLAYGROUND_*)\n  playground: {\n    toggle: () => request(\"playground.toggle\"),\n    eval: (code) => request(\"playground.eval\", { code }),\n    increaseFont: () => request(\"playground.increaseFont\"),\n    decreaseFont: () => request(\"playground.decreaseFont\"),\n    setCode: (code) => request(\"playground.setCode\", { code })\n  },\n  \n  // Screenshot commands (replacing __HLVM_SCREENSHOT_*)\n  screenshot: {\n    capture: () => request(\"screenshot.capture\"),\n    captureScreen: () => request(\"screenshot.captureScreen\"),\n    captureEntire: () => request(\"screenshot.captureEntire\"),\n    captureSelection: () => request(\"screenshot.captureSelection\")\n  },\n  \n  // App commands (replacing __HLVM_APP_*)\n  preferences: () => request(\"app.preferences\"),\n  escape: () => request(\"app.escape\"),\n  eval: (code) => request(\"app.eval\", { code }),\n  settings: () => request(\"app.settings\"),\n  textEditor: () => request(\"app.textEditor\"),\n  minimize: () => request(\"app.minimize\"),\n  quit: () => request(\"app.quit\"),\n  \n  // Code commands (replacing __HLVM_CODE_*)\n  code: {\n    paste: (code) => request(\"code.paste\", { code }),\n    copy: () => request(\"code.copy\")\n  },\n  \n  // Utility commands\n  // Note: Clipboard operations use hlvm.clipboard directly (not via WebSocket)\n  \n  // REPL commands\n  repl: {\n    toggle: () => request(\"repl.toggle\"),\n    clear: () => request(\"repl.clear\"),\n    execute: (code) => request(\"repl.execute\", { code })\n  },\n  \n  // AI commands\n  ai: {\n    write: (prompt) => request(\"ai.write\", { prompt })\n  },\n  \n  // Raw request for custom commands\n  request,\n  notify\n};\n\nexport default ui;"
};

export const embeddedInit = "// HLVM Initialization - Clean Mediator\n// Imports all stdlib modules and exposes them through the hlvm namespace\n\n// Import all stdlib modules from organized structure\nimport * as platform from \"./stdlib/core/platform.js\";\nimport * as system from \"./stdlib/core/system.js\";\nimport * as db from \"./stdlib/core/database.js\";\nimport * as fs from \"./stdlib/fs/filesystem.js\";\nimport * as clipboard from \"./stdlib/io/clipboard.js\";\nimport * as notification from \"./stdlib/computer/notification.js\";\nimport * as screen from \"./stdlib/computer/screen.js\";\nimport * as keyboard from \"./stdlib/computer/keyboard.js\";\nimport * as mouse from \"./stdlib/computer/mouse.js\";\nimport * as ollama from \"./stdlib/ai/ollama.js\";\nimport ui from \"./stdlib/ui/control.js\";\nimport { context as computerContext } from \"./stdlib/computer/context.js\";\n\n// Create hlvm namespace inside IIFE to hide from global scope\nglobalThis.hlvm = (() => {\n  const hlvmBase = {\n    // LAYER 1: Core primitives - all building blocks\n    core: {\n      // System - OS/environment stuff (merge platform + system)\n      system: {\n        // Info & platform\n        os: platform.os,\n        arch: platform.arch,\n        version: platform.version,\n        hostname: system.hostname,\n        pid: system.pid,\n        isDarwin: platform.isDarwin,\n        isWindows: platform.isWindows,\n        isLinux: platform.isLinux,\n        \n        // Working directory & paths\n        homeDir: platform.homeDir,\n        tempDir: platform.tempDir,\n        cwd: system.cwd,\n        chdir: system.chdir,\n        pathSep: platform.pathSep,\n        exeExt: platform.exeExt,\n        \n        // Environment & execution\n        env: system.env,\n        exit: system.exit,\n        exec: system.exec,\n        shell: platform.shell,\n        powershell: platform.powershell,\n        \n        // Utilities\n        escapeShell: platform.escapeShell,\n        escapeKeyboard: platform.escapeKeyboard,\n        decode: platform.decode,\n        linuxTool: platform.linuxTool,\n        \n        // Constants\n        PS: platform.PS,\n        ERRORS: platform.ERRORS\n      },\n      \n      // Storage - persistence\n      storage: {\n        db: Object.assign(db.db, {\n          path: db.path,\n          load: db.load,\n          getSource: db.getSource\n        }),\n        modules: {\n          save: db.save,\n          remove: async (name) => {\n            // If no name given, remove ALL modules (nuke)\n            if (!name) {\n              const allModules = db.list();\n              for (const mod of allModules) {\n                await db.remove(mod.key);\n              }\n              console.log(`Removed all ${allModules.length} modules`);\n              return true;\n            }\n            // Otherwise remove specific module\n            return db.remove(name);\n          },\n          list: db.list,\n          load: db.load,\n          get: db.getSource,\n          has: async (name) => {\n            const modules = db.list();\n            return modules.some(m => m.key === name);\n          },\n          \n          // Shortcut management - permanent global shortcuts\n          shortcut: async (name, path) => {\n            // Remove shortcut if path is null\n            if (path === null || path === undefined) {\n              return removeShortcut(name);\n            }\n            return createShortcut(name, path);\n          },\n          shortcuts: () => listShortcuts(),\n          removeShortcut: (name) => removeShortcut(name),\n          updateShortcut: (name, path) => createShortcut(name, path)\n        }\n      },\n      \n      // IO - input/output\n      io: {\n        fs: {\n          read: fs.read,\n          write: fs.write,\n          readBytes: fs.readBytes,\n          writeBytes: fs.writeBytes,\n          exists: fs.exists,\n          stat: fs.stat,\n          remove: fs.remove,\n          copy: fs.copy,\n          move: fs.move,\n          mkdir: fs.mkdir,\n          readdir: fs.readdir,\n          // Path utilities stay here (fs context)\n          join: fs.join,\n          dirname: fs.dirname,\n          basename: fs.basename,\n          extname: fs.extname\n        },\n        clipboard: {\n          isAvailable: clipboard.isAvailable,\n          read: clipboard.read,\n          write: clipboard.write\n        }\n      },\n      \n      // Computer - automation\n      computer: {\n        keyboard: {\n          type: keyboard.type,\n          press: keyboard.press,\n          shortcut: keyboard.shortcut\n        },\n        mouse: {\n          move: mouse.move,\n          click: mouse.click,\n          doubleClick: mouse.doubleClick,\n          drag: mouse.drag,\n          position: mouse.position\n        },\n        screen: {\n          capture: screen.capture,\n          getScreenSize: screen.getScreenSize\n        },\n        context: computerContext\n      },\n      \n      // UI - user interface\n      ui: {\n        notification: {\n          alert: notification.alert,\n          confirm: notification.confirm,\n          notify: notification.notify,\n          prompt: notification.prompt\n        }\n      },\n      \n      // AI - AI services\n      ai: {\n        ollama: ollama\n      }\n    },\n    \n    // LAYER 2: App control (top-level, not core!)\n    app: ui,\n    \n    // LAYER 3: High-level stdlib (empty for now, will add high-level functions later)\n    stdlib: {\n      // Future: ask(), fix(), translate(), summarize(), etc.\n    },\n    \n    // Context - returns context object (keep at root for convenience)\n    get context() {\n      return hlvmBase.core.computer.context;\n    },\n  \n  // Help\n  help: () => {\n    console.log(`\nHLVM - High-Level Virtual Machine\n==================================\n\nSTRUCTURE:\n  hlvm.core.*               - Core primitives (building blocks)\n  hlvm.app.*                - App control (GUI functions)\n  hlvm.stdlib.*             - High-level functions (coming soon)\n\nCORE MODULES:\n  hlvm.core.system          - OS/environment (exec, env, paths)\n  hlvm.core.storage         - Persistence (db, modules)\n  hlvm.core.io              - Input/Output (fs, clipboard)\n  hlvm.core.computer        - Automation (keyboard, mouse, screen)\n  hlvm.core.ui              - User interface (notifications)\n  hlvm.core.ai              - AI services (ollama)\n\nSTORAGE & MODULES:\n  hlvm.core.storage.modules.save()    - Save module\n  hlvm.core.storage.modules.remove()  - Remove module(s)\n  hlvm.core.storage.modules.list()    - List modules\n  hlvm.core.storage.modules.load()    - Load module\n\nFILE OPERATIONS:\n  hlvm.core.io.fs.read(path)          - Read text file\n  hlvm.core.io.fs.write(path, text)   - Write text file\n  hlvm.core.io.fs.exists(path)        - Check if path exists\n  hlvm.core.io.fs.remove(path)        - Delete file/directory\n  hlvm.core.io.fs.mkdir(path)         - Create directory\n  hlvm.core.io.fs.copy(src, dest)     - Copy file/directory\n  hlvm.core.io.fs.move(src, dest)     - Move file/directory\n\nCOMPUTER AUTOMATION:\n  hlvm.core.computer.keyboard.type()  - Type text\n  hlvm.core.computer.keyboard.press() - Press keys\n  hlvm.core.computer.mouse.click()    - Click mouse\n  hlvm.core.computer.mouse.move()     - Move mouse\n  hlvm.core.computer.screen.capture() - Capture screen\n\nAI SERVICES:\n  hlvm.core.ai.ollama.list()          - List models\n  hlvm.core.ai.ollama.chat()          - Chat with AI\n\nAPP CONTROL:\n  hlvm.app.spotlight                  - Spotlight UI\n  hlvm.app.chat                       - Chat UI\n  hlvm.app.playground                 - Code playground\n\nExamples:\n  // Files\n  await hlvm.core.io.fs.write('/tmp/test.txt', 'Hello')\n  const text = await hlvm.core.io.fs.read('/tmp/test.txt')\n  \n  // Notifications\n  await hlvm.core.ui.notification.notify(\"Done!\", \"HLVM\")\n  const name = await hlvm.core.ui.notification.prompt(\"Name?\")\n  \n  // Automation\n  await hlvm.core.computer.screen.capture(\"/tmp/screen.png\")\n  await hlvm.core.computer.keyboard.type(\"Hello\")\n  await hlvm.core.computer.mouse.click(100, 100)\n  \n  // AI\n  const response = await hlvm.core.ai.ollama.chat({ \n    model: 'llama3', \n    prompt: 'Hello' \n  })\n    `);\n  },\n  \n  // Status\n  status: () => {\n    const modules = Object.keys(hlvm).filter(k => typeof hlvm[k] === 'object');\n    const savedModules = hlvmBase.core.storage.modules.list();\n    \n    console.log('\\nHLVM Status:');\n    console.log('─'.repeat(40));\n    console.log('Top-level:', modules.join(', '));\n    console.log(`Saved Modules: ${savedModules.length} modules`);\n    console.log(`Database: ${hlvmBase.core.storage.db.path}`);\n    console.log(`Platform: ${hlvmBase.core.system.os} (${hlvmBase.core.system.arch})`);\n    console.log(`Temp Dir: ${hlvmBase.core.system.tempDir()}`);\n    console.log(`Home Dir: ${hlvmBase.core.system.homeDir()}`);\n  }\n  };\n\n  // Setup shortcut persistence\n  function setupShortcuts() {\n    // Create shortcuts table if not exists\n    db.db.exec(`\n    CREATE TABLE IF NOT EXISTS shortcuts (\n      name TEXT PRIMARY KEY,\n      path TEXT NOT NULL,\n      created_at INTEGER NOT NULL,\n      updated_at INTEGER NOT NULL\n    )\n  `);\n  \n  // Load existing shortcuts and create global functions\n  const shortcuts = db.db.prepare('SELECT * FROM shortcuts').all();\n  shortcuts.forEach(shortcut => {\n    try {\n      // Create the global shortcut function\n      globalThis[shortcut.name] = async (...args) => {\n        // Navigate the path to find the function\n        const parts = shortcut.path.split('.');\n        let current = globalThis;\n        for (const part of parts) {\n          current = current[part];\n          if (!current) {\n            throw new Error(`Path ${shortcut.path} not found`);\n          }\n        }\n        \n        // Call the function if it's callable\n        if (typeof current === 'function') {\n          return await current(...args);\n        }\n        return current;\n      };\n    } catch (e) {\n      console.error(`Failed to restore shortcut '${shortcut.name}':`, e.message);\n    }\n  });\n}\n\n  // Create a shortcut\n  function createShortcut(name, path) {\n  // Validate name doesn't conflict with system\n  const reserved = ['hlvm', 'Deno', 'console', 'global', 'globalThis', 'window', \n                    'document', 'alert', 'confirm', 'prompt', 'eval', 'Function',\n                    'Object', 'Array', 'String', 'Number', 'Boolean', 'Symbol',\n                    'Math', 'Date', 'RegExp', 'Error', 'JSON', 'Promise'];\n  \n  if (reserved.includes(name)) {\n    throw new Error(`Cannot use reserved name '${name}' for shortcut`);\n  }\n  \n  // Save to database\n  const now = Date.now();\n  db.db.prepare(`\n    INSERT OR REPLACE INTO shortcuts (name, path, created_at, updated_at)\n    VALUES (?, ?, ?, ?)\n  `).run(name, path, now, now);\n  \n  // Create the global function\n  globalThis[name] = async (...args) => {\n    const parts = path.split('.');\n    let current = globalThis;\n    for (const part of parts) {\n      current = current[part];\n      if (!current) {\n        throw new Error(`Path ${path} not found`);\n      }\n    }\n    \n    if (typeof current === 'function') {\n      return await current(...args);\n    }\n    return current;\n  };\n  \n  console.log(`✅ Created shortcut: ${name}() → ${path}`);\n  return true;\n}\n\n  // Remove a shortcut\n  function removeShortcut(name) {\n  // Remove from database\n  db.db.prepare('DELETE FROM shortcuts WHERE name = ?').run(name);\n  \n  // Remove from global scope\n  delete globalThis[name];\n  \n  console.log(`✅ Removed shortcut: ${name}`);\n  return true;\n}\n\n  // List all shortcuts\n  function listShortcuts() {\n  const shortcuts = db.db.prepare('SELECT * FROM shortcuts ORDER BY name').all();\n  return shortcuts.map(s => ({\n    name: s.name,\n    path: s.path,\n    createdAt: new Date(s.created_at),\n    updatedAt: new Date(s.updated_at)\n  }));\n}\n\n  // Setup custom property persistence\n  function setupCustomPropertyPersistence() {\n  // Create custom_properties table if not exists\n  db.db.exec(`\n    CREATE TABLE IF NOT EXISTS custom_properties (\n      key TEXT PRIMARY KEY,\n      value TEXT NOT NULL,\n      type TEXT NOT NULL,\n      updated_at INTEGER NOT NULL\n    )\n  `);\n  \n  // Load existing custom properties\n  const props = db.db.prepare('SELECT * FROM custom_properties').all();\n  props.forEach(prop => {\n    try {\n      if (prop.type === 'function') {\n        // Recreate function from string\n        hlvmBase[prop.key] = eval(`(${prop.value})`);\n      } else {\n        hlvmBase[prop.key] = JSON.parse(prop.value);\n      }\n    } catch (e) {\n      console.error(`Failed to restore custom property '${prop.key}':`, e.message);\n    }\n  });\n}\n\n  // Save custom property to database\n  function saveCustomProperty(key, value) {\n  let serialized;\n  let type = typeof value;\n  \n  if (value === null || value === undefined) {\n    // Handle null/undefined - remove from database\n    db.db.prepare('DELETE FROM custom_properties WHERE key = ?').run(key);\n    return;\n  }\n  \n  if (type === 'function') {\n    serialized = value.toString();\n  } else {\n    serialized = JSON.stringify(value);\n  }\n  \n  db.db.prepare(`\n    INSERT OR REPLACE INTO custom_properties (key, value, type, updated_at)\n    VALUES (?, ?, ?, ?)\n  `).run(key, serialized, type, Date.now());\n}\n\n  // Setup persistence\n  setupShortcuts();\n  setupCustomPropertyPersistence();\n\n  // Add custom property setter directly to the object\n  // This preserves TAB completion while allowing custom properties\n  Object.defineProperty(hlvmBase, '__set', {\n    value: function(prop, value) {\n      const systemProps = ['core', 'app', 'stdlib', 'context', 'help', 'status', '__set', '__delete'];\n      \n      if (systemProps.includes(prop)) {\n        console.error(`Cannot override system property: hlvm.${prop}`);\n        return false;\n      }\n      \n      // Save to database for persistence\n      saveCustomProperty(prop, value);\n      \n      // Set the value\n      if (value === null || value === undefined) {\n        delete this[prop];\n      } else {\n        this[prop] = value;\n      }\n      return true;\n    },\n    enumerable: false,\n    configurable: false\n  });\n  \n  Object.defineProperty(hlvmBase, '__delete', {\n    value: function(prop) {\n      // Remove from database\n      db.db.prepare('DELETE FROM custom_properties WHERE key = ?').run(prop);\n      delete this[prop];\n      return true;\n    },\n    enumerable: false,\n    configurable: false\n  });\n\n  // Return the plain object for TAB completion to work\n  return hlvmBase;\n})();  // End IIFE - hlvmBase is now hidden from global scope\n\n// Global utilities\nglobalThis.pprint = (obj) => console.log(JSON.stringify(obj, null, 2));\n\n\n// Global shorthand for context\nObject.defineProperty(globalThis, 'context', {\n  get() { return hlvm.context; },\n  enumerable: true,\n  configurable: false\n});";
export const embeddedBridge = "// HLVM Bridge - WebSocket server for GUI control commands\n// NOTE: JavaScript eval uses stdin/stdout, NOT this WebSocket bridge\n// This bridge is only for hlvm.app GUI control commands\n\ninterface JSONRPCRequest {\n  jsonrpc: \"2.0\";\n  id?: string | number;\n  method: string;\n  params?: any;\n}\n\ninterface JSONRPCResponse {\n  jsonrpc: \"2.0\";\n  id: string | number;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ninterface JSONRPCNotification {\n  jsonrpc: \"2.0\";\n  method: string;\n  params?: any;\n}\n\n// Handler types for better type safety\ntype HandlerFunction = (params: any) => Promise<any>;\ntype HandlerRegistry = Map<string, HandlerFunction>;\n\n// Separate handler classes following Single Responsibility Principle\nclass SystemHandlers {\n  static getInfo(): Promise<any> {\n    return Promise.resolve({\n      platform: Deno.build.os,\n      arch: Deno.build.arch,\n      version: \"2.0\",\n      pid: Deno.pid\n    });\n  }\n}\n\nclass ModuleHandlers {\n  static async list(): Promise<any> {\n    return globalThis.hlvm?.modules?.list?.() || [];\n  }\n\n  static async save(params: any): Promise<any> {\n    if (!globalThis.hlvm?.modules?.save) {\n      throw new Error(\"Module save not available\");\n    }\n    return globalThis.hlvm.modules.save(params.name, params.code);\n  }\n\n  static async load(params: any): Promise<any> {\n    if (!globalThis.hlvm?.modules?.load) {\n      throw new Error(\"Module load not available\");\n    }\n    return globalThis.hlvm.modules.load(params.name);\n  }\n}\n\nclass AIHandlers {\n  static async generate(params: any): Promise<any> {\n    if (!globalThis.hlvm?.ai?.ollama?.chat) {\n      throw new Error(\"AI not available\");\n    }\n    return globalThis.hlvm.ai.ollama.chat(params.prompt, params.model);\n  }\n}\n\nclass FileSystemHandlers {\n  static async read(params: any): Promise<string> {\n    return Deno.readTextFile(params.path);\n  }\n\n  static async write(params: any): Promise<{ success: boolean }> {\n    await Deno.writeTextFile(params.path, params.content);\n    return { success: true };\n  }\n\n  static async exists(params: any): Promise<boolean> {\n    try {\n      await Deno.stat(params.path);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\n// Connection manager for WebSocket connections\nclass ConnectionManager {\n  private connections = new Set<WebSocket>();\n\n  add(socket: WebSocket): void {\n    this.connections.add(socket);\n  }\n\n  remove(socket: WebSocket): void {\n    this.connections.delete(socket);\n  }\n\n  get size(): number {\n    return this.connections.size;\n  }\n\n  get all(): Set<WebSocket> {\n    return this.connections;\n  }\n\n  get first(): WebSocket | undefined {\n    return this.connections.values().next().value;\n  }\n\n  clear(): void {\n    for (const socket of this.connections) {\n      socket.close();\n    }\n    this.connections.clear();\n  }\n}\n\nclass HLVMBridge {\n  private connectionManager = new ConnectionManager();\n  private server?: Deno.HttpServer;\n  private handlers: HandlerRegistry = new Map();\n\n  constructor() {\n    this.registerHandlers();\n  }\n\n  private registerHandlers(): void {\n    // System handlers\n    this.handlers.set(\"system.info\", SystemHandlers.getInfo);\n\n    // Module handlers\n    this.handlers.set(\"modules.list\", ModuleHandlers.list);\n    this.handlers.set(\"modules.save\", ModuleHandlers.save);\n    this.handlers.set(\"modules.load\", ModuleHandlers.load);\n\n    // AI handlers\n    this.handlers.set(\"ai.generate\", AIHandlers.generate);\n\n    // File system handlers\n    this.handlers.set(\"fs.read\", FileSystemHandlers.read);\n    this.handlers.set(\"fs.write\", FileSystemHandlers.write);\n    this.handlers.set(\"fs.exists\", FileSystemHandlers.exists);\n  }\n\n  async start(port = 11436): Promise<void> {\n    this.server = Deno.serve({ \n      port, \n      onListen: () => console.log(`HLVM Bridge running on ws://localhost:${port}`)\n    }, (req) => this.handleRequest(req));\n  }\n\n  private handleRequest(req: Request): Response {\n    if (req.headers.get(\"upgrade\") === \"websocket\") {\n      return this.handleWebSocketUpgrade(req);\n    }\n    \n    if (req.url.endsWith(\"/health\")) {\n      return this.handleHealthCheck();\n    }\n    \n    return new Response(\"HLVM Bridge WebSocket Server\", { status: 200 });\n  }\n\n  private handleWebSocketUpgrade(req: Request): Response {\n    const { socket, response } = Deno.upgradeWebSocket(req);\n    \n    socket.onopen = () => this.handleSocketOpen(socket);\n    socket.onmessage = (event) => this.handleSocketMessage(socket, event);\n    socket.onclose = () => this.handleSocketClose(socket);\n    socket.onerror = (error) => console.error(\"WebSocket error:\", error);\n    \n    return response;\n  }\n\n  private handleSocketOpen(socket: WebSocket): void {\n    console.log(\"macOS app connected\");\n    this.connectionManager.add(socket);\n    this.sendConnectionNotification(socket);\n  }\n\n  private sendConnectionNotification(socket: WebSocket): void {\n    const notification: JSONRPCNotification = {\n      jsonrpc: \"2.0\",\n      method: \"connection.established\",\n      params: {\n        version: \"2.0\",\n        capabilities: Array.from(this.handlers.keys())\n      }\n    };\n    socket.send(JSON.stringify(notification));\n  }\n\n  private async handleSocketMessage(socket: WebSocket, event: MessageEvent): Promise<void> {\n    try {\n      const request = JSON.parse(event.data) as JSONRPCRequest;\n      \n      if (request.jsonrpc !== \"2.0\") {\n        throw new Error(\"Invalid JSON-RPC version\");\n      }\n\n      if (request.id !== undefined) {\n        await this.handleRequestWithResponse(socket, request);\n      } else {\n        await this.handleNotification(request);\n      }\n    } catch (error) {\n      console.error(\"Message handling error:\", error);\n    }\n  }\n\n  private async handleRequestWithResponse(socket: WebSocket, request: JSONRPCRequest): Promise<void> {\n    const response: JSONRPCResponse = {\n      jsonrpc: \"2.0\",\n      id: request.id!\n    };\n\n    try {\n      const handler = this.handlers.get(request.method);\n      if (!handler) {\n        response.error = {\n          code: -32601,\n          message: `Method not found: ${request.method}`\n        };\n      } else {\n        response.result = await handler(request.params);\n      }\n    } catch (error) {\n      response.error = {\n        code: -32603,\n        message: error.message\n      };\n    }\n\n    socket.send(JSON.stringify(response));\n  }\n\n  private async handleNotification(request: JSONRPCRequest): Promise<void> {\n    const handler = this.handlers.get(request.method);\n    if (handler) {\n      handler(request.params).catch(console.error);\n    }\n  }\n\n  private handleSocketClose(socket: WebSocket): void {\n    console.log(\"macOS app disconnected\");\n    this.connectionManager.remove(socket);\n  }\n\n  private handleHealthCheck(): Response {\n    return new Response(JSON.stringify({ \n      status: \"ok\", \n      connections: this.connectionManager.size \n    }), {\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n  }\n\n  broadcast(method: string, params?: any): void {\n    const notification: JSONRPCNotification = {\n      jsonrpc: \"2.0\",\n      method,\n      params\n    };\n    \n    const message = JSON.stringify(notification);\n    for (const socket of this.connectionManager.all) {\n      if (socket.readyState === WebSocket.OPEN) {\n        socket.send(message);\n      }\n    }\n  }\n\n  async request(method: string, params?: any): Promise<any> {\n    const socket = this.connectionManager.first;\n    if (!socket) {\n      throw new Error(\"No macOS app connected\");\n    }\n\n    return this.sendRequestAndWaitForResponse(socket, method, params);\n  }\n\n  private sendRequestAndWaitForResponse(socket: WebSocket, method: string, params?: any): Promise<any> {\n    const id = this.generateRequestId();\n    const timeoutMs = 5000;\n    \n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => reject(new Error(\"Request timeout\")), timeoutMs);\n      \n      const handler = this.createResponseHandler(id, timeout, resolve, reject);\n      socket.addEventListener(\"message\", handler);\n      \n      const request: JSONRPCRequest = { jsonrpc: \"2.0\", id, method, params };\n      socket.send(JSON.stringify(request));\n    });\n  }\n\n  private generateRequestId(): string {\n    return `req-${Date.now()}-${Math.random()}`;\n  }\n\n  private createResponseHandler(\n    expectedId: string | number,\n    timeout: NodeJS.Timeout,\n    resolve: (value: any) => void,\n    reject: (reason: any) => void\n  ): (event: MessageEvent) => void {\n    return function handler(event: MessageEvent) {\n      try {\n        const response = JSON.parse(event.data) as JSONRPCResponse;\n        if (response.id === expectedId) {\n          clearTimeout(timeout);\n          (event.target as WebSocket).removeEventListener(\"message\", handler);\n          \n          if (response.error) {\n            reject(new Error(response.error.message));\n          } else {\n            resolve(response.result);\n          }\n        }\n      } catch {}\n    };\n  }\n\n  stop(): void {\n    this.connectionManager.clear();\n    this.server?.shutdown();\n  }\n}\n\n// Export for use in HLVM\nexport { HLVMBridge };\nexport const bridge = new HLVMBridge();\n\n// Start bridge if running as standalone\nif (import.meta.main) {\n  await bridge.start(11436);\n}";
