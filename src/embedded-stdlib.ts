// Auto-generated file with embedded stdlib modules
// This file is generated by embed-stdlib.ts and should not be edited manually

export const embeddedStdlib = {
  "core/platform.js": "// Platform module - Cross-platform OS information\n\nexport const os = Deno.build.os;\nexport const arch = Deno.build.arch;\nexport const version = Deno.osRelease();\nexport const isDarwin = os === \"darwin\";\nexport const isWindows = os === \"windows\";\nexport const isLinux = os === \"linux\";\n\n// Directory paths - concise names\nexport function tempDir() {\n  const envTemp = Deno.env.get(\"TMPDIR\") || \n                  Deno.env.get(\"TEMP\") || \n                  Deno.env.get(\"TMP\");\n  if (envTemp) return envTemp;\n  \n  if (isWindows) {\n    const userProfile = Deno.env.get(\"USERPROFILE\");\n    if (userProfile) {\n      return `${userProfile}\\\\AppData\\\\Local\\\\Temp`;\n    }\n    return \"C:\\\\Windows\\\\Temp\";\n  }\n  \n  return \"/tmp\";\n}\n\nexport function homeDir() {\n  if (isWindows) {\n    return Deno.env.get(\"USERPROFILE\") || Deno.env.get(\"HOMEDRIVE\") + Deno.env.get(\"HOMEPATH\");\n  }\n  return Deno.env.get(\"HOME\") || \"/\";\n}\n\n// Path and executable info\nexport const pathSep = isWindows ? \"\\\\\" : \"/\";\nexport const exeExt = isWindows ? \".exe\" : \"\";\n\n// Shell access\nexport function shell() {\n  if (isWindows) {\n    return [\"cmd\", \"/c\"];\n  }\n  return [\"sh\", \"-c\"];\n}",
  "core/system.js": "// System module - Cross-platform system utilities\n\nimport * as platform from \"./platform.js\";\n\nexport async function hostname() {\n  try {\n    // Deno.hostname() works on all platforms since Deno 1.10\n    return Deno.hostname();\n  } catch {\n    // Fallback for older Deno or permission issues\n    const p = new Deno.Command(\"hostname\");\n    const { stdout } = await p.output();\n    return new TextDecoder().decode(stdout).trim();\n  }\n}\n\n// Remove unused exports - use platform.tempDir() and platform.homeDir() directly\n\nexport async function exec(cmd) {\n  const shell = platform.shell();\n  const p = new Deno.Command(shell[0], { \n    args: [...shell.slice(1), cmd] \n  });\n  const { stdout, stderr, code } = await p.output();\n  return {\n    stdout: new TextDecoder().decode(stdout),\n    stderr: new TextDecoder().decode(stderr),\n    code\n  };\n}\n\n// Cross-platform process utilities\nexport function exit(code = 0) {\n  Deno.exit(code);\n}\n\nexport function pid() {\n  return Deno.pid;\n}\n\nexport function cwd() {\n  return Deno.cwd();\n}\n\nexport function chdir(dir) {\n  Deno.chdir(dir);\n}\n\nexport function env(key, value) {\n  if (value !== undefined) {\n    Deno.env.set(key, value);\n  }\n  return Deno.env.get(key);\n}",
  "core/database.js": "// Database module - Cross-platform SQLite persistence\n\nimport { Database } from \"https://deno.land/x/sqlite3@0.12.0/mod.ts\";\nimport * as platform from \"./platform.js\";\n\n// Get cross-platform database path\nfunction dbPath() {\n  if (platform.isDarwin) {\n    // macOS: ~/Library/Application Support/HLVM/\n    return `${platform.homeDir()}/Library/Application Support/HLVM/HLVM.sqlite`;\n  } else if (platform.isWindows) {\n    // Windows: %APPDATA%\\HLVM\\\n    const appData = Deno.env.get(\"APPDATA\") || \n                    `${platform.homeDir()}\\\\AppData\\\\Roaming`;\n    return `${appData}\\\\HLVM\\\\HLVM.sqlite`;\n  } else {\n    // Linux/Unix: ~/.local/share/HLVM/\n    const xdgData = Deno.env.get(\"XDG_DATA_HOME\") || \n                    `${platform.homeDir()}/.local/share`;\n    return `${xdgData}/HLVM/HLVM.sqlite`;\n  }\n}\n\nexport const path = dbPath();\n\n// Extract directory with cross-platform support\nconst dbDir = path.substring(0, \n  path.lastIndexOf(platform.isWindows ? \"\\\\\" : \"/\")\n);\n\n// Ensure directory exists\nawait Deno.mkdir(dbDir, { recursive: true });\n\n// Open database\nexport const db = new Database(path);\n\n// Create table with WAL mode for better concurrency\ndb.exec(\"PRAGMA journal_mode=WAL\");\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS modules (\n    key TEXT PRIMARY KEY,\n    namespace TEXT NOT NULL,\n    source_code TEXT NOT NULL,\n    metadata TEXT DEFAULT '{}',\n    type TEXT DEFAULT 'javascript',\n    updated_at INTEGER NOT NULL,\n    spotlight BOOLEAN DEFAULT 1\n  )\n`);\n\nexport async function save(name, code) {\n  try {\n    const isFunction = typeof code === 'function';\n    const sourceCode = isFunction ? code.toString() : code;\n    const namespace = `hlvm.${name}`;\n    const metadata = JSON.stringify({\n      isFunction,\n      createdAt: new Date().toISOString(),\n      platform: platform.os\n    });\n    \n    db.exec(`\n      INSERT OR REPLACE INTO modules \n      (key, namespace, source_code, metadata, type, updated_at, spotlight)\n      VALUES (?, ?, ?, ?, ?, ?, ?)\n    `, [name, namespace, sourceCode, metadata, 'javascript', Date.now(), 1]);\n    \n    return true;\n  } catch (e) {\n    throw new Error(`Save failed: ${e.message}`);\n  }\n}\n\nexport async function load(name) {\n  try {\n    const module = db.prepare(\"SELECT * FROM modules WHERE key = ?\").get(name);\n    if (!module) throw new Error(`Module '${name}' not found`);\n    \n    const metadata = JSON.parse(module.metadata || '{}');\n    \n    if (metadata.isFunction) {\n      return eval(`(${module.source_code})`);\n    }\n    \n    // Use cross-platform temp directory\n    const tempDir = platform.tempDir();\n    const tempFile = `${tempDir}${platform.pathSep}hlvm-module-${name}-${Date.now()}.js`;\n    await Deno.writeTextFile(tempFile, module.source_code);\n    \n    // Import with file:// protocol (works cross-platform)\n    const imported = await import(`file://${tempFile}`);\n    \n    // Clean up after import\n    setTimeout(() => Deno.remove(tempFile).catch(() => {}), 1000);\n    \n    return imported;\n  } catch (e) {\n    throw new Error(`Load failed: ${e.message}`);\n  }\n}\n\nexport function list() {\n  try {\n    const stmt = db.prepare(`\n      SELECT key, namespace, type, updated_at, spotlight \n      FROM modules \n      WHERE spotlight = 1 \n      ORDER BY updated_at DESC\n    `);\n    const modules = stmt.all();\n    return modules.map(m => ({\n      key: m.key,\n      namespace: m.namespace,\n      type: m.type,\n      updatedAt: new Date(m.updated_at)\n    }));\n  } catch (e) {\n    return [];\n  }\n}\n\nexport function remove(name) {\n  try {\n    db.exec(\"DELETE FROM modules WHERE key = ?\", [name]);\n    return true;\n  } catch (e) {\n    throw new Error(`Remove failed: ${e.message}`);\n  }\n}",
  "fs/filesystem.js": "// Filesystem module - Cross-platform file operations\n\nimport * as platform from \"../core/platform.js\";\n\n// File operations - concise names with clear context from parameters\nexport const read = (path) => Deno.readTextFile(path);\nexport const write = (path, content) => Deno.writeTextFile(path, content);\n\n// Binary operations when needed\nexport const readBytes = (path) => Deno.readFile(path);\nexport const writeBytes = (path, data) => Deno.writeFile(path, data);\n\n// Path operations with cross-platform support\nexport async function exists(path) {\n  try {\n    await Deno.stat(path);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport function remove(path, options = { recursive: true }) {\n  return Deno.remove(path, options);\n}\n\nexport function mkdir(path, options = { recursive: true }) {\n  return Deno.mkdir(path, options);\n}\n\nexport function readdir(path) {\n  return Deno.readDir(path);\n}\n\nexport async function stat(path) {\n  return Deno.stat(path);\n}\n\n// Cross-platform path utilities\nexport function join(...paths) {\n  return paths.join(platform.pathSep);\n}\n\nexport function dirname(path) {\n  const sep = platform.pathSep;\n  const lastIndex = path.lastIndexOf(sep);\n  return lastIndex === -1 ? \".\" : path.substring(0, lastIndex);\n}\n\nexport function basename(path, ext = \"\") {\n  const sep = platform.pathSep;\n  const lastIndex = path.lastIndexOf(sep);\n  const base = lastIndex === -1 ? path : path.substring(lastIndex + 1);\n  return ext && base.endsWith(ext) \n    ? base.substring(0, base.length - ext.length)\n    : base;\n}\n\nexport function extname(path) {\n  const lastDot = path.lastIndexOf(\".\");\n  return lastDot === -1 ? \"\" : path.substring(lastDot);\n}\n\n// Copy file or directory\nexport async function copy(src, dest) {\n  const srcStat = await stat(src);\n  \n  if (srcStat.isFile) {\n    const data = await readBytes(src);\n    await writeBytes(dest, data);\n  } else if (srcStat.isDirectory) {\n    await mkdir(dest);\n    for await (const entry of readdir(src)) {\n      await copy(\n        join(src, entry.name),\n        join(dest, entry.name)\n      );\n    }\n  }\n}\n\n// Move file or directory (cross-platform)\nexport async function move(src, dest) {\n  try {\n    await Deno.rename(src, dest);\n  } catch {\n    // If rename fails (e.g., across drives on Windows), copy and delete\n    await copy(src, dest);\n    await remove(src);\n  }\n}",
  "io/clipboard.js": "// Clipboard module - Cross-platform clipboard operations\n\nimport * as platform from \"../core/platform.js\";\n\nexport async function read() {\n  if (platform.isDarwin) {\n    // macOS: pbpaste (built-in)\n    const p = new Deno.Command(\"pbpaste\");\n    const { stdout } = await p.output();\n    return new TextDecoder().decode(stdout);\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell Get-Clipboard (built-in)\n    const p = new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", \"Get-Clipboard\"]\n    });\n    const { stdout } = await p.output();\n    return new TextDecoder().decode(stdout).replace(/\\r\\n$/, '');\n    \n  } else {\n    // Linux: Try multiple clipboard tools in order of preference\n    const tools = [\n      { cmd: \"xclip\", args: [\"-selection\", \"clipboard\", \"-o\"] },\n      { cmd: \"xsel\", args: [\"--clipboard\", \"--output\"] },\n      { cmd: \"wl-paste\", args: [] } // Wayland\n    ];\n    \n    for (const tool of tools) {\n      try {\n        const p = new Deno.Command(tool.cmd, { args: tool.args });\n        const { stdout, success } = await p.output();\n        if (success) {\n          return new TextDecoder().decode(stdout);\n        }\n      } catch {\n        // Try next tool\n      }\n    }\n    \n    throw new Error(\n      \"Clipboard read failed. Install one of: xclip, xsel, or wl-clipboard\"\n    );\n  }\n}\n\nexport async function write(text) {\n  if (platform.isDarwin) {\n    // macOS: pbcopy (built-in)\n    const p = new Deno.Command(\"pbcopy\", { stdin: \"piped\" });\n    const proc = p.spawn();\n    const writer = proc.stdin.getWriter();\n    await writer.write(new TextEncoder().encode(text));\n    await writer.close();\n    await proc.status;\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell Set-Clipboard (built-in)\n    // Escape quotes for PowerShell\n    const escaped = text.replace(/\"/g, '`\"').replace(/\\$/g, '`$');\n    const p = new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", `Set-Clipboard -Value \"${escaped}\"`]\n    });\n    await p.output();\n    \n  } else {\n    // Linux: Try multiple clipboard tools\n    const tools = [\n      { cmd: \"xclip\", args: [\"-selection\", \"clipboard\"] },\n      { cmd: \"xsel\", args: [\"--clipboard\", \"--input\"] },\n      { cmd: \"wl-copy\", args: [] } // Wayland\n    ];\n    \n    for (const tool of tools) {\n      try {\n        const p = new Deno.Command(tool.cmd, { \n          args: tool.args,\n          stdin: \"piped\"\n        });\n        const proc = p.spawn();\n        const writer = proc.stdin.getWriter();\n        await writer.write(new TextEncoder().encode(text));\n        await writer.close();\n        const { success } = await proc.status;\n        if (success) return;\n      } catch {\n        // Try next tool\n      }\n    }\n    \n    throw new Error(\n      \"Clipboard write failed. Install one of: xclip, xsel, or wl-clipboard\"\n    );\n  }\n}\n\n// Check if clipboard is available\nexport async function isAvailable() {\n  try {\n    if (platform.isDarwin || platform.isWindows) {\n      return true; // Built-in support\n    }\n    \n    // Linux: Check for tools\n    const tools = [\"xclip\", \"xsel\", \"wl-paste\"];\n    for (const tool of tools) {\n      try {\n        const p = new Deno.Command(\"which\", { args: [tool] });\n        const { success } = await p.output();\n        if (success) return true;\n      } catch {}\n    }\n    return false;\n  } catch {\n    return false;\n  }\n}",
  "computer/notification.js": "// Notification module - Cross-platform UI dialogs and notifications\n\nimport * as platform from \"../core/platform.js\";\n\n// Escape string for shell command (cross-platform)\nfunction escapeShell(str) {\n  if (platform.isWindows) {\n    // PowerShell escaping\n    return str.replace(/\"/g, '`\"').replace(/\\$/g, '`$');\n  } else {\n    // Unix shell escaping\n    return str.replace(/'/g, \"'\\\\''\");\n  }\n}\n\nexport async function alert(message, title = \"Alert\") {\n  const escapedMessage = escapeShell(message);\n  const escapedTitle = escapeShell(title);\n  \n  if (platform.isDarwin) {\n    // macOS: osascript (built-in)\n    const script = `display alert \"${escapedTitle}\" message \"${escapedMessage}\"`;\n    await new Deno.Command(\"osascript\", { args: [\"-e\", script] }).output();\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell MessageBox (built-in)\n    const script = `\n      Add-Type -AssemblyName System.Windows.Forms\n      [System.Windows.Forms.MessageBox]::Show(\"${escapedMessage}\", \"${escapedTitle}\")\n    `;\n    await new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", script]\n    }).output();\n    \n  } else {\n    // Linux: Try multiple tools\n    try {\n      // Try zenity first (most common)\n      await new Deno.Command(\"zenity\", {\n        args: [\"--info\", \"--text\", message, \"--title\", title]\n      }).output();\n    } catch {\n      try {\n        // Fallback to kdialog (KDE)\n        await new Deno.Command(\"kdialog\", {\n          args: [\"--msgbox\", message, \"--title\", title]\n        }).output();\n      } catch {\n        // Last resort: notify-send (notification, not dialog)\n        await notify(message, title);\n      }\n    }\n  }\n}\n\nexport async function notify(message, title = \"Notification\", subtitle = \"\") {\n  const escapedMessage = escapeShell(message);\n  const escapedTitle = escapeShell(title);\n  \n  if (platform.isDarwin) {\n    // macOS: osascript notification (built-in)\n    let script = `display notification \"${escapedMessage}\" with title \"${escapedTitle}\"`;\n    if (subtitle) {\n      script += ` subtitle \"${escapeShell(subtitle)}\"`;\n    }\n    await new Deno.Command(\"osascript\", { args: [\"-e\", script] }).output();\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell BurntToast or fallback to balloon tip\n    try {\n      // Try Windows 10+ toast notification\n      const script = `\n        [Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime] | Out-Null\n        [Windows.Data.Xml.Dom.XmlDocument, Windows.Data.Xml.Dom.XmlDocument, ContentType = WindowsRuntime] | Out-Null\n        \n        $template = @\"\n        <toast>\n          <visual>\n            <binding template=\"ToastGeneric\">\n              <text>${escapedTitle}</text>\n              <text>${escapedMessage}</text>\n            </binding>\n          </visual>\n        </toast>\n\"@\n        $xml = New-Object Windows.Data.Xml.Dom.XmlDocument\n        $xml.LoadXml($template)\n        $toast = New-Object Windows.UI.Notifications.ToastNotification $xml\n        [Windows.UI.Notifications.ToastNotificationManager]::CreateToastNotifier(\"HLVM\").Show($toast)\n      `;\n      await new Deno.Command(\"powershell\", {\n        args: [\"-NoProfile\", \"-Command\", script]\n      }).output();\n    } catch {\n      // Fallback to simple alert\n      await alert(message, title);\n    }\n    \n  } else {\n    // Linux: notify-send (most universal)\n    try {\n      await new Deno.Command(\"notify-send\", {\n        args: [title, message]\n      }).output();\n    } catch {\n      console.error(\"Notification failed. Install libnotify-bin (notify-send)\");\n    }\n  }\n}\n\nexport async function confirm(message, title = \"Confirm\") {\n  const escapedMessage = escapeShell(message);\n  const escapedTitle = escapeShell(title);\n  \n  if (platform.isDarwin) {\n    // macOS: osascript dialog (built-in)\n    const script = `\n      button returned of (display dialog \"${escapedMessage}\" ¬\n        with title \"${escapedTitle}\" ¬\n        buttons {\"Cancel\", \"OK\"} ¬\n        default button \"OK\")\n    `;\n    try {\n      const { stdout } = await new Deno.Command(\"osascript\", { \n        args: [\"-e\", script] \n      }).output();\n      return new TextDecoder().decode(stdout).trim() === \"OK\";\n    } catch {\n      return false; // User cancelled\n    }\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell YesNo MessageBox (built-in)\n    const script = `\n      Add-Type -AssemblyName System.Windows.Forms\n      $result = [System.Windows.Forms.MessageBox]::Show(\n        \"${escapedMessage}\", \n        \"${escapedTitle}\", \n        [System.Windows.Forms.MessageBoxButtons]::YesNo\n      )\n      if ($result -eq [System.Windows.Forms.DialogResult]::Yes) {\n        Write-Host \"true\"\n      } else {\n        Write-Host \"false\"\n      }\n    `;\n    const { stdout } = await new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", script]\n    }).output();\n    return new TextDecoder().decode(stdout).trim() === \"true\";\n    \n  } else {\n    // Linux: Try zenity or kdialog\n    try {\n      const { code } = await new Deno.Command(\"zenity\", {\n        args: [\"--question\", \"--text\", message, \"--title\", title]\n      }).output();\n      return code === 0;\n    } catch {\n      try {\n        const { code } = await new Deno.Command(\"kdialog\", {\n          args: [\"--yesno\", message, \"--title\", title]\n        }).output();\n        return code === 0;\n      } catch {\n        console.error(\"Confirm dialog failed. Install zenity or kdialog\");\n        return false;\n      }\n    }\n  }\n}\n\nexport async function prompt(message, defaultValue = \"\", title = \"Input\") {\n  const escapedMessage = escapeShell(message);\n  const escapedTitle = escapeShell(title);\n  const escapedDefault = escapeShell(defaultValue);\n  \n  if (platform.isDarwin) {\n    // macOS: osascript input dialog (built-in)\n    const script = `\n      text returned of (display dialog \"${escapedMessage}\" ¬\n        with title \"${escapedTitle}\" ¬\n        default answer \"${escapedDefault}\" ¬\n        buttons {\"Cancel\", \"OK\"} ¬\n        default button \"OK\")\n    `;\n    try {\n      const { stdout } = await new Deno.Command(\"osascript\", { \n        args: [\"-e\", script] \n      }).output();\n      return new TextDecoder().decode(stdout).trim();\n    } catch {\n      return null; // User cancelled\n    }\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell InputBox (built-in)\n    const script = `\n      Add-Type -AssemblyName Microsoft.VisualBasic\n      $result = [Microsoft.VisualBasic.Interaction]::InputBox(\n        \"${escapedMessage}\", \n        \"${escapedTitle}\", \n        \"${escapedDefault}\"\n      )\n      if ($result -eq \"\") {\n        # Could be cancelled or empty input\n        if ($LastExitCode -eq 0) {\n          Write-Host \"\"\n        }\n      } else {\n        Write-Host $result\n      }\n    `;\n    const { stdout } = await new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", script]\n    }).output();\n    const result = new TextDecoder().decode(stdout).trim();\n    return result;\n    \n  } else {\n    // Linux: Try zenity or kdialog\n    try {\n      const args = [\"zenity\", \"--entry\", \"--text\", message, \"--title\", title];\n      if (defaultValue) args.push(\"--entry-text\", defaultValue);\n      const { stdout, code } = await new Deno.Command(args[0], {\n        args: args.slice(1)\n      }).output();\n      return code === 0 ? new TextDecoder().decode(stdout).trim() : null;\n    } catch {\n      try {\n        const { stdout, code } = await new Deno.Command(\"kdialog\", {\n          args: [\"--inputbox\", message, defaultValue, \"--title\", title]\n        }).output();\n        return code === 0 ? new TextDecoder().decode(stdout).trim() : null;\n      } catch {\n        console.error(\"Prompt dialog failed. Install zenity or kdialog\");\n        return null;\n      }\n    }\n  }\n}",
  "computer/screen.js": "// Screen module - Cross-platform screen capture\n\nimport * as platform from \"../core/platform.js\";\n\nexport async function capture(output = null, options = {}) {\n  // Use platform-specific temp file if no output specified\n  if (!output) {\n    const tempDir = platform.tempDir();\n    const timestamp = Date.now();\n    output = `${tempDir}${platform.pathSep}screenshot-${timestamp}.png`;\n  }\n  \n  if (platform.isDarwin) {\n    // macOS: screencapture (built-in)\n    const args = [\"-x\"]; // No sound\n    \n    if (options.interactive) {\n      args.push(\"-i\"); // Interactive mode (user selects window)\n    }\n    if (options.selection || options.select) {\n      args.push(\"-s\"); // Selection mode (user draws rectangle)\n    }\n    if (options.window) {\n      args.push(\"-w\"); // Window selection mode\n    }\n    if (options.delay) {\n      args.push(\"-T\", String(options.delay)); // Delay in seconds\n    }\n    \n    args.push(output);\n    \n    const { success } = await new Deno.Command(\"screencapture\", { args }).output();\n    if (!success) throw new Error(\"Screenshot failed\");\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell screenshot (built-in)\n    const script = `\n      Add-Type -AssemblyName System.Windows.Forms\n      Add-Type -AssemblyName System.Drawing\n      \n      $screen = [System.Windows.Forms.Screen]::PrimaryScreen\n      $bounds = $screen.Bounds\n      $bitmap = New-Object System.Drawing.Bitmap($bounds.Width, $bounds.Height)\n      $graphics = [System.Drawing.Graphics]::FromImage($bitmap)\n      $graphics.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)\n      $bitmap.Save(\"${output.replace(/\\\\/g, '\\\\\\\\')}\")\n      $graphics.Dispose()\n      $bitmap.Dispose()\n    `;\n    \n    const { success } = await new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", script]\n    }).output();\n    if (!success) throw new Error(\"Screenshot failed\");\n    \n  } else {\n    // Linux: Try multiple screenshot tools\n    const tools = [\n      {\n        cmd: \"scrot\",\n        args: options.selection ? [\"-s\", output] : [output]\n      },\n      {\n        cmd: \"gnome-screenshot\",\n        args: options.selection \n          ? [\"-a\", \"-f\", output]\n          : [\"-f\", output]\n      },\n      {\n        cmd: \"spectacle\",\n        args: options.selection\n          ? [\"-r\", \"-b\", \"-n\", \"-o\", output]\n          : [\"-b\", \"-n\", \"-o\", output]\n      },\n      {\n        cmd: \"import\", // ImageMagick\n        args: [output]\n      }\n    ];\n    \n    let captured = false;\n    for (const tool of tools) {\n      try {\n        const { success } = await new Deno.Command(tool.cmd, {\n          args: tool.args\n        }).output();\n        if (success) {\n          captured = true;\n          break;\n        }\n      } catch {\n        // Try next tool\n      }\n    }\n    \n    if (!captured) {\n      throw new Error(\n        \"Screenshot failed. Install one of: scrot, gnome-screenshot, spectacle, or imagemagick\"\n      );\n    }\n  }\n  \n  return output;\n}\n\n// Get screen dimensions (cross-platform)\nexport async function getScreenSize() {\n  if (platform.isDarwin) {\n    // macOS: Use system_profiler\n    const { stdout } = await new Deno.Command(\"system_profiler\", {\n      args: [\"SPDisplaysDataType\", \"-json\"]\n    }).output();\n    \n    try {\n      const data = JSON.parse(new TextDecoder().decode(stdout));\n      const display = data.SPDisplaysDataType[0].spdisplays_ndrvs[0];\n      const resolution = display._spdisplays_resolution.match(/(\\d+) x (\\d+)/);\n      if (resolution) {\n        return {\n          width: parseInt(resolution[1]),\n          height: parseInt(resolution[2])\n        };\n      }\n    } catch {}\n    \n  } else if (platform.isWindows) {\n    // Windows: Use PowerShell\n    const script = `\n      Add-Type -AssemblyName System.Windows.Forms\n      $screen = [System.Windows.Forms.Screen]::PrimaryScreen\n      Write-Host \"$($screen.Bounds.Width),$($screen.Bounds.Height)\"\n    `;\n    \n    const { stdout } = await new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", script]\n    }).output();\n    \n    const [width, height] = new TextDecoder().decode(stdout).trim().split(\",\");\n    return {\n      width: parseInt(width),\n      height: parseInt(height)\n    };\n    \n  } else {\n    // Linux: Try xrandr or xdpyinfo\n    try {\n      const { stdout } = await new Deno.Command(\"xrandr\", {\n        args: [\"--current\"]\n      }).output();\n      \n      const output = new TextDecoder().decode(stdout);\n      const match = output.match(/primary (\\d+)x(\\d+)/);\n      if (match) {\n        return {\n          width: parseInt(match[1]),\n          height: parseInt(match[2])\n        };\n      }\n    } catch {\n      try {\n        const { stdout } = await new Deno.Command(\"xdpyinfo\").output();\n        const output = new TextDecoder().decode(stdout);\n        const match = output.match(/dimensions:\\s+(\\d+)x(\\d+)/);\n        if (match) {\n          return {\n            width: parseInt(match[1]),\n            height: parseInt(match[2])\n          };\n        }\n      } catch {}\n    }\n  }\n  \n  // Fallback\n  return { width: 1920, height: 1080 };\n}",
  "computer/keyboard.js": "// Keyboard module - Cross-platform keyboard automation\n\nimport * as platform from \"../core/platform.js\";\n\n// Escape text for keyboard input (cross-platform)\nfunction escapeText(text) {\n  if (platform.isWindows) {\n    // PowerShell SendKeys escaping\n    return text\n      .replace(/\\{/g, '{{')\n      .replace(/\\}/g, '}}')\n      .replace(/\\(/g, '{(}')\n      .replace(/\\)/g, '{)}')\n      .replace(/\\+/g, '{+}')\n      .replace(/\\^/g, '{^}')\n      .replace(/%/g, '{%}')\n      .replace(/~/g, '{~}');\n  } else {\n    // Unix shell escaping\n    return text.replace(/'/g, \"'\\\\''\");\n  }\n}\n\nexport async function type(text) {\n  const escapedText = escapeText(text);\n  \n  if (platform.isDarwin) {\n    // macOS: osascript (built-in)\n    const script = `tell application \"System Events\" to keystroke \"${escapedText}\"`;\n    await new Deno.Command(\"osascript\", { args: [\"-e\", script] }).output();\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell SendKeys (built-in)\n    const script = `\n      Add-Type -AssemblyName System.Windows.Forms\n      [System.Windows.Forms.SendKeys]::SendWait(\"${escapedText}\")\n    `;\n    await new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", script]\n    }).output();\n    \n  } else {\n    // Linux: Try xdotool or ydotool\n    try {\n      await new Deno.Command(\"xdotool\", {\n        args: [\"type\", text] // xdotool handles text directly\n      }).output();\n    } catch {\n      try {\n        // ydotool for Wayland\n        await new Deno.Command(\"ydotool\", {\n          args: [\"type\", text]\n        }).output();\n      } catch {\n        throw new Error(\n          \"Keyboard type failed. Install xdotool (X11) or ydotool (Wayland)\"\n        );\n      }\n    }\n  }\n}\n\n// Key mappings for cross-platform support\nconst KEY_MAP = {\n  // Common keys\n  \"enter\": { \n    darwin: \"return\", \n    windows: \"{ENTER}\", \n    linux: \"Return\" \n  },\n  \"return\": { \n    darwin: \"return\", \n    windows: \"{ENTER}\", \n    linux: \"Return\" \n  },\n  \"tab\": { \n    darwin: \"tab\", \n    windows: \"{TAB}\", \n    linux: \"Tab\" \n  },\n  \"delete\": { \n    darwin: \"delete\", \n    windows: \"{DEL}\", \n    linux: \"Delete\" \n  },\n  \"backspace\": { \n    darwin: \"delete\", \n    windows: \"{BACKSPACE}\", \n    linux: \"BackSpace\" \n  },\n  \"escape\": { \n    darwin: \"escape\", \n    windows: \"{ESC}\", \n    linux: \"Escape\" \n  },\n  \"space\": { \n    darwin: \"space\", \n    windows: \" \", \n    linux: \"space\" \n  },\n  \"up\": { \n    darwin: \"up arrow\", \n    windows: \"{UP}\", \n    linux: \"Up\" \n  },\n  \"down\": { \n    darwin: \"down arrow\", \n    windows: \"{DOWN}\", \n    linux: \"Down\" \n  },\n  \"left\": { \n    darwin: \"left arrow\", \n    windows: \"{LEFT}\", \n    linux: \"Left\" \n  },\n  \"right\": { \n    darwin: \"right arrow\", \n    windows: \"{RIGHT}\", \n    linux: \"Right\" \n  },\n  \"home\": { \n    darwin: \"home\", \n    windows: \"{HOME}\", \n    linux: \"Home\" \n  },\n  \"end\": { \n    darwin: \"end\", \n    windows: \"{END}\", \n    linux: \"End\" \n  },\n  \"pageup\": { \n    darwin: \"page up\", \n    windows: \"{PGUP}\", \n    linux: \"Page_Up\" \n  },\n  \"pagedown\": { \n    darwin: \"page down\", \n    windows: \"{PGDN}\", \n    linux: \"Page_Down\" \n  }\n};\n\nexport async function press(key, modifiers = {}) {\n  // Normalize key name\n  const normalizedKey = key.toLowerCase();\n  const keyMapping = KEY_MAP[normalizedKey] || {\n    darwin: key,\n    windows: key,\n    linux: key\n  };\n  \n  if (platform.isDarwin) {\n    // macOS: osascript with modifiers\n    const mods = [];\n    if (modifiers.cmd || modifiers.command) mods.push(\"command down\");\n    if (modifiers.ctrl || modifiers.control) mods.push(\"control down\");\n    if (modifiers.alt || modifiers.option) mods.push(\"option down\");\n    if (modifiers.shift) mods.push(\"shift down\");\n    \n    const keyName = keyMapping.darwin;\n    const script = mods.length > 0\n      ? `tell application \"System Events\" to keystroke \"${keyName}\" using {${mods.join(\", \")}}`\n      : `tell application \"System Events\" to keystroke \"${keyName}\"`;\n    \n    await new Deno.Command(\"osascript\", { args: [\"-e\", script] }).output();\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell SendKeys with modifiers\n    let keys = \"\";\n    if (modifiers.ctrl || modifiers.control) keys += \"^\";\n    if (modifiers.alt) keys += \"%\";\n    if (modifiers.shift) keys += \"+\";\n    keys += keyMapping.windows;\n    \n    const script = `\n      Add-Type -AssemblyName System.Windows.Forms\n      [System.Windows.Forms.SendKeys]::SendWait(\"${keys}\")\n    `;\n    await new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", script]\n    }).output();\n    \n  } else {\n    // Linux: xdotool or ydotool\n    const keys = [];\n    if (modifiers.ctrl || modifiers.control) keys.push(\"ctrl\");\n    if (modifiers.alt) keys.push(\"alt\");\n    if (modifiers.shift) keys.push(\"shift\");\n    if (modifiers.cmd || modifiers.command || modifiers.super) keys.push(\"super\");\n    keys.push(keyMapping.linux);\n    \n    try {\n      await new Deno.Command(\"xdotool\", {\n        args: [\"key\", keys.join(\"+\")]\n      }).output();\n    } catch {\n      try {\n        // ydotool for Wayland\n        await new Deno.Command(\"ydotool\", {\n          args: [\"key\", ...keys]\n        }).output();\n      } catch {\n        throw new Error(\n          \"Keyboard press failed. Install xdotool (X11) or ydotool (Wayland)\"\n        );\n      }\n    }\n  }\n}\n\n// Send keyboard shortcut (convenience function)\nexport async function shortcut(keys) {\n  // Parse shortcut like \"cmd+a\" or \"ctrl+shift+t\"\n  const parts = keys.toLowerCase().split(\"+\");\n  const modifiers = {};\n  let key = \"\";\n  \n  for (const part of parts) {\n    if ([\"cmd\", \"command\", \"ctrl\", \"control\", \"alt\", \"option\", \"shift\", \"super\"].includes(part)) {\n      if (part === \"cmd\" || part === \"command\") modifiers.cmd = true;\n      if (part === \"ctrl\" || part === \"control\") modifiers.ctrl = true;\n      if (part === \"alt\" || part === \"option\") modifiers.alt = true;\n      if (part === \"shift\") modifiers.shift = true;\n      if (part === \"super\") modifiers.super = true;\n    } else {\n      key = part;\n    }\n  }\n  \n  return press(key, modifiers);\n}",
  "computer/mouse.js": "// Mouse module - Cross-platform mouse automation\n\nimport * as platform from \"../core/platform.js\";\n\nexport async function move(x, y) {\n  if (platform.isDarwin) {\n    // macOS: Try cliclick first, fallback to Python\n    try {\n      await new Deno.Command(\"cliclick\", {\n        args: [`m:${x},${y}`]\n      }).output();\n    } catch {\n      // Fallback to Python (built-in on macOS)\n      const script = `\nimport Quartz\nQuartz.CGWarpMouseCursorPosition((${x}, ${y}))\n      `;\n      await new Deno.Command(\"python3\", {\n        args: [\"-c\", script]\n      }).output();\n    }\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell (built-in)\n    const script = `\n      Add-Type -AssemblyName System.Windows.Forms\n      [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point(${x}, ${y})\n    `;\n    await new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", script]\n    }).output();\n    \n  } else {\n    // Linux: Try xdotool or ydotool\n    try {\n      await new Deno.Command(\"xdotool\", {\n        args: [\"mousemove\", String(x), String(y)]\n      }).output();\n    } catch {\n      try {\n        await new Deno.Command(\"ydotool\", {\n          args: [\"mousemove\", String(x), String(y)]\n        }).output();\n      } catch {\n        throw new Error(\n          \"Mouse move failed. Install xdotool (X11) or ydotool (Wayland)\"\n        );\n      }\n    }\n  }\n}\n\nexport async function click(x = null, y = null, button = \"left\") {\n  // Move to position if specified\n  if (x !== null && y !== null) {\n    await move(x, y);\n  }\n  \n  if (platform.isDarwin) {\n    // macOS: Try cliclick first, fallback to Python\n    try {\n      const clickType = button === \"right\" ? \"rc\" : button === \"middle\" ? \"mc\" : \"c\";\n      const args = x !== null && y !== null \n        ? [`${clickType}:${x},${y}`]\n        : [clickType];\n      \n      await new Deno.Command(\"cliclick\", { args }).output();\n    } catch {\n      // Fallback to Python\n      const buttonMap = {\n        \"left\": \"Quartz.kCGMouseButtonLeft\",\n        \"right\": \"Quartz.kCGMouseButtonRight\",\n        \"middle\": \"Quartz.kCGMouseButtonCenter\"\n      };\n      \n      const script = `\nimport Quartz\nimport time\n\n# Get current position if not specified\n${x === null ? `\npos = Quartz.NSEvent.mouseLocation()\nx, y = pos.x, pos.y\n` : `x, y = ${x}, ${y}`}\n\n# Create mouse events\nevent = Quartz.CGEventCreateMouseEvent(\n    None,\n    Quartz.kCGEventLeftMouseDown if \"${button}\" == \"left\" else \n    Quartz.kCGEventRightMouseDown if \"${button}\" == \"right\" else\n    Quartz.kCGEventOtherMouseDown,\n    (x, y),\n    ${buttonMap[button] || buttonMap.left}\n)\nQuartz.CGEventPost(Quartz.kCGHIDEventTap, event)\n\nevent = Quartz.CGEventCreateMouseEvent(\n    None,\n    Quartz.kCGEventLeftMouseUp if \"${button}\" == \"left\" else\n    Quartz.kCGEventRightMouseUp if \"${button}\" == \"right\" else\n    Quartz.kCGEventOtherMouseUp,\n    (x, y),\n    ${buttonMap[button] || buttonMap.left}\n)\nQuartz.CGEventPost(Quartz.kCGHIDEventTap, event)\n      `;\n      \n      await new Deno.Command(\"python3\", {\n        args: [\"-c\", script]\n      }).output();\n    }\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell with mouse_event\n    const buttonFlags = {\n      left: { down: \"0x0002\", up: \"0x0004\" },\n      right: { down: \"0x0008\", up: \"0x0010\" },\n      middle: { down: \"0x0020\", up: \"0x0040\" }\n    };\n    \n    const flags = buttonFlags[button] || buttonFlags.left;\n    \n    const script = `\n      Add-Type @\"\n        using System;\n        using System.Runtime.InteropServices;\n        public class Mouse {\n          [DllImport(\"user32.dll\")]\n          public static extern void mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);\n        }\n\"@\n      \n      ${x !== null && y !== null ? `\n      Add-Type -AssemblyName System.Windows.Forms\n      [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point(${x}, ${y})\n      ` : \"\"}\n      \n      [Mouse]::mouse_event(${flags.down}, 0, 0, 0, 0)\n      [Mouse]::mouse_event(${flags.up}, 0, 0, 0, 0)\n    `;\n    \n    await new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", script]\n    }).output();\n    \n  } else {\n    // Linux: xdotool or ydotool\n    const buttonMap = {\n      \"left\": \"1\",\n      \"middle\": \"2\",\n      \"right\": \"3\"\n    };\n    \n    try {\n      if (x !== null && y !== null) {\n        await new Deno.Command(\"xdotool\", {\n          args: [\"mousemove\", String(x), String(y), \"click\", buttonMap[button] || \"1\"]\n        }).output();\n      } else {\n        await new Deno.Command(\"xdotool\", {\n          args: [\"click\", buttonMap[button] || \"1\"]\n        }).output();\n      }\n    } catch {\n      try {\n        if (x !== null && y !== null) {\n          await new Deno.Command(\"ydotool\", {\n            args: [\"mousemove\", String(x), String(y)]\n          }).output();\n        }\n        await new Deno.Command(\"ydotool\", {\n          args: [\"click\", buttonMap[button] || \"1\"]\n        }).output();\n      } catch {\n        throw new Error(\n          \"Mouse click failed. Install xdotool (X11) or ydotool (Wayland)\"\n        );\n      }\n    }\n  }\n}\n\nexport async function position() {\n  if (platform.isDarwin) {\n    // macOS: Try cliclick first, fallback to Python\n    try {\n      const { stdout } = await new Deno.Command(\"cliclick\", {\n        args: [\"p\"]\n      }).output();\n      const pos = new TextDecoder().decode(stdout).trim();\n      const [x, y] = pos.split(\",\").map(n => parseInt(n));\n      return { x, y };\n    } catch {\n      // Fallback to Python\n      const script = `\nimport Quartz\npos = Quartz.NSEvent.mouseLocation()\nprint(f\"{int(pos.x)},{int(pos.y)}\")\n      `;\n      const { stdout } = await new Deno.Command(\"python3\", {\n        args: [\"-c\", script]\n      }).output();\n      const [x, y] = new TextDecoder().decode(stdout).trim().split(\",\").map(n => parseInt(n));\n      return { x, y };\n    }\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell\n    const script = `\n      Add-Type -AssemblyName System.Windows.Forms\n      $pos = [System.Windows.Forms.Cursor]::Position\n      Write-Host \"$($pos.X),$($pos.Y)\"\n    `;\n    const { stdout } = await new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", script]\n    }).output();\n    const [x, y] = new TextDecoder().decode(stdout).trim().split(\",\").map(n => parseInt(n));\n    return { x, y };\n    \n  } else {\n    // Linux: xdotool or ydotool\n    try {\n      const { stdout } = await new Deno.Command(\"xdotool\", {\n        args: [\"getmouselocation\"]\n      }).output();\n      const output = new TextDecoder().decode(stdout);\n      const x = parseInt(output.match(/x:(\\d+)/)?.[1] || \"0\");\n      const y = parseInt(output.match(/y:(\\d+)/)?.[1] || \"0\");\n      return { x, y };\n    } catch {\n      try {\n        const { stdout } = await new Deno.Command(\"ydotool\", {\n          args: [\"mousemove\", \"--get\"]\n        }).output();\n        const [x, y] = new TextDecoder().decode(stdout).trim().split(\" \").map(n => parseInt(n));\n        return { x, y };\n      } catch {\n        throw new Error(\n          \"Mouse position failed. Install xdotool (X11) or ydotool (Wayland)\"\n        );\n      }\n    }\n  }\n}\n\n// Double click\nexport async function doubleClick(x = null, y = null) {\n  await click(x, y);\n  await new Promise(r => setTimeout(r, 50)); // Small delay\n  await click(x, y);\n}\n\n// Drag from one position to another\nexport async function drag(fromX, fromY, toX, toY) {\n  if (platform.isDarwin) {\n    try {\n      await new Deno.Command(\"cliclick\", {\n        args: [`dd:${fromX},${fromY}`, `du:${toX},${toY}`]\n      }).output();\n    } catch {\n      // Manual drag with Python\n      await move(fromX, fromY);\n      await click(fromX, fromY);\n      await move(toX, toY);\n      await click(toX, toY);\n    }\n    \n  } else if (platform.isWindows) {\n    // Windows: Mouse down, move, mouse up\n    const script = `\n      Add-Type @\"\n        using System;\n        using System.Runtime.InteropServices;\n        public class Mouse {\n          [DllImport(\"user32.dll\")]\n          public static extern void mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);\n        }\n\"@\n      Add-Type -AssemblyName System.Windows.Forms\n      \n      # Move to start position\n      [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point(${fromX}, ${fromY})\n      # Mouse down\n      [Mouse]::mouse_event(0x0002, 0, 0, 0, 0)\n      # Move to end position\n      [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point(${toX}, ${toY})\n      # Mouse up\n      [Mouse]::mouse_event(0x0004, 0, 0, 0, 0)\n    `;\n    await new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", script]\n    }).output();\n    \n  } else {\n    // Linux: xdotool drag\n    try {\n      await new Deno.Command(\"xdotool\", {\n        args: [\"mousemove\", String(fromX), String(fromY), \"mousedown\", \"1\",\n               \"mousemove\", String(toX), String(toY), \"mouseup\", \"1\"]\n      }).output();\n    } catch {\n      // Manual drag\n      await move(fromX, fromY);\n      await click(fromX, fromY);\n      await move(toX, toY);\n      await click(toX, toY);\n    }\n  }\n}",
  "ai/ollama.js": "// Ollama module - AI integration\n\nexport const list = async () => {\n  const response = await fetch(\"http://localhost:11434/api/tags\");\n  if (!response.ok) throw new Error(\"Ollama not running\");\n  const data = await response.json();\n  return data.models || [];\n};\n\nexport const chat = async (prompt, model = \"qwen2.5-coder:3b\") => {\n  const response = await fetch(\"http://localhost:11434/api/generate\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ model, prompt, stream: false })\n  });\n  if (!response.ok) throw new Error(\"Ollama chat failed\");\n  const data = await response.json();\n  return data.response;\n};",
  "app/control.js": "// App Control Module - Control macOS app via WebSocket\n// Replaces __HLVM_COMMAND__ strings with proper JSON-RPC calls\n\nlet socket = null;\nlet requestId = 0;\nconst pending = new Map();\n\n// Connect to macOS app WebSocket server\nasync function connect(port = 11436) {\n  return new Promise((resolve, reject) => {\n    try {\n      socket = new WebSocket(`ws://localhost:${port}`);\n      \n      socket.onopen = () => {\n        console.log(\"Connected to macOS app\");\n        resolve(true);\n      };\n      \n      socket.onerror = (error) => {\n        reject(new Error(`Connection failed: ${error}`));\n      };\n      \n      socket.onmessage = (event) => {\n        try {\n          const msg = JSON.parse(event.data);\n          \n          // Handle response to our request\n          if (msg.id && pending.has(msg.id)) {\n            const { resolve, reject } = pending.get(msg.id);\n            pending.delete(msg.id);\n            \n            if (msg.error) {\n              reject(new Error(msg.error.message));\n            } else {\n              resolve(msg.result);\n            }\n          }\n          \n          // Handle notifications from app\n          if (!msg.id && msg.method) {\n            handleNotification(msg.method, msg.params);\n          }\n        } catch (e) {\n          console.error(\"Message handling error:\", e);\n        }\n      };\n      \n      socket.onclose = () => {\n        console.log(\"Disconnected from macOS app\");\n        socket = null;\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n// Send JSON-RPC request and wait for response\nasync function request(method, params = null) {\n  if (!socket || socket.readyState !== WebSocket.OPEN) {\n    // Try to connect\n    try {\n      await connect();\n    } catch {\n      return { error: \"macOS app not available\" };\n    }\n  }\n  \n  const id = `req-${++requestId}`;\n  \n  return new Promise((resolve, reject) => {\n    const timeout = setTimeout(() => {\n      pending.delete(id);\n      reject(new Error(\"Request timeout\"));\n    }, 5000);\n    \n    pending.set(id, { \n      resolve: (result) => {\n        clearTimeout(timeout);\n        resolve(result);\n      }, \n      reject: (error) => {\n        clearTimeout(timeout);\n        reject(error);\n      }\n    });\n    \n    const request = {\n      jsonrpc: \"2.0\",\n      id,\n      method,\n      params\n    };\n    \n    socket.send(JSON.stringify(request));\n  });\n}\n\n// Send notification (no response expected)\nfunction notify(method, params = null) {\n  if (!socket || socket.readyState !== WebSocket.OPEN) {\n    console.warn(\"App not connected\");\n    return;\n  }\n  \n  const notification = {\n    jsonrpc: \"2.0\",\n    method,\n    params\n  };\n  \n  socket.send(JSON.stringify(notification));\n}\n\n// Handle notifications from app\nfunction handleNotification(method, params) {\n  console.log(`Notification from app: ${method}`, params);\n  \n  // Emit events if needed\n  if (globalThis.hlvm?.events) {\n    globalThis.hlvm.events.emit(method, params);\n  }\n}\n\n// App control commands (replacing __HLVM_COMMAND__ strings)\nexport const app = {\n  // Connection management\n  connect,\n  disconnect: () => {\n    if (socket) {\n      socket.close();\n      socket = null;\n    }\n  },\n  \n  isConnected: () => socket && socket.readyState === WebSocket.OPEN,\n  \n  // Spotlight commands (replacing __HLVM_SPOTLIGHT_*)\n  spotlight: {\n    toggle: () => request(\"spotlight.toggle\"),\n    show: () => request(\"spotlight.show\"),\n    hide: () => request(\"spotlight.hide\"),\n    navigateIn: () => request(\"spotlight.navigateIn\"),\n    navigateOut: () => request(\"spotlight.navigateOut\"),\n    search: (query) => request(\"spotlight.search\", { query })\n  },\n  \n  // Chat commands (replacing __HLVM_CHAT_*)\n  chat: {\n    toggle: () => request(\"chat.toggle\"),\n    stop: () => request(\"chat.stop\"),\n    cancel: () => request(\"chat.cancel\"),\n    createRoom: (name) => request(\"chat.createRoom\", { name }),\n    send: (message) => request(\"chat.send\", { message }),\n    list: () => request(\"chat.list\"),\n    selectRoom: (id) => request(\"chat.selectRoom\", { id }),\n    ask: (prompt) => request(\"chat.ask\", { prompt })\n  },\n  \n  // Playground commands (replacing __HLVM_PLAYGROUND_*)\n  playground: {\n    toggle: () => request(\"playground.toggle\"),\n    eval: (code) => request(\"playground.eval\", { code }),\n    increaseFont: () => request(\"playground.increaseFont\"),\n    decreaseFont: () => request(\"playground.decreaseFont\"),\n    setCode: (code) => request(\"playground.setCode\", { code })\n  },\n  \n  // Screenshot commands (replacing __HLVM_SCREENSHOT_*)\n  screenshot: {\n    capture: () => request(\"screenshot.capture\"),\n    captureScreen: () => request(\"screenshot.captureScreen\"),\n    captureEntire: () => request(\"screenshot.captureEntire\"),\n    captureSelection: () => request(\"screenshot.captureSelection\")\n  },\n  \n  // App commands (replacing __HLVM_APP_*)\n  preferences: () => request(\"app.preferences\"),\n  escape: () => request(\"app.escape\"),\n  eval: (code) => request(\"app.eval\", { code }),\n  settings: () => request(\"app.settings\"),\n  textEditor: () => request(\"app.textEditor\"),\n  minimize: () => request(\"app.minimize\"),\n  quit: () => request(\"app.quit\"),\n  \n  // Code commands (replacing __HLVM_CODE_*)\n  code: {\n    paste: (code) => request(\"code.paste\", { code }),\n    copy: () => request(\"code.copy\")\n  },\n  \n  // Utility commands\n  clipboard: {\n    copy: (text) => request(\"clipboard.copy\", { text }),\n    paste: () => request(\"clipboard.paste\")\n  },\n  \n  // REPL commands\n  repl: {\n    toggle: () => request(\"repl.toggle\"),\n    clear: () => request(\"repl.clear\"),\n    execute: (code) => request(\"repl.execute\", { code })\n  },\n  \n  // AI commands\n  ai: {\n    write: (prompt) => request(\"ai.write\", { prompt })\n  },\n  \n  // Raw request for custom commands\n  request,\n  notify\n};\n\nexport default app;"
};

export const embeddedInit = "// HLVM Initialization - Clean Mediator\n// Imports all stdlib modules and exposes them through the hlvm namespace\n\n// Import all stdlib modules from organized structure\nimport * as platform from \"./stdlib/core/platform.js\";\nimport * as system from \"./stdlib/core/system.js\";\nimport * as db from \"./stdlib/core/database.js\";\nimport * as fs from \"./stdlib/fs/filesystem.js\";\nimport * as clipboard from \"./stdlib/io/clipboard.js\";\nimport * as notification from \"./stdlib/computer/notification.js\";\nimport * as screen from \"./stdlib/computer/screen.js\";\nimport * as keyboard from \"./stdlib/computer/keyboard.js\";\nimport * as mouse from \"./stdlib/computer/mouse.js\";\nimport * as ollama from \"./stdlib/ai/ollama.js\";\nimport { app } from \"./stdlib/app/control.js\";\n\n// Create hlvm namespace\nglobalThis.hlvm = {\n  // Core persistence\n  save: db.save,\n  load: db.load,\n  list: db.list,\n  remove: db.remove,\n  db: db.db, // Expose database object for CLI\n  \n  // System modules\n  platform,\n  system,\n  fs,\n  clipboard,\n  \n  // Computer control\n  notification,\n  screen,\n  keyboard,\n  mouse,\n  \n  // AI\n  ollama,\n  ask: ollama.chat, // Shorthand\n  \n  // App control (replaces __HLVM_COMMAND__)\n  app,\n  \n  // WebSocket Bridge (for macOS app communication)\n  startBridge: async (port = 11435) => {\n    // Dynamically import and start the bridge\n    const { HLVMBridge } = await import(\"../src/hlvm-bridge.ts\");\n    const bridge = new HLVMBridge();\n    await bridge.start(port);\n    console.log(\"WebSocket bridge ready on port \" + port);\n  },\n  \n  // Help\n  help: () => {\n    console.log(`\nHLVM - High-Level Virtual Machine\n==================================\n\nCore Functions:\n  hlvm.save(name, code)     - Save ESM module or function\n  hlvm.load(name)           - Load and import module\n  hlvm.list()               - List saved modules\n  hlvm.remove(name)         - Remove a module\n  hlvm.ask(prompt)          - Chat with Ollama\n\nSystem Control:\n  hlvm.platform             - Platform info (os, arch, etc)\n  hlvm.system               - System utilities\n  hlvm.fs                   - File system operations\n  hlvm.clipboard            - Clipboard read/write\n\nComputer Control:\n  hlvm.notification         - UI dialogs (alert, notify, confirm, prompt)\n  hlvm.screen              - Screen capture\n  hlvm.keyboard            - Keyboard automation (type, press)\n  hlvm.mouse               - Mouse automation (move, click, position)\n\nOllama:\n  hlvm.ollama.list()        - List available models\n  hlvm.ollama.chat(prompt)  - Chat with specific model\n\nFile Operations:\n  hlvm.fs.read(path)        - Read text file\n  hlvm.fs.write(path, text) - Write text file\n  hlvm.fs.readBytes(path)   - Read binary file\n  hlvm.fs.writeBytes(path)  - Write binary file\n  hlvm.fs.exists(path)      - Check if path exists\n  hlvm.fs.remove(path)      - Delete file/directory\n  hlvm.fs.mkdir(path)       - Create directory\n  hlvm.fs.copy(src, dest)   - Copy file/directory\n  hlvm.fs.move(src, dest)   - Move file/directory\n\nExamples:\n  // Files\n  await hlvm.fs.write('/tmp/test.txt', 'Hello')\n  const text = await hlvm.fs.read('/tmp/test.txt')\n  \n  // Notifications\n  await hlvm.notification.notify(\"Done!\", \"HLVM\")\n  const name = await hlvm.notification.prompt(\"Name?\")\n  \n  // Automation\n  await hlvm.screen.capture(\"/tmp/screen.png\")\n  await hlvm.keyboard.type(\"Hello\")\n  await hlvm.mouse.click(100, 100)\n    `);\n  },\n  \n  // Status\n  status: () => {\n    const modules = Object.keys(hlvm).filter(k => typeof hlvm[k] === 'object');\n    const savedModules = hlvm.list();\n    \n    console.log('\\nHLVM Status:');\n    console.log('─'.repeat(40));\n    console.log('System Modules:', modules.join(', '));\n    console.log(`Saved Modules: ${savedModules.length} modules in SQLite`);\n    console.log(`Database: ${db.path}`);\n    console.log(`Platform: ${platform.os} (${platform.arch})`);\n    console.log(`Temp Dir: ${platform.tempDir()}`);\n    console.log(`Home Dir: ${platform.homeDir()}`);\n  }\n};\n\n// Global utilities\nglobalThis.pprint = (obj) => console.log(JSON.stringify(obj, null, 2));\n\n// Add bridge starter function (manual activation)\nglobalThis.hlvm.startBridge = async () => {\n  try {\n    const { bridge } = await import(\"../src/hlvm-bridge.ts\");\n    await bridge.start(11435);\n    console.log(\"WebSocket bridge ready on port 11435\");\n    return true;\n  } catch (e) {\n    console.error(\"Failed to start WebSocket bridge:\", e.message);\n    return false;\n  }\n};\n\nconsole.log(\"HLVM ready. Type 'hlvm.help()' for help.\");";
export const embeddedBridge = "// HLVM Bridge - WebSocket server for bidirectional communication with macOS app\n// Replaces brittle __HLVM_COMMAND__ strings with proper JSON-RPC over WebSocket\n\ninterface JSONRPCRequest {\n  jsonrpc: \"2.0\";\n  id?: string | number;\n  method: string;\n  params?: any;\n}\n\ninterface JSONRPCResponse {\n  jsonrpc: \"2.0\";\n  id: string | number;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ninterface JSONRPCNotification {\n  jsonrpc: \"2.0\";\n  method: string;\n  params?: any;\n}\n\nclass HLVMBridge {\n  private connections = new Set<WebSocket>();\n  private server?: Deno.HttpServer;\n  private handlers = new Map<string, (params: any) => Promise<any>>();\n\n  constructor() {\n    this.registerHandlers();\n  }\n\n  private registerHandlers() {\n    // System handlers\n    this.handlers.set(\"eval\", async (params) => {\n      const result = await eval(params.code);\n      return result;\n    });\n\n    this.handlers.set(\"system.info\", async () => {\n      return {\n        platform: Deno.build.os,\n        arch: Deno.build.arch,\n        version: \"2.0\",\n        pid: Deno.pid\n      };\n    });\n\n    // Module handlers (keep existing functionality)\n    this.handlers.set(\"modules.list\", async () => {\n      // Call existing hlvm.list() function\n      if (globalThis.hlvm?.list) {\n        return await globalThis.hlvm.list();\n      }\n      return [];\n    });\n\n    this.handlers.set(\"modules.save\", async (params) => {\n      if (globalThis.hlvm?.save) {\n        return await globalThis.hlvm.save(params.name, params.code);\n      }\n      throw new Error(\"Module save not available\");\n    });\n\n    this.handlers.set(\"modules.load\", async (params) => {\n      if (globalThis.hlvm?.load) {\n        return await globalThis.hlvm.load(params.name);\n      }\n      throw new Error(\"Module load not available\");\n    });\n\n    // AI handlers\n    this.handlers.set(\"ai.generate\", async (params) => {\n      if (globalThis.hlvm?.ollama?.chat) {\n        return await globalThis.hlvm.ollama.chat(params.prompt, params.model);\n      }\n      throw new Error(\"AI not available\");\n    });\n\n    // File system handlers\n    this.handlers.set(\"fs.read\", async (params) => {\n      return await Deno.readTextFile(params.path);\n    });\n\n    this.handlers.set(\"fs.write\", async (params) => {\n      await Deno.writeTextFile(params.path, params.content);\n      return { success: true };\n    });\n\n    this.handlers.set(\"fs.exists\", async (params) => {\n      try {\n        await Deno.stat(params.path);\n        return true;\n      } catch {\n        return false;\n      }\n    });\n  }\n\n  async start(port = 11435) {\n    // Start server without blocking\n    this.server = Deno.serve({ port, onListen: () => {\n      console.log(`HLVM Bridge running on ws://localhost:${port}`);\n    }}, (req) => {\n      // Handle WebSocket upgrade\n      if (req.headers.get(\"upgrade\") === \"websocket\") {\n        const { socket, response } = Deno.upgradeWebSocket(req);\n        \n        socket.onopen = () => {\n          console.log(\"macOS app connected\");\n          this.connections.add(socket);\n          \n          // Send connection confirmation\n          const notification: JSONRPCNotification = {\n            jsonrpc: \"2.0\",\n            method: \"connection.established\",\n            params: {\n              version: \"2.0\",\n              capabilities: Array.from(this.handlers.keys())\n            }\n          };\n          socket.send(JSON.stringify(notification));\n        };\n\n        socket.onmessage = async (event) => {\n          try {\n            const request = JSON.parse(event.data) as JSONRPCRequest;\n            \n            if (request.jsonrpc !== \"2.0\") {\n              throw new Error(\"Invalid JSON-RPC version\");\n            }\n\n            // Handle request with response\n            if (request.id !== undefined) {\n              const response: JSONRPCResponse = {\n                jsonrpc: \"2.0\",\n                id: request.id\n              };\n\n              try {\n                const handler = this.handlers.get(request.method);\n                if (!handler) {\n                  response.error = {\n                    code: -32601,\n                    message: `Method not found: ${request.method}`\n                  };\n                } else {\n                  response.result = await handler(request.params);\n                }\n              } catch (error) {\n                response.error = {\n                  code: -32603,\n                  message: error.message\n                };\n              }\n\n              socket.send(JSON.stringify(response));\n            } \n            // Handle notification (no response)\n            else {\n              const handler = this.handlers.get(request.method);\n              if (handler) {\n                handler(request.params).catch(console.error);\n              }\n            }\n          } catch (error) {\n            console.error(\"Message handling error:\", error);\n          }\n        };\n\n        socket.onclose = () => {\n          console.log(\"macOS app disconnected\");\n          this.connections.delete(socket);\n        };\n\n        socket.onerror = (error) => {\n          console.error(\"WebSocket error:\", error);\n        };\n\n        return response;\n      }\n\n      // Regular HTTP endpoint for health check\n      if (req.url.endsWith(\"/health\")) {\n        return new Response(JSON.stringify({ status: \"ok\", connections: this.connections.size }), {\n          headers: { \"Content-Type\": \"application/json\" }\n        });\n      }\n\n      return new Response(\"HLVM Bridge WebSocket Server\", { status: 200 });\n    });\n  }\n\n  // Send notification to all connected clients\n  broadcast(method: string, params?: any) {\n    const notification: JSONRPCNotification = {\n      jsonrpc: \"2.0\",\n      method,\n      params\n    };\n    \n    const message = JSON.stringify(notification);\n    for (const socket of this.connections) {\n      if (socket.readyState === WebSocket.OPEN) {\n        socket.send(message);\n      }\n    }\n  }\n\n  // Send request to macOS app and wait for response\n  async request(method: string, params?: any): Promise<any> {\n    if (this.connections.size === 0) {\n      throw new Error(\"No macOS app connected\");\n    }\n\n    const socket = this.connections.values().next().value;\n    const id = `req-${Date.now()}-${Math.random()}`;\n    \n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error(\"Request timeout\"));\n      }, 5000);\n\n      const handler = (event: MessageEvent) => {\n        try {\n          const response = JSON.parse(event.data) as JSONRPCResponse;\n          if (response.id === id) {\n            clearTimeout(timeout);\n            socket.removeEventListener(\"message\", handler);\n            \n            if (response.error) {\n              reject(new Error(response.error.message));\n            } else {\n              resolve(response.result);\n            }\n          }\n        } catch {}\n      };\n\n      socket.addEventListener(\"message\", handler);\n      \n      const request: JSONRPCRequest = {\n        jsonrpc: \"2.0\",\n        id,\n        method,\n        params\n      };\n      \n      socket.send(JSON.stringify(request));\n    });\n  }\n\n  stop() {\n    for (const socket of this.connections) {\n      socket.close();\n    }\n    this.connections.clear();\n    this.server?.shutdown();\n  }\n}\n\n// Export for use in HLVM\nexport { HLVMBridge };\nexport const bridge = new HLVMBridge();\n\n// Start bridge if running as standalone\nif (import.meta.main) {\n  await bridge.start(11435);\n}";
