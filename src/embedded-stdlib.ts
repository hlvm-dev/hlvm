// Auto-generated file with embedded stdlib modules
// This file is generated by embed-stdlib.ts and should not be edited manually

// Export embedded model from version.ts
export const EMBEDDED_MODEL = "qwen2.5-coder:1.5b";

export const embeddedStdlib = {
  "ai.js": "// HLVM Stdlib AI - High-level AI functions\n// Accessible as hlvm.stdlib.ai.*\n\n// Get default model from env or fallback\nfunction getDefaultModel() {\n  return globalThis.hlvm?.env?.get(\"ai.model\") || globalThis.EMBEDDED_MODEL || \"qwen2.5-coder:1.5b\";\n}\n\n// Model manager state\nlet modelChecked = false;\nlet modelAvailable = false;\nlet downloadInProgress = false;\n\n/**\n * Ensure model is available, download if needed with progress display\n * @param {string} [modelName] - Model to ensure, defaults to env setting\n * @returns {Promise<boolean>} True if model is ready\n */\nasync function ensureModel(modelName) {\n  const model = modelName || getDefaultModel();\n  // Quick return if already checked\n  if (modelChecked && modelAvailable) return true;\n  if (downloadInProgress) {\n    console.log(\"⏳ Model download already in progress...\");\n    // Wait for download to complete\n    while (downloadInProgress) {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n    return modelAvailable;\n  }\n\n  try {\n    // Check if Ollama is running\n    const ollamaCheck = await globalThis.hlvm.core.ai.ollama.list().catch(() => null);\n    if (!ollamaCheck) {\n      console.log(\"\\n🚀 Starting AI service...\");\n      // Start Ollama in background\n      await globalThis.hlvm.core.system.exec([\"./resources/ollama\", \"serve\"], { background: true });\n      await new Promise(resolve => setTimeout(resolve, 2000)); // Wait for startup\n    }\n\n    // Check if model exists\n    const models = await globalThis.hlvm.core.ai.ollama.list();\n    const hasModel = models.models?.some(m => m.name === model);\n    \n    if (hasModel) {\n      modelChecked = true;\n      modelAvailable = true;\n      return true;\n    }\n\n    // Model doesn't exist, need to download\n    downloadInProgress = true;\n    console.log(\"\\n╔════════════════════════════════════════════════════════════════╗\");\n    console.log(\"║  🤖 Setting up AI capabilities (one-time download)              ║\");\n    console.log(\"║                                                                  ║\");\n    console.log(`║  Downloading model: ${model.padEnd(40)}  ║`);\n    console.log(\"║  This will take a few minutes but only happens once.            ║\");\n    console.log(\"║                                                                  ║\");\n    console.log(\"╚════════════════════════════════════════════════════════════════╝\\n\");\n\n    // Pull model (this will take a while)\n    console.log(\"  ⏳ Downloading... (this may take 2-5 minutes)\");\n    console.log(\"  📦 Model size: ~1GB\");\n    \n    try {\n      // Use ollama's pull function directly\n      await globalThis.hlvm.core.ai.ollama.pull({ \n        name: model,\n        stream: false \n      });\n      console.log(\"\\n✅ Model downloaded successfully!\");\n    } catch (pullError) {\n      console.error(\"\\n❌ Download failed:\", pullError.message);\n      throw pullError;\n    }\n\n    // Verify download\n    const verifyModels = await globalThis.hlvm.core.ai.ollama.list();\n    modelAvailable = verifyModels.models?.some(m => m.name === model);\n    \n    if (modelAvailable) {\n      console.log(\"\\n🎉 AI capabilities ready! Your command will now continue...\\n\");\n    } else {\n      console.error(\"\\n❌ Failed to download model. AI features may not work.\");\n    }\n\n    modelChecked = true;\n    downloadInProgress = false;\n    return modelAvailable;\n\n  } catch (error) {\n    downloadInProgress = false;\n    modelChecked = true;\n    console.error(\"\\n⚠️ Could not set up AI:\", error.message);\n    console.error(\"   AI features will not be available in this session.\");\n    return false;\n  }\n}\n\nconst SYSTEM_PROMPTS = {\n  default: `Improve this text: fix spelling, grammar, and clarity. \nKeep the original tone and meaning. Return ONLY the revised text.`,\n  \n  professional: `Revise this text to be professional and formal for business communication. \nFix all spelling and grammar errors. Return ONLY the revised text.`,\n  \n  casual: `Make this text casual and conversational while fixing errors. \nKeep it natural and relaxed. Return ONLY the revised text.`,\n  \n  friendly: `Make this text warm, friendly, and approachable. \nFix all errors and add a welcoming tone. Return ONLY the revised text.`,\n  \n  concise: `Make this text concise and to the point while keeping all key information. \nRemove redundancy and fix errors. Return ONLY the revised text.`,\n  \n  formal: `Make this text formal and academic in style. \nUse proper grammar and formal vocabulary. Return ONLY the revised text.`\n};\n\nconst REFACTOR_PROMPTS = {\n  all: `Refactor this code comprehensively:\n- Apply Clean Code principles and improve naming\n- Remove ALL redundancy and duplicate code (DRY)\n- Remove unused variables, functions, imports, and dead code\n- Simplify complex logic and flatten nested structures\n- Update to modern syntax and patterns\n- Optimize performance where obvious\n- Follow SOLID principles where applicable\nReturn ONLY the fully refactored code.`,\n\n  clean: `Refactor this code following Clean Code principles.\nRemove redundancy, improve naming, extract methods where needed.\nApply DRY (Don't Repeat Yourself) principle.\nReturn ONLY the refactored code.`,\n\n  solid: `Refactor this code following SOLID principles.\nApply Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, and Dependency Inversion.\nBreak down large classes/functions, improve abstractions.\nReturn ONLY the refactored code.`,\n\n  dry: `Refactor this code to eliminate ALL redundancy.\nExtract common patterns into reusable functions/components.\nRemove duplicate logic and consolidate similar code blocks.\nReturn ONLY the refactored code.`,\n\n  unused: `Analyze this code and remove ALL unused:\n- Variables and constants\n- Functions and methods\n- Imports and dependencies\n- Comments and dead code\nReturn ONLY the cleaned code with unused elements removed.`,\n\n  simplify: `Simplify this code to be more readable and maintainable.\nReduce complexity, flatten nested structures, use clearer logic.\nMake it easier to understand without changing functionality.\nReturn ONLY the simplified code.`,\n\n  modern: `Modernize this code using latest language features.\nUpdate syntax, use modern patterns, replace outdated approaches.\nKeep the same functionality with cleaner, modern code.\nReturn ONLY the modernized code.`,\n\n  performance: `Optimize this code for better performance.\nReduce time complexity, minimize memory usage, eliminate bottlenecks.\nAdd caching where beneficial, use efficient algorithms.\nReturn ONLY the optimized code.`\n};\n\nconst DIAGRAM_PROMPTS = {\n  auto: `Analyze this text and create the most appropriate ASCII diagram to visualize it.\nChoose from: flowchart, sequence diagram, tree structure, graph, table, or mindmap.\nUse box drawing characters (─│┌┐└┘├┤┬┴┼) for clean diagrams.\nReturn ONLY the ASCII diagram.`,\n  \n  flowchart: `Convert this text into an ASCII flowchart.\nUse box drawing characters (─│┌┐└┘├┤┬┴┼) and arrows (▼▲►◄).\nShow decision points with diamonds if applicable.\nReturn ONLY the ASCII flowchart.`,\n  \n  sequence: `Convert this text into an ASCII sequence diagram.\nShow interactions between entities with arrows and labels.\nUse vertical lines for lifelines and horizontal arrows for messages.\nReturn ONLY the ASCII sequence diagram.`,\n  \n  tree: `Convert this text into an ASCII tree structure.\nUse box drawing characters (─│├└) to show hierarchy.\nIndent child nodes appropriately.\nReturn ONLY the ASCII tree.`,\n  \n  graph: `Convert this text into an ASCII graph or network diagram.\nShow nodes and their connections clearly.\nUse box drawing characters for structure.\nReturn ONLY the ASCII graph.`,\n  \n  mindmap: `Convert this text into an ASCII mind map.\nShow the central concept with branches radiating outward.\nUse box drawing characters and indentation.\nReturn ONLY the ASCII mind map.`,\n  \n  table: `Convert this text into an ASCII table.\nExtract key data points and organize in rows and columns.\nUse box drawing characters for borders.\nReturn ONLY the ASCII table.`\n};\n\n/**\n * Creates ASCII diagrams from text using AI\n * @param {string} input - Text to visualize (uses clipboard if empty)\n * @param {Object} [options] - Drawing options\n * @param {string} [options.type='auto'] - Diagram type: auto|flowchart|sequence|tree|graph|mindmap|table\n * @param {string} [options.style='simple'] - Style: simple|detailed\n * @returns {Promise<string>} ASCII diagram\n * @example\n * await draw(\"login -> validate -> dashboard\")\n * // → ┌─────┐    ┌──────────┐    ┌───────────┐\n * //   │login│───▶│ validate │───▶│ dashboard │\n * //   └─────┘    └──────────┘    └───────────┘\n * @example\n * await draw(\"user story steps\", {type: \"sequence\"})\n * // → User     System     Database\n * //   │         │           │\n * //   │─login──▶│           │\n * //   │         │──query───▶│\n * //   │         │◀──result──│\n */\nexport async function draw(input, options = {}) {\n  // 1. Get text to visualize\n  let text = input;\n  if (!text) {\n    // Use clipboard as default input source\n    text = await globalThis.hlvm.core.io.clipboard.read();\n  }\n  \n  // Validate we have text to work with\n  if (!text || text.trim() === '') {\n    throw new Error('No text to visualize (input is empty and clipboard is empty)');\n  }\n  \n  // 2. Determine diagram type and style\n  const type = options.type || 'auto';\n  const style = options.style || 'simple';\n  const validTypes = ['auto', 'flowchart', 'sequence', 'tree', 'graph', 'mindmap', 'table'];\n  \n  if (!validTypes.includes(type)) {\n    throw new Error(`Invalid type: ${type}. Valid options: ${validTypes.join(', ')}`);\n  }\n  \n  // 3. Build the prompt\n  let systemPrompt = DIAGRAM_PROMPTS[type];\n  if (style === 'detailed') {\n    systemPrompt += '\\nInclude more detail and annotations where helpful.';\n  } else {\n    systemPrompt += '\\nKeep it simple and clean, focusing on key elements only.';\n  }\n  \n  // 4. Get model from options or env\n  let model = options.model || globalThis.hlvm?.env?.get(\"ai.model\") || getDefaultModel();\n  \n  // 5. Ensure model is available (auto-download if needed)\n  await ensureModel(model);\n  \n  // 6. Call Ollama for diagram generation\n  try {\n    const response = await globalThis.hlvm.core.ai.ollama.chat({\n      model,\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: text }\n      ],\n      stream: false,\n      options: {\n        temperature: 0.1,  // Low for consistent output (diagrams need precision)\n        num_predict: 100,  // Small limit to prevent runaway\n        top_p: 0.9,\n        repeat_penalty: 1.0 // Don't penalize repeated characters (needed for diagrams)\n      }\n    });\n    \n    // 7. Extract and clean response\n    let diagram = response.message?.content || '';\n    \n    // Clean up any markdown code blocks the model might add\n    diagram = diagram\n      .replace(/^```[\\w]*\\n/, '')  // Remove opening code block\n      .replace(/\\n```$/, '')        // Remove closing code block\n      .trim();\n    \n    // Validate we got a diagram (should contain box drawing characters)\n    const hasDiagramChars = /[─│┌┐└┘├┤┬┴┼▼▲►◄╭╮╰╯═║╔╗╚╝╠╣╦╩╬]/.test(diagram);\n    if (!hasDiagramChars && diagram.length < 50) {\n      console.warn('Generated output may not be a valid diagram');\n    }\n    \n    return diagram;\n    \n  } catch (error) {\n    // Simple error handling\n    console.error('Failed to generate diagram:', error.message);\n    \n    // If Ollama is not running\n    if (error.message.includes('fetch failed') || error.message.includes('ECONNREFUSED')) {\n      console.error('Ollama service is not running. Start it with: hlvm ollama serve');\n      return '[Ollama not running]';\n    }\n    \n    // Return simple error message\n    return `[Cannot generate diagram]`;\n  }\n}\n\n/**\n * Revises text using AI to improve clarity, grammar, and tone\n * @param {string} input - Text to revise (uses clipboard if empty)\n * @param {Object} [options] - Revision options\n * @param {string} [options.tone='default'] - Tone: default|professional|casual|friendly|concise|formal\n * @returns {Promise<string>} Revised text\n * @example\n * await revise(\"thx for ur help\")\n * // → \"Thank you for your help\"\n * @example\n * await revise(\"hey can u send the files\", {tone: \"professional\"})\n * // → \"Could you please send the files?\"\n * @example\n * await revise() // Revises clipboard content\n * // → [Revised text from clipboard]\n */\nexport async function revise(input, options = {}) {\n  // 1. Get text to revise\n  let text = input;\n  if (!text) {\n    // Use clipboard as default input source\n    text = await globalThis.hlvm.core.io.clipboard.read();\n  }\n  \n  // Validate we have text to work with\n  if (!text || text.trim() === '') {\n    throw new Error('No text to revise (input is empty and clipboard is empty)');\n  }\n  \n  // 2. Determine system prompt based on tone option\n  const tone = options.tone || 'default';\n  const validTones = ['default', 'professional', 'casual', 'friendly', 'concise', 'formal'];\n  \n  if (!validTones.includes(tone)) {\n    throw new Error(`Invalid tone: ${tone}. Valid options: ${validTones.join(', ')}`);\n  }\n  \n  const systemPrompt = SYSTEM_PROMPTS[tone];\n  \n  // 3. Get model from options or env\n  let model = options.model || globalThis.hlvm?.env?.get(\"ai.model\") || getDefaultModel();\n  \n  // 4. Ensure model is available (auto-download if needed)\n  await ensureModel(model);\n  \n  // 5. Call Ollama for revision with streaming\n  try {\n    // Show progress indicator\n    console.log('\\x1b[36m📝 Revising text...\\x1b[0m');\n    \n    const stream = await globalThis.hlvm.core.ai.ollama.chat({\n      model,\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: text }\n      ],\n      stream: true,  // Enable streaming for visual feedback\n      options: {\n        temperature: options.temperature || globalThis.hlvm?.env?.get(\"ai.temperature\") || 0.3,\n        num_predict: globalThis.hlvm?.env?.get(\"ai.max_tokens\") || 2000,\n        top_p: 0.9,       // Slight diversity in word choice\n        repeat_penalty: 1.1 // Avoid repetition\n      }\n    });\n    \n    // 5. Collect streaming response with visual feedback\n    let revised = '';\n    process.stdout.write('\\x1b[32m');  // Green color for revised text\n    \n    for await (const chunk of stream) {\n      if (chunk.message?.content) {\n        process.stdout.write(chunk.message.content);\n        revised += chunk.message.content;\n      }\n    }\n    \n    process.stdout.write('\\x1b[0m\\n');  // Reset color and newline\n    \n    // Clean up any markdown or formatting the model might add\n    revised = revised\n      .replace(/^```[\\w]*\\n/, '')  // Remove opening code block\n      .replace(/\\n```$/, '')        // Remove closing code block\n      .replace(/^[\"']|[\"']$/g, '')  // Remove surrounding quotes\n      .trim();\n    \n    // Sanity check: if revision is empty or too different, return original\n    if (!revised || revised.length === 0) {\n      console.warn('Revision resulted in empty text, returning original');\n      return text;\n    }\n    \n    // If revision is drastically different in length (likely an error), return original\n    const lengthRatio = revised.length / text.length;\n    if (lengthRatio < 0.2 || lengthRatio > 5) {\n      console.warn('Revision length drastically different, returning original');\n      return text;\n    }\n    \n    return revised;\n    \n  } catch (error) {\n    // Log error but don't throw - return original text as fallback\n    console.error('Failed to revise text:', error.message);\n    \n    // If Ollama is not running, provide helpful message\n    if (error.message.includes('fetch failed') || error.message.includes('ECONNREFUSED')) {\n      console.error('Ollama service is not running. Start it with: hlvm ollama serve');\n    }\n    \n    // Return original text as safe fallback\n    return text;\n  }\n}\n\n/**\n * Refactors code using AI to improve quality and apply best practices\n * @param {string} input - Code to refactor (uses clipboard if empty)\n * @param {Object} [options] - Refactoring options\n * @param {string} [options.type='all'] - Type: all|clean|solid|dry|unused|simplify|modern|performance\n * @returns {Promise<string>} Refactored code\n * @example\n * await refactor(messy Code)\n * // → [Clean, well-structured code]\n * @example\n * await refactor(code, {type: \"unused\"})\n * // → [Code with all unused elements removed]\n * @example\n * await refactor() // Refactor clipboard code\n * // → [Refactored code from clipboard]\n */\nexport async function refactor(input, options = {}) {\n  // 1. Get code to refactor\n  let code = input;\n  if (!code) {\n    // Use clipboard as default input source\n    code = await globalThis.hlvm.core.io.clipboard.read();\n  }\n  \n  // Validate we have code to work with\n  if (!code || code.trim() === '') {\n    throw new Error('No code to refactor (input is empty and clipboard is empty)');\n  }\n  \n  // 2. Determine refactoring type\n  const type = options.type || 'all';\n  const validTypes = ['all', 'clean', 'solid', 'dry', 'unused', 'simplify', 'modern', 'performance'];\n  \n  if (!validTypes.includes(type)) {\n    throw new Error(`Invalid type: ${type}. Valid options: ${validTypes.join(', ')}`);\n  }\n  \n  const systemPrompt = REFACTOR_PROMPTS[type];\n  \n  // 3. Get model from options or env\n  let model = options.model || globalThis.hlvm?.env?.get(\"ai.model\") || getDefaultModel();\n  \n  // 4. Ensure model is available (auto-download if needed)\n  await ensureModel(model);\n  \n  // 5. Call Ollama for refactoring\n  try {\n    const response = await globalThis.hlvm.core.ai.ollama.chat({\n      model,\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: code }\n      ],\n      stream: false,\n      options: {\n        temperature: options.temperature || globalThis.hlvm?.env?.get(\"ai.temperature\") || 0.2,\n        num_predict: globalThis.hlvm?.env?.get(\"ai.max_tokens\") || 4000,\n        top_p: 0.95,\n        repeat_penalty: 1.0 // Don't penalize repeated patterns in code\n      }\n    });\n    \n    // 5. Extract and clean response\n    let refactored = response.message?.content || code;\n    \n    // Clean up any markdown code blocks the model might add\n    refactored = refactored\n      .replace(/^```[\\w]*\\n/, '')  // Remove opening code block\n      .replace(/\\n```$/, '')        // Remove closing code block\n      .trim();\n    \n    // Sanity check: if refactoring is empty, return original\n    if (!refactored || refactored.length === 0) {\n      console.warn('Refactoring resulted in empty code, returning original');\n      return code;\n    }\n    \n    return refactored;\n    \n  } catch (error) {\n    // Log error but don't throw - return original code as fallback\n    console.error('Failed to refactor code:', error.message);\n    \n    // If Ollama is not running, provide helpful message\n    if (error.message.includes('fetch failed') || error.message.includes('ECONNREFUSED')) {\n      console.error('Ollama service is not running. Start it with: hlvm ollama serve');\n    }\n    \n    // Return original code as safe fallback\n    return code;\n  }\n}\n\n// Export both functions for use in hlvm.stdlib.ai\n// Initialize documentation for functions\nfunction initializeDocs() {\n  // Setup revise documentation\n  revise.__doc__ = `\\x1b[36mrevise(input?, options?)\\x1b[0m\n\nRevises text using AI to improve clarity, grammar, and tone\n\n\\x1b[33mParameters:\\x1b[0m\n  input: \\x1b[90mstring\\x1b[0m (optional) - Text to revise (uses clipboard if empty)\n  options: \\x1b[90mObject\\x1b[0m (optional) - Revision options\n    tone: 'default'|'professional'|'casual'|'friendly'|'concise'|'formal'\n\n\\x1b[33mReturns:\\x1b[0m Promise<string> - Revised text\n\n\\x1b[33mExamples:\\x1b[0m\n  await revise(\"thx for ur help\")\n  \\x1b[32m// → \"Thank you for your help\"\\x1b[0m\n  \n  await revise(\"hey can u send the files\", {tone: \"professional\"})\n  \\x1b[32m// → \"Could you please send the files?\"\\x1b[0m\n  \n  await revise() // Revises clipboard content\n  \\x1b[32m// → [Revised text from clipboard]\\x1b[0m`;\n  \n  revise[Symbol.for('Deno.customInspect')] = function() {\n    return revise.__doc__;\n  };\n  \n  // Setup draw documentation\n  draw.__doc__ = `\\x1b[36mdraw(input?, options?)\\x1b[0m\n\nCreates ASCII diagrams from text using AI\n\n\\x1b[33mParameters:\\x1b[0m\n  input: \\x1b[90mstring\\x1b[0m (optional) - Text to visualize (uses clipboard if empty)\n  options: \\x1b[90mObject\\x1b[0m (optional) - Drawing options\n    type: 'auto'|'flowchart'|'sequence'|'tree'|'graph'|'mindmap'|'table'\n    style: 'simple'|'detailed'\n\n\\x1b[33mReturns:\\x1b[0m Promise<string> - ASCII diagram\n\n\\x1b[33mExamples:\\x1b[0m\n  await draw(\"login -> validate -> dashboard\")\n  \\x1b[32m// → ┌─────┐    ┌──────────┐    ┌───────────┐\n  //   │login│───▶│ validate │───▶│ dashboard │\n  //   └─────┘    └──────────┘    └───────────┘\\x1b[0m\n  \n  await draw(\"user story steps\", {type: \"sequence\"})\n  \\x1b[32m// → User     System     Database\n  //   │         │           │\n  //   │─login──▶│           │\n  //   │         │──query───▶│\n  //   │         │◀──result──│\\x1b[0m`;\n  \n  draw[Symbol.for('Deno.customInspect')] = function() {\n    return draw.__doc__;\n  };\n  \n  // Setup refactor documentation\n  refactor.__doc__ = `\\x1b[36mrefactor(input?, options?)\\x1b[0m\n\nRefactors code using AI to improve quality, remove redundancy, apply best practices\n\n\\x1b[33mParameters:\\x1b[0m\n  input: \\x1b[90mstring\\x1b[0m (optional) - Code to refactor (uses clipboard if empty)\n  options: \\x1b[90mObject\\x1b[0m (optional) - Refactoring options\n    type: 'all'|'clean'|'solid'|'dry'|'unused'|'simplify'|'modern'|'performance'\n\n\\x1b[33mTypes:\\x1b[0m\n  all        - Comprehensive refactor (default) - applies everything\n  clean      - Apply Clean Code principles, improve naming\n  solid      - Apply SOLID principles, improve design\n  dry        - Remove ALL redundancy and duplication\n  unused     - Remove unused code, imports, variables\n  simplify   - Make code simpler and more readable\n  modern     - Update to modern syntax and patterns\n  performance - Optimize for speed and memory\n\n\\x1b[33mReturns:\\x1b[0m Promise<string> - Refactored code\n\n\\x1b[33mExamples:\\x1b[0m\n  await refactor(uglyCode)  // Default: comprehensive refactor\n  \\x1b[32m// → [Fully refactored code with all improvements]\\x1b[0m\n  \n  await refactor(code, {type: \"unused\"})  // Remove dead code only\n  \\x1b[32m// → [Code with unused elements removed]\\x1b[0m\n  \n  await refactor()  // Refactor clipboard code\n  \\x1b[32m// → [Refactored code from clipboard]\\x1b[0m`;\n  \n  refactor[Symbol.for('Deno.customInspect')] = function() {\n    return refactor.__doc__;\n  };\n}\n\n// Initialize on module load\ninitializeDocs();\n\nexport default {\n  revise,\n  draw,\n  refactor\n};",
  "ai/ollama.js": "// Ollama module - Complete mirror of Ollama API\n// https://github.com/ollama/ollama/blob/main/docs/api.md\n\nconst OLLAMA_HOST = Deno.env.get(\"OLLAMA_HOST\") || \"http://localhost:11434\";\n\n// Helper for streaming responses\nasync function* streamResponse(response) {\n  const reader = response.body.getReader();\n  const decoder = new TextDecoder();\n  let buffer = \"\";\n  \n  while (true) {\n    const { done, value } = await reader.read();\n    if (done) break;\n    \n    buffer += decoder.decode(value, { stream: true });\n    const lines = buffer.split('\\n');\n    buffer = lines.pop() || \"\";\n    \n    for (const line of lines) {\n      if (line.trim()) {\n        try {\n          yield JSON.parse(line);\n        } catch (e) {\n          console.error(\"Failed to parse:\", line);\n        }\n      }\n    }\n  }\n}\n\n// Generic API request handler - DRY principle\nasync function apiRequest(endpoint, method = \"GET\", body = null) {\n  const options = {\n    method,\n    headers: method !== \"GET\" ? { \"Content-Type\": \"application/json\" } : {}\n  };\n  \n  if (body && method !== \"GET\") {\n    options.body = JSON.stringify(body);\n  }\n  \n  const response = await fetch(`${OLLAMA_HOST}/api/${endpoint}`, options);\n  \n  if (!response.ok) {\n    const errorText = await response.text();\n    let message = `Ollama ${endpoint} failed: ${response.statusText}`;\n    try {\n      const parsed = JSON.parse(errorText);\n      if (parsed.error) message = parsed.error;\n    } catch {}\n    throw new Error(message);\n  }\n  \n  return response;\n}\n\n// Handle streaming or JSON response - DRY principle\nasync function handleResponse(response, request) {\n  if (request?.stream === false) {\n    return await response.json();\n  }\n  return response.headers.get(\"content-type\")?.includes(\"application/json\")\n    ? await response.json()\n    : streamResponse(response);\n}\n\n/**\n * Generate a completion from a model\n * @param {Object} request - Generation request\n * @param {string} request.model - Model name (e.g., \"llama3\", \"mistral\")\n * @param {string} request.prompt - Prompt to generate from\n * @param {boolean} [request.stream=true] - Stream response chunks\n * @param {Object} [request.options] - Model options (temperature, num_predict, etc.)\n * @returns {Promise<Object|AsyncGenerator>} Response or stream of responses\n * @example\n * await generate({model: \"llama3\", prompt: \"Why is the sky blue?\"})\n * // → {response: \"The sky appears blue because...\", done: true}\n * @example\n * for await (const chunk of await generate({model: \"llama3\", prompt: \"Hello\", stream: true})) {\n *   process.stdout.write(chunk.response)\n * }\n * // → Streams response word by word\n */\nexport async function generate(request) {\n  const response = await apiRequest(\"generate\", \"POST\", request);\n  return handleResponse(response, request);\n}\n\n/**\n * Chat with a model (conversation with context)\n * @param {Object} request - Chat request\n * @param {string} request.model - Model name\n * @param {Array} request.messages - Message history [{role, content}]\n * @param {boolean} [request.stream=true] - Stream response\n * @param {Object} [request.options] - Model options\n * @returns {Promise<Object|AsyncGenerator>} Response or stream\n * @example\n * await chat({\n *   model: \"llama3\",\n *   messages: [\n *     {role: \"user\", content: \"What is 2+2?\"},\n *     {role: \"assistant\", content: \"4\"},\n *     {role: \"user\", content: \"What about 3+3?\"}\n *   ]\n * })\n * // → {message: {role: \"assistant\", content: \"3+3 equals 6\"}}\n */\nexport async function chat(request) {\n  const response = await apiRequest(\"chat\", \"POST\", request);\n  return handleResponse(response, request);\n}\n\n/**\n * Create a custom model from a Modelfile\n * @param {Object} request - Create request\n * @param {string} request.name - Model name to create\n * @param {string} request.modelfile - Modelfile content\n * @param {boolean} [request.stream=true] - Stream progress\n * @returns {Promise<Object|AsyncGenerator>} Creation status\n * @example\n * await create({\n *   name: \"mario\",\n *   modelfile: \"FROM llama3\\nSYSTEM You are Mario from Nintendo.\"\n * })\n * // → {status: \"success\"}\n */\nexport async function create(request) {\n  const response = await apiRequest(\"create\", \"POST\", request);\n  return handleResponse(response, request);\n}\n\n/**\n * List available models\n * @returns {Promise<Object>} List of models\n * @example\n * await list()\n * // → {models: [{name: \"llama3:latest\", size: 4661224676, digest: \"abc123...\"}]}\n */\nexport async function list() {\n  const response = await apiRequest(\"tags\");\n  return response.json();\n}\n\n/**\n * Show model information and Modelfile\n * @param {Object} request - Show request\n * @param {string} request.name - Model name\n * @returns {Promise<Object>} Model details\n * @example\n * await show({name: \"llama3\"})\n * // → {modelfile: \"FROM llama3...\", parameters: \"...\", template: \"...\"}\n */\nexport async function show(request) {\n  const response = await apiRequest(\"show\", \"POST\", request);\n  return response.json();\n}\n\n/**\n * Copy a model to a new name\n * @param {Object} request - Copy request\n * @param {string} request.source - Source model name\n * @param {string} request.destination - New model name\n * @returns {Promise<boolean>} Success status\n * @example\n * await copy({source: \"llama3\", destination: \"my-llama\"})\n * // → true\n */\nexport async function copy(request) {\n  await apiRequest(\"copy\", \"POST\", request);\n  return true;\n}\n\n/**\n * Delete a model\n * @param {Object} request - Delete request\n * @param {string} request.name - Model name to delete\n * @returns {Promise<boolean>} Success status\n * @example\n * await deleteModel({name: \"my-custom-model\"})\n * // → true\n */\nexport async function deleteModel(request) {\n  await apiRequest(\"delete\", \"DELETE\", request);\n  return true;\n}\n\n/**\n * Pull/download a model from the registry\n * @param {Object} request - Pull request\n * @param {string} request.name - Model name to pull\n * @param {boolean} [request.stream=true] - Stream download progress\n * @returns {Promise<Object|AsyncGenerator>} Download progress or status\n * @example\n * await pull({name: \"llama3\", stream: false})\n * // → {status: \"success\"}\n * @example\n * for await (const progress of await pull({name: \"mistral\"})) {\n *   console.log(`Downloaded: ${progress.completed}/${progress.total}`)\n * }\n * // → Shows download progress\n */\nexport async function pull(request) {\n  const response = await apiRequest(\"pull\", \"POST\", request);\n  return handleResponse(response, request);\n}\n\n/**\n * Push a model to the registry\n * @param {Object} request - Push request\n * @param {string} request.name - Model name to push\n * @param {boolean} [request.stream=true] - Stream upload progress\n * @returns {Promise<Object|AsyncGenerator>} Upload progress or status\n * @example\n * await push({name: \"myorg/mymodel\", stream: false})\n * // → {status: \"success\"}\n */\nexport async function push(request) {\n  const response = await apiRequest(\"push\", \"POST\", request);\n  return handleResponse(response, request);\n}\n\n/**\n * Generate embeddings from text\n * @param {Object} request - Embeddings request\n * @param {string} request.model - Model name\n * @param {string} request.prompt - Text to embed\n * @returns {Promise<Object>} Embedding vector\n * @example\n * await embeddings({model: \"llama3\", prompt: \"Hello world\"})\n * // → {embedding: [0.1, -0.2, 0.3, ...]}\n */\nexport async function embeddings(request) {\n  const response = await apiRequest(\"embeddings\", \"POST\", request);\n  return response.json();\n}\n\n/**\n * List running models\n * @returns {Promise<Object>} Running models info\n * @example\n * await ps()\n * // → {models: [{name: \"llama3\", size: 4661224676, digest: \"abc...\", expires_at: \"...\"}]}\n */\nexport async function ps() {\n  const response = await apiRequest(\"ps\");\n  return response.json();\n}\n\n/**\n * Check if Ollama service is running\n * @returns {Promise<boolean>} True if running\n * @example\n * await isRunning()\n * // → true\n */\nexport async function isRunning() {\n  try {\n    const response = await fetch(`${OLLAMA_HOST}/api/tags`);\n    return response.ok;\n  } catch {\n    return false;\n  }\n}\n\n// Initialize documentation for REPL display\nfunction initializeDocs() {\n  // Setup generate documentation\n  generate.__doc__ = `\\x1b[36mgenerate(request)\\x1b[0m\n\nGenerate a completion from a model\n\n\\x1b[33mParameters:\\x1b[0m\n  request: \\x1b[90mObject\\x1b[0m\n    model: \\x1b[90mstring\\x1b[0m - Model name (e.g., \"llama3\", \"mistral\")\n    prompt: \\x1b[90mstring\\x1b[0m - Prompt to generate from\n    stream: \\x1b[90mboolean\\x1b[0m (optional) - Stream response chunks\n    options: \\x1b[90mObject\\x1b[0m (optional) - Model options\n\n\\x1b[33mReturns:\\x1b[0m Promise<Object|AsyncGenerator>\n\n\\x1b[33mExamples:\\x1b[0m\n  await generate({model: \"llama3\", prompt: \"Why is the sky blue?\"})\n  \\x1b[32m// → {response: \"The sky appears blue because...\", done: true}\\x1b[0m\n  \n  for await (const chunk of await generate({model: \"llama3\", prompt: \"Hello\"})) {\n    process.stdout.write(chunk.response)\n  }\n  \\x1b[32m// → Streams response word by word\\x1b[0m`;\n  \n  generate[Symbol.for('Deno.customInspect')] = function() { return generate.__doc__; };\n\n  // Setup chat documentation\n  chat.__doc__ = `\\x1b[36mchat(request)\\x1b[0m\n\nChat with a model (conversation with context)\n\n\\x1b[33mParameters:\\x1b[0m\n  request: \\x1b[90mObject\\x1b[0m\n    model: \\x1b[90mstring\\x1b[0m - Model name\n    messages: \\x1b[90mArray\\x1b[0m - Message history [{role, content}]\n    stream: \\x1b[90mboolean\\x1b[0m (optional) - Stream response\n    options: \\x1b[90mObject\\x1b[0m (optional) - Model options\n\n\\x1b[33mReturns:\\x1b[0m Promise<Object|AsyncGenerator>\n\n\\x1b[33mExample:\\x1b[0m\n  await chat({\n    model: \"llama3\",\n    messages: [\n      {role: \"user\", content: \"What is 2+2?\"},\n      {role: \"assistant\", content: \"4\"},\n      {role: \"user\", content: \"What about 3+3?\"}\n    ]\n  })\n  \\x1b[32m// → {message: {role: \"assistant\", content: \"3+3 equals 6\"}}\\x1b[0m`;\n  \n  chat[Symbol.for('Deno.customInspect')] = function() { return chat.__doc__; };\n\n  // Setup list documentation\n  list.__doc__ = `\\x1b[36mlist()\\x1b[0m\n\nList available models\n\n\\x1b[33mReturns:\\x1b[0m Promise<Object> - List of models\n\n\\x1b[33mExample:\\x1b[0m\n  await list()\n  \\x1b[32m// → {models: [{name: \"llama3:latest\", size: 4661224676, digest: \"abc123...\"}]}\\x1b[0m`;\n  \n  list[Symbol.for('Deno.customInspect')] = function() { return list.__doc__; };\n\n  // Setup show documentation\n  show.__doc__ = `\\x1b[36mshow(request)\\x1b[0m\n\nShow model information and Modelfile\n\n\\x1b[33mParameters:\\x1b[0m\n  request: \\x1b[90mObject\\x1b[0m\n    name: \\x1b[90mstring\\x1b[0m - Model name\n\n\\x1b[33mReturns:\\x1b[0m Promise<Object> - Model details\n\n\\x1b[33mExample:\\x1b[0m\n  await show({name: \"llama3\"})\n  \\x1b[32m// → {modelfile: \"FROM llama3...\", parameters: \"...\", template: \"...\"}\\x1b[0m`;\n  \n  show[Symbol.for('Deno.customInspect')] = function() { return show.__doc__; };\n\n  // Setup pull documentation\n  pull.__doc__ = `\\x1b[36mpull(request)\\x1b[0m\n\nPull/download a model from the registry\n\n\\x1b[33mParameters:\\x1b[0m\n  request: \\x1b[90mObject\\x1b[0m\n    name: \\x1b[90mstring\\x1b[0m - Model name to pull\n    stream: \\x1b[90mboolean\\x1b[0m (optional) - Stream download progress\n\n\\x1b[33mReturns:\\x1b[0m Promise<Object|AsyncGenerator>\n\n\\x1b[33mExamples:\\x1b[0m\n  await pull({name: \"llama3\", stream: false})\n  \\x1b[32m// → {status: \"success\"}\\x1b[0m\n  \n  for await (const progress of await pull({name: \"mistral\"})) {\n    console.log(\\`Downloaded: \\${progress.completed}/\\${progress.total}\\`)\n  }\n  \\x1b[32m// → Shows download progress\\x1b[0m`;\n  \n  pull[Symbol.for('Deno.customInspect')] = function() { return pull.__doc__; };\n\n  // Setup push documentation\n  push.__doc__ = `\\x1b[36mpush(request)\\x1b[0m\n\nPush a model to the registry\n\n\\x1b[33mParameters:\\x1b[0m\n  request: \\x1b[90mObject\\x1b[0m\n    name: \\x1b[90mstring\\x1b[0m - Model name to push\n    stream: \\x1b[90mboolean\\x1b[0m (optional) - Stream upload progress\n\n\\x1b[33mReturns:\\x1b[0m Promise<Object|AsyncGenerator>\n\n\\x1b[33mExample:\\x1b[0m\n  await push({name: \"myorg/mymodel\", stream: false})\n  \\x1b[32m// → {status: \"success\"}\\x1b[0m`;\n  \n  push[Symbol.for('Deno.customInspect')] = function() { return push.__doc__; };\n\n  // Setup create documentation\n  create.__doc__ = `\\x1b[36mcreate(request)\\x1b[0m\n\nCreate a custom model from a Modelfile\n\n\\x1b[33mParameters:\\x1b[0m\n  request: \\x1b[90mObject\\x1b[0m\n    name: \\x1b[90mstring\\x1b[0m - Model name to create\n    modelfile: \\x1b[90mstring\\x1b[0m - Modelfile content\n    stream: \\x1b[90mboolean\\x1b[0m (optional) - Stream progress\n\n\\x1b[33mReturns:\\x1b[0m Promise<Object|AsyncGenerator>\n\n\\x1b[33mExample:\\x1b[0m\n  await create({\n    name: \"mario\",\n    modelfile: \"FROM llama3\\\\nSYSTEM You are Mario from Nintendo.\"\n  })\n  \\x1b[32m// → {status: \"success\"}\\x1b[0m`;\n  \n  create[Symbol.for('Deno.customInspect')] = function() { return create.__doc__; };\n\n  // Setup copy documentation\n  copy.__doc__ = `\\x1b[36mcopy(request)\\x1b[0m\n\nCopy a model to a new name\n\n\\x1b[33mParameters:\\x1b[0m\n  request: \\x1b[90mObject\\x1b[0m\n    source: \\x1b[90mstring\\x1b[0m - Source model name\n    destination: \\x1b[90mstring\\x1b[0m - New model name\n\n\\x1b[33mReturns:\\x1b[0m Promise<boolean>\n\n\\x1b[33mExample:\\x1b[0m\n  await copy({source: \"llama3\", destination: \"my-llama\"})\n  \\x1b[32m// → true\\x1b[0m`;\n  \n  copy[Symbol.for('Deno.customInspect')] = function() { return copy.__doc__; };\n\n  // Setup deleteModel documentation\n  deleteModel.__doc__ = `\\x1b[36mdeleteModel(request)\\x1b[0m\n\nDelete a model\n\n\\x1b[33mParameters:\\x1b[0m\n  request: \\x1b[90mObject\\x1b[0m\n    name: \\x1b[90mstring\\x1b[0m - Model name to delete\n\n\\x1b[33mReturns:\\x1b[0m Promise<boolean>\n\n\\x1b[33mExample:\\x1b[0m\n  await deleteModel({name: \"my-custom-model\"})\n  \\x1b[32m// → true\\x1b[0m`;\n  \n  deleteModel[Symbol.for('Deno.customInspect')] = function() { return deleteModel.__doc__; };\n\n  // Setup embeddings documentation\n  embeddings.__doc__ = `\\x1b[36membeddings(request)\\x1b[0m\n\nGenerate embeddings from text\n\n\\x1b[33mParameters:\\x1b[0m\n  request: \\x1b[90mObject\\x1b[0m\n    model: \\x1b[90mstring\\x1b[0m - Model name\n    prompt: \\x1b[90mstring\\x1b[0m - Text to embed\n\n\\x1b[33mReturns:\\x1b[0m Promise<Object> - Embedding vector\n\n\\x1b[33mExample:\\x1b[0m\n  await embeddings({model: \"llama3\", prompt: \"Hello world\"})\n  \\x1b[32m// → {embedding: [0.1, -0.2, 0.3, ...]}\\x1b[0m`;\n  \n  embeddings[Symbol.for('Deno.customInspect')] = function() { return embeddings.__doc__; };\n\n  // Setup ps documentation\n  ps.__doc__ = `\\x1b[36mps()\\x1b[0m\n\nList running models\n\n\\x1b[33mReturns:\\x1b[0m Promise<Object> - Running models info\n\n\\x1b[33mExample:\\x1b[0m\n  await ps()\n  \\x1b[32m// → {models: [{name: \"llama3\", size: 4661224676, digest: \"abc...\", expires_at: \"...\"}]}\\x1b[0m`;\n  \n  ps[Symbol.for('Deno.customInspect')] = function() { return ps.__doc__; };\n\n  // Setup isRunning documentation\n  isRunning.__doc__ = `\\x1b[36misRunning()\\x1b[0m\n\nCheck if Ollama service is running\n\n\\x1b[33mReturns:\\x1b[0m Promise<boolean>\n\n\\x1b[33mExample:\\x1b[0m\n  await isRunning()\n  \\x1b[32m// → true\\x1b[0m`;\n  \n  isRunning[Symbol.for('Deno.customInspect')] = function() { return isRunning.__doc__; };\n}\n\n// Initialize on module load\ninitializeDocs();",
  "app/control.js": "// HLVM App Control - Cross-platform application control\n// Provides unified API for controlling applications across macOS, Windows, and Linux\n\n/**\n * Known application mappings for common apps across platforms\n * Maps simple names to platform-specific identifiers\n */\nconst APP_REGISTRY = {\n  // Browsers\n  'safari': {\n    darwin: 'Safari',\n    windows: null, // Not available on Windows\n    linux: null\n  },\n  'chrome': {\n    darwin: 'Google Chrome',\n    windows: 'chrome.exe',\n    linux: 'google-chrome'\n  },\n  'firefox': {\n    darwin: 'Firefox',\n    windows: 'firefox.exe',\n    linux: 'firefox'\n  },\n  'edge': {\n    darwin: 'Microsoft Edge',\n    windows: 'msedge.exe',\n    linux: 'microsoft-edge'\n  },\n  'arc': {\n    darwin: 'Arc',\n    windows: null,\n    linux: null\n  },\n  \n  // IDEs and Editors\n  'vscode': {\n    darwin: 'Visual Studio Code',\n    windows: 'Code.exe',\n    linux: 'code'\n  },\n  'xcode': {\n    darwin: 'Xcode',\n    windows: null,\n    linux: null\n  },\n  'sublime': {\n    darwin: 'Sublime Text',\n    windows: 'sublime_text.exe',\n    linux: 'sublime_text'\n  },\n  'atom': {\n    darwin: 'Atom',\n    windows: 'atom.exe',\n    linux: 'atom'\n  },\n  'intellij': {\n    darwin: 'IntelliJ IDEA',\n    windows: 'idea64.exe',\n    linux: 'idea'\n  },\n  'cursor': {\n    darwin: 'Cursor',\n    windows: 'Cursor.exe',\n    linux: 'cursor'\n  },\n  \n  // Terminals\n  'terminal': {\n    darwin: 'Terminal',\n    windows: 'cmd.exe',\n    linux: 'gnome-terminal'\n  },\n  'iterm': {\n    darwin: 'iTerm',\n    windows: null,\n    linux: null\n  },\n  'warp': {\n    darwin: 'Warp',\n    windows: null,\n    linux: null\n  },\n  'powershell': {\n    darwin: null,\n    windows: 'powershell.exe',\n    linux: 'pwsh'\n  },\n  \n  // Communication\n  'slack': {\n    darwin: 'Slack',\n    windows: 'slack.exe',\n    linux: 'slack'\n  },\n  'discord': {\n    darwin: 'Discord',\n    windows: 'Discord.exe',\n    linux: 'discord'\n  },\n  'zoom': {\n    darwin: 'zoom.us',\n    windows: 'Zoom.exe',\n    linux: 'zoom'\n  },\n  'teams': {\n    darwin: 'Microsoft Teams',\n    windows: 'Teams.exe',\n    linux: 'teams'\n  },\n  'messages': {\n    darwin: 'Messages',\n    windows: null,\n    linux: null\n  },\n  \n  // Productivity\n  'notion': {\n    darwin: 'Notion',\n    windows: 'Notion.exe',\n    linux: 'notion'\n  },\n  'obsidian': {\n    darwin: 'Obsidian',\n    windows: 'Obsidian.exe',\n    linux: 'obsidian'\n  },\n  'notes': {\n    darwin: 'Notes',\n    windows: 'onenote.exe',\n    linux: null\n  },\n  \n  // System Apps\n  'finder': {\n    darwin: 'Finder',\n    windows: 'explorer.exe',\n    linux: 'nautilus'\n  },\n  'explorer': {\n    darwin: 'Finder',\n    windows: 'explorer.exe',\n    linux: 'nautilus'\n  },\n  'settings': {\n    darwin: 'System Settings',\n    windows: 'SystemSettings.exe',\n    linux: 'gnome-control-center'\n  },\n  'preferences': {\n    darwin: 'System Settings',\n    windows: 'SystemSettings.exe',\n    linux: 'gnome-control-center'\n  },\n  \n  // Media\n  'music': {\n    darwin: 'Music',\n    windows: 'iTunes.exe',\n    linux: 'rhythmbox'\n  },\n  'spotify': {\n    darwin: 'Spotify',\n    windows: 'Spotify.exe',\n    linux: 'spotify'\n  },\n  'vlc': {\n    darwin: 'VLC',\n    windows: 'vlc.exe',\n    linux: 'vlc'\n  }\n};\n\n/**\n * Platform abstraction layer\n * Provides unified interface for platform-specific operations\n */\nclass PlatformAdapter {\n  constructor() {\n    this.platform = globalThis.hlvm.core.system.os;\n    this.isDarwin = globalThis.hlvm.core.system.isDarwin;\n    this.isWindows = globalThis.hlvm.core.system.isWindows;\n    this.isLinux = globalThis.hlvm.core.system.isLinux;\n  }\n\n  /**\n   * Resolve app identifier for current platform\n   */\n  resolveAppName(identifier) {\n    // Check if it's a known app alias\n    const lowerName = identifier.toLowerCase();\n    if (APP_REGISTRY[lowerName]) {\n      const mapped = APP_REGISTRY[lowerName][this.platform];\n      if (mapped) return mapped;\n    }\n    \n    // Return as-is if not found in registry\n    return identifier;\n  }\n\n  /**\n   * Execute platform-specific command\n   */\n  async executeCommand(command) {\n    const result = await globalThis.hlvm.core.system.exec(command);\n    return result;\n  }\n\n  /**\n   * List running applications\n   */\n  async listApps() {\n    if (this.isDarwin) {\n      const script = `tell application \"System Events\" to get name of every process whose background only is false`;\n      const result = await this.runAppleScript(script);\n      const trimmed = result.trim();\n      if (!trimmed) return [];\n      return trimmed.split(', ').filter(name => name.length > 0);\n    } \n    else if (this.isWindows) {\n      const command = `powershell -Command \"Get-Process | Where-Object {$_.MainWindowTitle -ne ''} | Select-Object -ExpandProperty ProcessName | Select-Object -Unique\"`;\n      const result = await this.executeCommand(command);\n      return result.stdout.split('\\n').filter(name => name.trim().length > 0);\n    }\n    else if (this.isLinux) {\n      const command = `wmctrl -l | awk '{for(i=4;i<=NF;i++) printf \"%s \", $i; print \"\"}' | sort -u`;\n      const result = await this.executeCommand(command);\n      return result.stdout.split('\\n').filter(name => name.trim().length > 0);\n    }\n    return [];\n  }\n\n  /**\n   * Get frontmost application\n   */\n  async getFrontmost() {\n    if (this.isDarwin) {\n      const script = `tell application \"System Events\" to get name of first process whose frontmost is true`;\n      const name = await this.runAppleScript(script);\n      return name.trim();\n    }\n    else if (this.isWindows) {\n      const command = `powershell -Command \"Add-Type @' \nusing System;\nusing System.Runtime.InteropServices;\npublic class Win32 {\n  [DllImport(\"user32.dll\")]\n  public static extern IntPtr GetForegroundWindow();\n  [DllImport(\"user32.dll\")]\n  public static extern int GetWindowThreadProcessId(IntPtr hWnd, out int lpdwProcessId);\n}\n'@; $hwnd = [Win32]::GetForegroundWindow(); $pid = 0; [Win32]::GetWindowThreadProcessId($hwnd, [ref]$pid); (Get-Process -Id $pid).ProcessName\"`;\n      const result = await this.executeCommand(command);\n      return result.stdout.trim();\n    }\n    else if (this.isLinux) {\n      const command = `xdotool getactivewindow getwindowname`;\n      const result = await this.executeCommand(command);\n      return result.stdout.trim();\n    }\n    return null;\n  }\n\n  /**\n   * Launch application\n   */\n  async launchApp(appName) {\n    if (this.isDarwin) {\n      const script = `tell application \"${appName}\" to launch`;\n      await this.runAppleScript(script);\n    }\n    else if (this.isWindows) {\n      await this.executeCommand(`start \"\" \"${appName}\"`);\n    }\n    else if (this.isLinux) {\n      await this.executeCommand(`${appName} &`);\n    }\n  }\n\n  /**\n   * Activate (bring to front) application\n   */\n  async activateApp(appName) {\n    if (this.isDarwin) {\n      const script = `tell application \"${appName}\" to activate`;\n      await this.runAppleScript(script);\n    }\n    else if (this.isWindows) {\n      // Use PowerShell to activate window\n      const command = `powershell -Command \"(New-Object -ComObject Shell.Application).Windows() | Where-Object {$_.Name -like '*${appName}*'} | ForEach-Object {$_.Visible = $true}\"`;\n      await this.executeCommand(command);\n    }\n    else if (this.isLinux) {\n      await this.executeCommand(`wmctrl -a \"${appName}\"`);\n    }\n  }\n\n  /**\n   * Quit application\n   */\n  async quitApp(appName) {\n    if (this.isDarwin) {\n      const script = `tell application \"${appName}\" to quit`;\n      await this.runAppleScript(script);\n    }\n    else if (this.isWindows) {\n      await this.executeCommand(`taskkill /IM \"${appName}\" /F`);\n    }\n    else if (this.isLinux) {\n      await this.executeCommand(`pkill -f \"${appName}\"`);\n    }\n  }\n\n  /**\n   * Check if application is running\n   */\n  async isAppRunning(appName) {\n    if (this.isDarwin) {\n      const script = `tell application \"System Events\" to (name of processes) contains \"${appName}\"`;\n      const result = await this.runAppleScript(script);\n      return result.trim() === 'true';\n    }\n    else if (this.isWindows) {\n      const command = `tasklist /FI \"IMAGENAME eq ${appName}\" 2>NUL | find /I /N \"${appName}\"`;\n      const result = await this.executeCommand(command);\n      return result.code === 0;\n    }\n    else if (this.isLinux) {\n      const command = `pgrep -f \"${appName}\"`;\n      const result = await this.executeCommand(command);\n      return result.code === 0;\n    }\n    return false;\n  }\n\n  /**\n   * Hide application\n   */\n  async hideApp(appName) {\n    if (this.isDarwin) {\n      const script = `tell application \"System Events\" to set visible of process \"${appName}\" to false`;\n      await this.runAppleScript(script);\n    }\n    else if (this.isWindows) {\n      // Minimize window on Windows\n      const command = `powershell -Command \"(New-Object -ComObject Shell.Application).Windows() | Where-Object {$_.Name -like '*${appName}*'} | ForEach-Object {$_.Minimize()}\"`;\n      await this.executeCommand(command);\n    }\n    else if (this.isLinux) {\n      await this.executeCommand(`xdotool search --name \"${appName}\" windowminimize`);\n    }\n  }\n\n  /**\n   * Show application\n   */\n  async showApp(appName) {\n    if (this.isDarwin) {\n      const script = `tell application \"System Events\" to set visible of process \"${appName}\" to true`;\n      await this.runAppleScript(script);\n    }\n    else if (this.isWindows) {\n      // Restore window on Windows\n      const command = `powershell -Command \"(New-Object -ComObject Shell.Application).Windows() | Where-Object {$_.Name -like '*${appName}*'} | ForEach-Object {$_.Restore()}\"`;\n      await this.executeCommand(command);\n    }\n    else if (this.isLinux) {\n      await this.executeCommand(`xdotool search --name \"${appName}\" windowactivate`);\n    }\n  }\n\n  /**\n   * Send keyboard shortcut to application\n   */\n  async sendKeys(appName, keys) {\n    // First activate the app\n    await this.activateApp(appName);\n    await new Promise(resolve => setTimeout(resolve, 200)); // Small delay\n    \n    if (this.isDarwin) {\n      // Parse the keys for macOS\n      const modifiers = [];\n      const keyParts = keys.toLowerCase().split('+');\n      let mainKey = keyParts[keyParts.length - 1];\n      \n      for (let i = 0; i < keyParts.length - 1; i++) {\n        const mod = keyParts[i];\n        if (mod === 'cmd' || mod === 'command') modifiers.push('command down');\n        if (mod === 'ctrl' || mod === 'control') modifiers.push('control down');\n        if (mod === 'opt' || mod === 'option' || mod === 'alt') modifiers.push('option down');\n        if (mod === 'shift') modifiers.push('shift down');\n      }\n      \n      const modifierString = modifiers.length > 0 ? ` using {${modifiers.join(', ')}}` : '';\n      const script = `tell application \"System Events\" to keystroke \"${mainKey}\"${modifierString}`;\n      await this.runAppleScript(script);\n    }\n    else if (this.isWindows) {\n      // Use SendKeys on Windows\n      const winKeys = keys.replace('cmd', 'ctrl').replace('option', 'alt');\n      const command = `powershell -Command \"$wshell = New-Object -ComObject wscript.shell; $wshell.SendKeys('${winKeys}')\"`;\n      await this.executeCommand(command);\n    }\n    else if (this.isLinux) {\n      // Use xdotool on Linux\n      const linuxKeys = keys.replace('cmd', 'ctrl').replace('option', 'alt');\n      await this.executeCommand(`xdotool key ${linuxKeys.replace('+', '+')}`);\n    }\n  }\n\n  /**\n   * Type text into application\n   */\n  async typeText(appName, text) {\n    await this.activateApp(appName);\n    await new Promise(resolve => setTimeout(resolve, 200));\n    \n    if (this.isDarwin) {\n      const escapedText = text.replace(/\"/g, '\\\\\"');\n      const script = `tell application \"System Events\" to keystroke \"${escapedText}\"`;\n      await this.runAppleScript(script);\n    }\n    else if (this.isWindows) {\n      const escapedText = text.replace(/'/g, \"''\");\n      const command = `powershell -Command \"$wshell = New-Object -ComObject wscript.shell; $wshell.SendKeys('${escapedText}')\"`;\n      await this.executeCommand(command);\n    }\n    else if (this.isLinux) {\n      await this.executeCommand(`xdotool type \"${text}\"`);\n    }\n  }\n\n  /**\n   * macOS-specific: Run AppleScript\n   */\n  async runAppleScript(script) {\n    if (!this.isDarwin) return '';\n    \n    try {\n      // Escape double quotes for the AppleScript\n      const escapedScript = script.replace(/\"/g, '\\\\\"');\n      // Use double quotes for the command to handle single quotes in AppleScript\n      const command = `osascript -e \"${escapedScript}\"`;\n      const result = await this.executeCommand(command);\n      return result.stdout || '';\n    } catch (error) {\n      // Check if it's a harmless error (like app already quit)\n      if (error.message && (error.message.includes('User canceled') || \n          error.message.includes('Application isn\\'t running'))) {\n        return '';\n      }\n      throw error;\n    }\n  }\n}\n\n// Create singleton platform adapter\nconst platform = new PlatformAdapter();\n\n/**\n * Get a handle to an application (cross-platform)\n * @param {string} identifier - App name, alias, or platform-specific identifier\n * @returns {Promise<Object>} App handle with control methods\n */\nexport async function get(identifier) {\n  // Resolve the app name for current platform\n  const appName = platform.resolveAppName(identifier);\n  \n  // Return null if app not available on this platform\n  if (!appName) {\n    console.warn(`App '${identifier}' is not available on ${platform.platform}`);\n    return null;\n  }\n  \n  // Create app handle with methods\n  return {\n    _identifier: appName,\n    _originalName: identifier,\n    \n    /**\n     * Launch the application\n     */\n    async launch() {\n      return await platform.launchApp(appName);\n    },\n    \n    /**\n     * Activate (bring to front) the application\n     */\n    async activate() {\n      return await platform.activateApp(appName);\n    },\n    \n    /**\n     * Quit the application\n     */\n    async quit() {\n      return await platform.quitApp(appName);\n    },\n    \n    /**\n     * Hide the application\n     */\n    async hide() {\n      return await platform.hideApp(appName);\n    },\n    \n    /**\n     * Show/unhide the application\n     */\n    async show() {\n      return await platform.showApp(appName);\n    },\n    \n    /**\n     * Check if application is running\n     */\n    async isRunning() {\n      return await platform.isAppRunning(appName);\n    },\n    \n    /**\n     * Check if application is frontmost (active)\n     */\n    async isFrontmost() {\n      const front = await platform.getFrontmost();\n      return front === appName;\n    },\n    \n    /**\n     * Send keyboard shortcut to the application\n     * @param {string} keys - Keyboard shortcut like \"cmd+s\", \"ctrl+a\"\n     */\n    async sendKeys(keys) {\n      return await platform.sendKeys(appName, keys);\n    },\n    \n    /**\n     * Type text into the application\n     * @param {string} text - Text to type\n     */\n    async type(text) {\n      return await platform.typeText(appName, text);\n    }\n  };\n}\n\n/**\n * List all running applications\n * @returns {Promise<Array>} List of running app names\n */\nexport async function list() {\n  return await platform.listApps();\n}\n\n/**\n * Get the frontmost (active) application\n * @returns {Promise<Object>} App handle for the active app\n */\nexport async function frontmost() {\n  const name = await platform.getFrontmost();\n  if (!name) return null;\n  return get(name);\n}\n\n/**\n * Get list of known app aliases\n * @returns {Array} List of available app aliases\n */\nexport function aliases() {\n  return Object.keys(APP_REGISTRY);\n}\n\n/**\n * Check if an app alias is available on current platform\n * @param {string} alias - App alias to check\n * @returns {boolean} True if available on current platform\n */\nexport function isAvailable(alias) {\n  const lowerName = alias.toLowerCase();\n  if (!APP_REGISTRY[lowerName]) return false;\n  return APP_REGISTRY[lowerName][platform.platform] !== null;\n}\n\nexport default {\n  get,\n  list,\n  frontmost,\n  aliases,\n  isAvailable\n};",
  "computer/context.js": "// Context Module - Captures current system state for developer productivity\n// Provides easy access to clipboard, selection, and screen content\n\nimport * as clipboardModule from \"../io/clipboard.js\";\nimport * as screenModule from \"./screen.js\";\nimport * as system from \"../core/system.js\";\n\n// Helper to get selected text\n// Uses multiple strategies depending on platform\nasync function getSelectedText() {\n  try {\n    // Strategy 1: Try to get selection via OS commands\n    if (Deno.build.os === \"darwin\") {\n      // On macOS, try using osascript to get selection from frontmost app\n      try {\n        const result = await system.exec(\n          `osascript -e 'tell application \"System Events\" to keystroke \"c\" using command down' && pbpaste`\n        );\n        if (result.success && result.stdout.trim()) {\n          return result.stdout.trim();\n        }\n      } catch {\n        // Fall through to next strategy\n      }\n    } else if (Deno.build.os === \"linux\") {\n      // On Linux, try xclip or xsel for primary selection\n      try {\n        const result = await system.exec(\"xclip -o -selection primary 2>/dev/null || xsel -o -p 2>/dev/null\");\n        if (result.success && result.stdout.trim()) {\n          return result.stdout.trim();\n        }\n      } catch {\n        // Fall through to next strategy\n      }\n    } else if (Deno.build.os === \"windows\") {\n      // On Windows, selection is harder to get directly\n      // Fall through to clipboard strategy\n    }\n    \n    // Strategy 2: Return null if no selection available\n    // This is better than returning stale clipboard data\n    return null;\n  } catch (error) {\n    console.error(\"Failed to get selection:\", error.message);\n    return null;\n  }\n}\n\n// Extract text from image using OCR\n// This is a placeholder - real implementation would use Vision framework on macOS,\n// Tesseract on Linux, or Windows OCR APIs\nasync function extractTextFromImage(imageData) {\n  try {\n    if (Deno.build.os === \"darwin\") {\n      // Save image temporarily and use macOS Vision framework via shortcuts or swift\n      const tempPath = `/tmp/hlvm_ocr_${Date.now()}.png`;\n      await Deno.writeFile(tempPath, imageData);\n      \n      // Try using shortcuts cli if available\n      const result = await system.exec(\n        `shortcuts run \"Extract Text from Image\" -i \"${tempPath}\" 2>/dev/null || echo \"\"`\n      );\n      \n      // Clean up temp file\n      try { await Deno.remove(tempPath); } catch {}\n      \n      if (result.success && result.stdout.trim()) {\n        return result.stdout.trim();\n      }\n    }\n    \n    // For now, return placeholder for other platforms\n    // Real implementation would integrate with Tesseract or other OCR\n    return \"[OCR not available on this platform yet]\";\n  } catch (error) {\n    console.error(\"OCR failed:\", error.message);\n    return \"\";\n  }\n}\n\n// Context namespace - provides current state\nexport const context = {\n  // Get currently selected text\n  get selection() {\n    // This is synchronous but internally uses cached async result\n    // For now, we'll make it async and users need to await\n    return getSelectedText();\n  },\n  \n  // Screen context object\n  screen: {\n    // Get current screen as image data - SYNCHRONOUS\n    get image() {\n      try {\n        // Capture to temp file and read as bytes\n        const tempPath = `/tmp/hlvm_screen_${Date.now()}.png`;\n        \n        // Use screencapture command directly for sync operation\n        if (Deno.build.os === \"darwin\") {\n          const p = new Deno.Command(\"screencapture\", {\n            args: [\"-x\", \"-C\", tempPath] // -x: no sound, -C: capture cursor\n          });\n          const output = p.outputSync();\n          if (!output.success) {\n            throw new Error(\"Screen capture failed\");\n          }\n        } else if (Deno.build.os === \"linux\") {\n          // Try various Linux screenshot tools\n          const tools = [\n            { cmd: \"import\", args: [\"-window\", \"root\", tempPath] }, // ImageMagick\n            { cmd: \"scrot\", args: [tempPath] },\n            { cmd: \"gnome-screenshot\", args: [\"-f\", tempPath] }\n          ];\n          \n          let captured = false;\n          for (const tool of tools) {\n            try {\n              const p = new Deno.Command(tool.cmd, { args: tool.args });\n              const output = p.outputSync();\n              if (output.success) {\n                captured = true;\n                break;\n              }\n            } catch {\n              // Try next tool\n            }\n          }\n          \n          if (!captured) {\n            throw new Error(\"No screenshot tool available\");\n          }\n        } else if (Deno.build.os === \"windows\") {\n          // Windows: Use PowerShell screenshot\n          const script = `\n            Add-Type -AssemblyName System.Windows.Forms\n            Add-Type -AssemblyName System.Drawing\n            $screen = [System.Windows.Forms.SystemInformation]::VirtualScreen\n            $bitmap = New-Object System.Drawing.Bitmap $screen.Width, $screen.Height\n            $graphics = [System.Drawing.Graphics]::FromImage($bitmap)\n            $graphics.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size)\n            $bitmap.Save('${tempPath}')\n          `;\n          const p = new Deno.Command(\"powershell\", {\n            args: [\"-NoProfile\", \"-Command\", script]\n          });\n          const output = p.outputSync();\n          if (!output.success) {\n            throw new Error(\"Screen capture failed\");\n          }\n        }\n        \n        // Read the captured image\n        const imageData = Deno.readFileSync(tempPath);\n        \n        // Clean up temp file\n        try { Deno.removeSync(tempPath); } catch {}\n        \n        return imageData;\n      } catch (error) {\n        console.error(\"Failed to capture screen:\", error.message);\n        return new Uint8Array();\n      }\n    },\n    \n    // Get text from current screen via OCR\n    get text() {\n      try {\n        // Get screen image first\n        const imageData = this.image;\n        if (imageData.length === 0) return \"\";\n        \n        // Extract text via OCR (this would be async in real implementation)\n        // For now return a sync placeholder\n        return \"[Screen text extraction pending implementation]\";\n      } catch (error) {\n        console.error(\"Failed to extract screen text:\", error.message);\n        return \"\";\n      }\n    }\n  }\n};\n\n// Make selection truly async since it needs to run commands\nObject.defineProperty(context, 'selection', {\n  get() {\n    return getSelectedText();\n  },\n  enumerable: true,\n  configurable: false\n});\n\n// Re-export for convenience\nexport default context;",
  "computer/keyboard.js": "// Keyboard module - Cross-platform keyboard automation with unified array format\n// Array format: [\"cmd\", \"shift\", \"a\"] where last element is the key, rest are modifiers\n\nimport * as platform from \"../core/platform.js\";\nimport { escapeKeyboard, powershell, linuxTool, PS, ERRORS } from \"../core/platform.js\";\n\n// Global keyboard event listeners storage\nconst keyListeners = new Map();\n\nexport async function type(text) {\n  const escapedText = escapeKeyboard(text);\n  \n  if (platform.isDarwin) {\n    // macOS: osascript (built-in)\n    const script = `tell application \"System Events\" to keystroke \"${escapedText}\"`;\n    const result = await new Deno.Command(\"osascript\", { args: [\"-e\", script] }).output();\n    if (!result.success) {\n      const error = new TextDecoder().decode(result.stderr);\n      if (error.includes(\"not allowed to send keystrokes\")) {\n        throw new Error(\"Keyboard control requires accessibility permissions. Go to System Settings → Privacy & Security → Accessibility and add your terminal app.\");\n      }\n      throw new Error(`Keyboard type failed: ${error}`);\n    }\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell SendKeys (built-in)\n    const script = `\n      ${PS.forms}\n      [System.Windows.Forms.SendKeys]::SendWait(\"${escapedText}\")\n    `;\n    await powershell(script);\n    \n  } else {\n    // Linux: Try xdotool or ydotool\n    await linuxTool(\n      [\"type\", text], // xdotool args\n      [\"type\", text], // ydotool args\n      ERRORS.LINUX_TOOLS\n    );\n  }\n}\n\n// Key mappings for cross-platform support\nconst KEY_MAP = {\n  // Common keys\n  \"enter\": { \n    darwin: \"return\", \n    windows: \"{ENTER}\", \n    linux: \"Return\" \n  },\n  \"return\": { \n    darwin: \"return\", \n    windows: \"{ENTER}\", \n    linux: \"Return\" \n  },\n  \"tab\": { \n    darwin: \"tab\", \n    windows: \"{TAB}\", \n    linux: \"Tab\" \n  },\n  \"delete\": { \n    darwin: \"delete\", \n    windows: \"{DEL}\", \n    linux: \"Delete\" \n  },\n  \"backspace\": { \n    darwin: \"delete\", \n    windows: \"{BACKSPACE}\", \n    linux: \"BackSpace\" \n  },\n  \"escape\": { \n    darwin: \"escape\", \n    windows: \"{ESC}\", \n    linux: \"Escape\" \n  },\n  \"esc\": { \n    darwin: \"escape\", \n    windows: \"{ESC}\", \n    linux: \"Escape\" \n  },\n  \"space\": { \n    darwin: \"space\", \n    windows: \" \", \n    linux: \"space\" \n  },\n  \"up\": { \n    darwin: \"up arrow\", \n    windows: \"{UP}\", \n    linux: \"Up\" \n  },\n  \"down\": { \n    darwin: \"down arrow\", \n    windows: \"{DOWN}\", \n    linux: \"Down\" \n  },\n  \"left\": { \n    darwin: \"left arrow\", \n    windows: \"{LEFT}\", \n    linux: \"Left\" \n  },\n  \"right\": { \n    darwin: \"right arrow\", \n    windows: \"{RIGHT}\", \n    linux: \"Right\" \n  },\n  \"home\": { \n    darwin: \"home\", \n    windows: \"{HOME}\", \n    linux: \"Home\" \n  },\n  \"end\": { \n    darwin: \"end\", \n    windows: \"{END}\", \n    linux: \"End\" \n  },\n  \"pageup\": { \n    darwin: \"page up\", \n    windows: \"{PGUP}\", \n    linux: \"Page_Up\" \n  },\n  \"pagedown\": { \n    darwin: \"page down\", \n    windows: \"{PGDN}\", \n    linux: \"Page_Down\" \n  }\n};\n\n// Helper to normalize keys array\nfunction normalizeKeys(keys) {\n  // Only accept array format\n  if (!Array.isArray(keys)) {\n    throw new Error('Keyboard functions require array format: [\"cmd\", \"s\"] or [\"enter\"]');\n  }\n  \n  // Normalize modifier names\n  return keys.map(k => {\n    const lower = k.toLowerCase();\n    // Normalize common variations\n    if (lower === 'command' || lower === 'meta' || lower === 'super') return 'cmd';\n    if (lower === 'control') return 'ctrl';\n    if (lower === 'option') return 'alt';\n    return lower;\n  });\n}\n\n// Get string representation of keys for Map key\nfunction getKeyString(keys) {\n  const normalized = normalizeKeys(keys);\n  return normalized.sort().join('+');\n}\n\n// Updated press function that accepts array format only\nexport async function press(keys) {\n  // Only array format is supported\n  const normalized = normalizeKeys(keys);\n  \n  // Extract key and modifiers from normalized array\n  const key = normalized[normalized.length - 1];\n  const modifiers = normalized.slice(0, -1);\n  \n  // Normalize key name\n  const normalizedKey = key.toLowerCase();\n  const keyMapping = KEY_MAP[normalizedKey] || {\n    darwin: key,\n    windows: key,\n    linux: key\n  };\n  \n  if (platform.isDarwin) {\n    // macOS: osascript with modifiers\n    const mods = [];\n    if (modifiers.includes('cmd')) mods.push(\"command down\");\n    if (modifiers.includes('ctrl')) mods.push(\"control down\");\n    if (modifiers.includes('alt')) mods.push(\"option down\");\n    if (modifiers.includes('shift')) mods.push(\"shift down\");\n    \n    const keyName = keyMapping.darwin;\n    const script = mods.length > 0\n      ? `tell application \"System Events\" to keystroke \"${keyName}\" using {${mods.join(\", \")}}`\n      : `tell application \"System Events\" to keystroke \"${keyName}\"`;\n    \n    const result = await new Deno.Command(\"osascript\", { args: [\"-e\", script] }).output();\n    if (!result.success) {\n      const error = new TextDecoder().decode(result.stderr);\n      if (error.includes(\"not allowed to send keystrokes\")) {\n        throw new Error(\"Keyboard control requires accessibility permissions. Go to System Settings → Privacy & Security → Accessibility and add your terminal app.\");\n      }\n      throw new Error(`Keyboard press failed: ${error}`);\n    }\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell SendKeys with modifiers\n    let keysStr = \"\";\n    if (modifiers.includes('ctrl')) keysStr += \"^\";\n    if (modifiers.includes('alt')) keysStr += \"%\";\n    if (modifiers.includes('shift')) keysStr += \"+\";\n    keysStr += keyMapping.windows;\n    \n    const script = `\n      ${PS.forms}\n      [System.Windows.Forms.SendKeys]::SendWait(\"${keysStr}\")\n    `;\n    await powershell(script);\n    \n  } else {\n    // Linux: xdotool or ydotool\n    const linuxKeys = [];\n    if (modifiers.includes('ctrl')) linuxKeys.push(\"ctrl\");\n    if (modifiers.includes('alt')) linuxKeys.push(\"alt\");\n    if (modifiers.includes('shift')) linuxKeys.push(\"shift\");\n    if (modifiers.includes('cmd')) linuxKeys.push(\"super\");\n    linuxKeys.push(keyMapping.linux);\n    \n    await linuxTool(\n      [\"key\", linuxKeys.join(\"+\")], // xdotool args\n      [\"key\", ...linuxKeys], // ydotool args\n      ERRORS.LINUX_TOOLS\n    );\n  }\n}\n\n// Register a global keyboard shortcut listener\nexport function onKeyPress(keys, callback) {\n  const keyString = getKeyString(keys);\n  \n  // Store the callback\n  if (!keyListeners.has(keyString)) {\n    keyListeners.set(keyString, []);\n  }\n  keyListeners.get(keyString).push(callback);\n  \n  // Platform-specific global hotkey registration would go here\n  // For now, this is a stub that stores the callbacks for future implementation\n  \n  if (platform.isDarwin) {\n    // TODO: Use native macOS APIs or a tool like hammerspoon\n    console.warn('Global keyboard shortcuts not yet implemented. Callback registered for future use.');\n  } else if (platform.isWindows) {\n    // TODO: Use Windows hooks or AutoHotkey\n    console.warn('Global keyboard shortcuts not yet implemented. Callback registered for future use.');\n  } else {\n    // TODO: Use X11 or Wayland APIs\n    console.warn('Global keyboard shortcuts not yet implemented. Callback registered for future use.');\n  }\n  \n  return true;\n}\n\n// Unregister a global keyboard shortcut listener\nexport function offKeyPress(keys, callback) {\n  const keyString = getKeyString(keys);\n  \n  if (!keyListeners.has(keyString)) {\n    return false;\n  }\n  \n  const callbacks = keyListeners.get(keyString);\n  \n  if (callback) {\n    // Remove specific callback\n    const index = callbacks.indexOf(callback);\n    if (index > -1) {\n      callbacks.splice(index, 1);\n    }\n    \n    // Clean up if no callbacks left\n    if (callbacks.length === 0) {\n      keyListeners.delete(keyString);\n    }\n  } else {\n    // Remove all callbacks for this key combination\n    keyListeners.delete(keyString);\n  }\n  \n  // Platform-specific deregistration would go here\n  \n  return true;\n}\n\n// List all registered keyboard shortcuts\nexport function listKeyListeners() {\n  const result = [];\n  for (const [keyString, callbacks] of keyListeners.entries()) {\n    result.push({\n      keys: keyString.split('+'),\n      callbackCount: callbacks.length\n    });\n  }\n  return result;\n}",
  "computer/mouse.js": "// Mouse module - Cross-platform mouse automation\n\nimport { runPlatformCommand } from \"../core/command.js\";\nimport { PS } from \"../core/platform.js\";\n\nexport async function move(x, y) {\n  await runPlatformCommand({\n    mac: {\n      cmd: \"cliclick\",\n      args: [`m:${x},${y}`],\n      fallback: {\n        cmd: \"python3\",\n        args: [\"-c\", `\nimport Quartz\nQuartz.CGWarpMouseCursorPosition((${x}, ${y}))\n        `]\n      }\n    },\n    windows: {\n      script: `\n        ${PS.forms}\n        [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point(${x}, ${y})\n      `\n    },\n    linux: {\n      xdotool: [\"mousemove\", String(x), String(y)],\n      ydotool: [\"mousemove\", String(x), String(y)],\n      errorMsg: \"Mouse move failed. Install xdotool (X11) or ydotool (Wayland)\"\n    }\n  });\n}\n\nexport async function click(x = null, y = null, button = \"left\") {\n  // Move to position if specified\n  if (x !== null && y !== null) {\n    await move(x, y);\n  }\n  \n  const buttonMap = {\n    linux: { \"left\": \"1\", \"middle\": \"2\", \"right\": \"3\" },\n    mac: { \"left\": \"c\", \"right\": \"rc\", \"middle\": \"mc\" }\n  };\n  \n  await runPlatformCommand({\n    mac: {\n      cmd: \"cliclick\",\n      args: x !== null && y !== null \n        ? [`${buttonMap.mac[button]}:${x},${y}`]\n        : [buttonMap.mac[button]],\n      fallback: {\n        cmd: \"python3\",\n        args: [\"-c\", `\nimport Quartz\nimport time\n\n# Get current position if not specified\n${x === null ? `\npos = Quartz.NSEvent.mouseLocation()\nx, y = pos.x, pos.y\n` : `x, y = ${x}, ${y}`}\n\n# Create mouse events\nbutton_map = {\n  \"left\": Quartz.kCGMouseButtonLeft,\n  \"right\": Quartz.kCGMouseButtonRight,\n  \"middle\": Quartz.kCGMouseButtonCenter\n}\n\nevent_down = {\n  \"left\": Quartz.kCGEventLeftMouseDown,\n  \"right\": Quartz.kCGEventRightMouseDown,\n  \"middle\": Quartz.kCGEventOtherMouseDown\n}\n\nevent_up = {\n  \"left\": Quartz.kCGEventLeftMouseUp,\n  \"right\": Quartz.kCGEventRightMouseUp,\n  \"middle\": Quartz.kCGEventOtherMouseUp\n}\n\nbutton_type = button_map.get(\"${button}\", button_map[\"left\"])\ndown_type = event_down.get(\"${button}\", event_down[\"left\"])\nup_type = event_up.get(\"${button}\", event_up[\"left\"])\n\nevent = Quartz.CGEventCreateMouseEvent(None, down_type, (x, y), button_type)\nQuartz.CGEventPost(Quartz.kCGHIDEventTap, event)\n\nevent = Quartz.CGEventCreateMouseEvent(None, up_type, (x, y), button_type)\nQuartz.CGEventPost(Quartz.kCGHIDEventTap, event)\n        `]\n      }\n    },\n    windows: {\n      script: `\n        Add-Type @\"\n          using System;\n          using System.Runtime.InteropServices;\n          public class Mouse {\n            [DllImport(\"user32.dll\")]\n            public static extern void mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);\n          }\n\"@\n        \n        ${x !== null && y !== null ? `\n        ${PS.forms}\n        [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point(${x}, ${y})\n        ` : \"\"}\n        \n        $flags = @{\n          left = @{ down = 0x0002; up = 0x0004 }\n          right = @{ down = 0x0008; up = 0x0010 }\n          middle = @{ down = 0x0020; up = 0x0040 }\n        }\n        \n        $buttonFlags = $flags[\"${button}\"]\n        if (-not $buttonFlags) { $buttonFlags = $flags.left }\n        \n        [Mouse]::mouse_event($buttonFlags.down, 0, 0, 0, 0)\n        [Mouse]::mouse_event($buttonFlags.up, 0, 0, 0, 0)\n      `\n    },\n    linux: {\n      xdotool: x !== null && y !== null \n        ? [\"mousemove\", String(x), String(y), \"click\", buttonMap.linux[button] || \"1\"]\n        : [\"click\", buttonMap.linux[button] || \"1\"],\n      ydotool: x !== null && y !== null\n        ? [\"mousemove\", String(x), String(y), \"click\", buttonMap.linux[button] || \"1\"]\n        : [\"click\", buttonMap.linux[button] || \"1\"],\n      errorMsg: \"Mouse click failed. Install xdotool (X11) or ydotool (Wayland)\"\n    }\n  });\n}\n\nexport async function position() {\n  const result = await runPlatformCommand({\n    mac: {\n      cmd: \"cliclick\",\n      args: [\"p\"],\n      fallback: {\n        cmd: \"python3\",\n        args: [\"-c\", `\nimport Quartz\npos = Quartz.NSEvent.mouseLocation()\nprint(f\"{int(pos.x)},{int(pos.y)}\")\n        `]\n      }\n    },\n    windows: {\n      script: `\n        ${PS.forms}\n        $pos = [System.Windows.Forms.Cursor]::Position\n        Write-Host \"$($pos.X),$($pos.Y)\"\n      `\n    },\n    linux: {\n      cmd: \"xdotool\",\n      args: [\"getmouselocation\"],\n      fallback: [\n        { cmd: \"ydotool\", args: [\"mousemove\", \"--get\"] }\n      ],\n      errorMsg: \"Mouse position failed. Install xdotool (X11) or ydotool (Wayland)\"\n    }\n  });\n  \n  // Parse position from result\n  if (typeof result === 'string') {\n    const output = result.trim();\n    \n    // Linux xdotool format: \"x:123 y:456 ...\"\n    if (output.includes(\"x:\") && output.includes(\"y:\")) {\n      const x = parseInt(output.match(/x:(\\d+)/)?.[1] || \"0\");\n      const y = parseInt(output.match(/y:(\\d+)/)?.[1] || \"0\");\n      return { x, y };\n    }\n    \n    // Common format: \"123,456\"\n    if (output.includes(\",\")) {\n      const [x, y] = output.split(\",\").map(n => parseInt(n));\n      return { x, y };\n    }\n    \n    // ydotool format: \"123 456\"\n    const parts = output.split(\" \").map(n => parseInt(n));\n    if (parts.length >= 2) {\n      return { x: parts[0], y: parts[1] };\n    }\n  }\n  \n  throw new Error(\"Failed to get mouse position\");\n}\n\n// Double click\nexport async function doubleClick(x = null, y = null) {\n  await click(x, y);\n  await new Promise(r => setTimeout(r, 50)); // Small delay\n  await click(x, y);\n}\n\n// Drag from one position to another\nexport async function drag(fromX, fromY, toX, toY) {\n  await runPlatformCommand({\n    mac: {\n      cmd: \"cliclick\",\n      args: [`dd:${fromX},${fromY}`, `du:${toX},${toY}`],\n      fallback: async () => {\n        await move(fromX, fromY);\n        await click(fromX, fromY);\n        await move(toX, toY);\n        await click(toX, toY);\n      }\n    },\n    windows: {\n      script: `\n        Add-Type @\"\n          using System;\n          using System.Runtime.InteropServices;\n          public class Mouse {\n            [DllImport(\"user32.dll\")]\n            public static extern void mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);\n          }\n\"@\n        ${PS.forms}\n        \n        # Move to start position\n        [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point(${fromX}, ${fromY})\n        # Mouse down\n        [Mouse]::mouse_event(0x0002, 0, 0, 0, 0)\n        # Move to end position\n        [System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point(${toX}, ${toY})\n        # Mouse up\n        [Mouse]::mouse_event(0x0004, 0, 0, 0, 0)\n      `\n    },\n    linux: {\n      xdotool: [\"mousemove\", String(fromX), String(fromY), \"mousedown\", \"1\",\n                \"mousemove\", String(toX), String(toY), \"mouseup\", \"1\"],\n      ydotool: [\"mousemove\", String(fromX), String(fromY), \"mousedown\", \"1\",\n                \"mousemove\", String(toX), String(toY), \"mouseup\", \"1\"],\n      fallback: async () => {\n        await move(fromX, fromY);\n        await click(fromX, fromY);\n        await move(toX, toY);\n        await click(toX, toY);\n      }\n    }\n  });\n}",
  "computer/notification.js": "// Notification module - Cross-platform UI dialogs and notifications\n\nimport * as platform from \"../core/platform.js\";\nimport { escapeShell, decode, powershell, PS, ERRORS } from \"../core/platform.js\";\n\n// DRY: Generic Linux dialog handler\nasync function linuxDialog(type, message, title, defaultValue = \"\") {\n  const tools = [\n    {\n      cmd: \"zenity\",\n      args: {\n        alert: [\"--info\", \"--text\", message, \"--title\", title],\n        confirm: [\"--question\", \"--text\", message, \"--title\", title],\n        prompt: [\"--entry\", \"--text\", message, \"--title\", title, ...(defaultValue ? [\"--entry-text\", defaultValue] : [])]\n      }\n    },\n    {\n      cmd: \"kdialog\",\n      args: {\n        alert: [\"--msgbox\", message, \"--title\", title],\n        confirm: [\"--yesno\", message, \"--title\", title],\n        prompt: [\"--inputbox\", message, defaultValue, \"--title\", title]\n      }\n    }\n  ];\n  \n  for (const tool of tools) {\n    try {\n      const result = await new Deno.Command(tool.cmd, {\n        args: tool.args[type]\n      }).output();\n      \n      if (type === \"alert\") return;\n      if (type === \"confirm\") return result.code === 0;\n      if (type === \"prompt\") return result.code === 0 ? decode(result.stdout).trim() : null;\n    } catch {\n      // Try next tool\n    }\n  }\n  \n  // Fallback\n  if (type === \"alert\") {\n    await notify(message, title);\n  } else {\n    console.error(ERRORS.LINUX_DIALOG);\n    return type === \"confirm\" ? false : null;\n  }\n}\n\n// DRY: Generic osascript handler\nasync function osascriptDialog(type, message, title, defaultValue = \"\") {\n  const escapedMessage = escapeShell(message);\n  const escapedTitle = escapeShell(title);\n  const escapedDefault = escapeShell(defaultValue);\n  \n  const scripts = {\n    alert: `display alert \"${escapedTitle}\" message \"${escapedMessage}\"`,\n    confirm: `\n      button returned of (display dialog \"${escapedMessage}\" ¬\n        with title \"${escapedTitle}\" ¬\n        buttons {\"Cancel\", \"OK\"} ¬\n        default button \"OK\")\n    `,\n    prompt: `\n      text returned of (display dialog \"${escapedMessage}\" ¬\n        with title \"${escapedTitle}\" ¬\n        default answer \"${escapedDefault}\" ¬\n        buttons {\"Cancel\", \"OK\"} ¬\n        default button \"OK\")\n    `\n  };\n  \n  try {\n    const result = await new Deno.Command(\"osascript\", { \n      args: [\"-e\", scripts[type]] \n    }).output();\n    \n    if (type === \"alert\") return;\n    if (type === \"confirm\") return decode(result.stdout).trim() === \"OK\";\n    if (type === \"prompt\") return decode(result.stdout).trim();\n  } catch {\n    return type === \"confirm\" ? false : null;\n  }\n}\n\n// DRY: Generic PowerShell dialog handler\nasync function windowsDialog(type, message, title, defaultValue = \"\") {\n  const escapedMessage = escapeShell(message);\n  const escapedTitle = escapeShell(title);\n  const escapedDefault = escapeShell(defaultValue);\n  \n  const scripts = {\n    alert: `\n      ${PS.forms}\n      [System.Windows.Forms.MessageBox]::Show(\"${escapedMessage}\", \"${escapedTitle}\")\n    `,\n    confirm: `\n      ${PS.forms}\n      $result = [System.Windows.Forms.MessageBox]::Show(\n        \"${escapedMessage}\", \n        \"${escapedTitle}\", \n        [System.Windows.Forms.MessageBoxButtons]::YesNo\n      )\n      if ($result -eq [System.Windows.Forms.DialogResult]::Yes) {\n        Write-Host \"true\"\n      } else {\n        Write-Host \"false\"\n      }\n    `,\n    prompt: `\n      ${PS.visualBasic}\n      $result = [Microsoft.VisualBasic.Interaction]::InputBox(\n        \"${escapedMessage}\", \n        \"${escapedTitle}\", \n        \"${escapedDefault}\"\n      )\n      if ($result -eq \"\") {\n        if ($LastExitCode -eq 0) { Write-Host \"\" }\n      } else {\n        Write-Host $result\n      }\n    `\n  };\n  \n  const { stdout } = await powershell(scripts[type]);\n  \n  if (type === \"alert\") return;\n  if (type === \"confirm\") return decode(stdout).trim() === \"true\";\n  if (type === \"prompt\") return decode(stdout).trim();\n}\n\n// Public API - Now much cleaner\nexport async function alert(message, title = \"Alert\") {\n  if (platform.isDarwin) {\n    return osascriptDialog(\"alert\", message, title);\n  } else if (platform.isWindows) {\n    return windowsDialog(\"alert\", message, title);\n  } else {\n    return linuxDialog(\"alert\", message, title);\n  }\n}\n\nexport async function confirm(message, title = \"Confirm\") {\n  if (platform.isDarwin) {\n    return osascriptDialog(\"confirm\", message, title);\n  } else if (platform.isWindows) {\n    return windowsDialog(\"confirm\", message, title);\n  } else {\n    return linuxDialog(\"confirm\", message, title);\n  }\n}\n\nexport async function prompt(message, defaultValue = \"\", title = \"Input\") {\n  if (platform.isDarwin) {\n    return osascriptDialog(\"prompt\", message, title, defaultValue);\n  } else if (platform.isWindows) {\n    return windowsDialog(\"prompt\", message, title, defaultValue);\n  } else {\n    return linuxDialog(\"prompt\", message, title, defaultValue);\n  }\n}\n\nexport async function notify(message, title = \"Notification\", subtitle = \"\") {\n  const escapedMessage = escapeShell(message);\n  const escapedTitle = escapeShell(title);\n  \n  if (platform.isDarwin) {\n    let script = `display notification \"${escapedMessage}\" with title \"${escapedTitle}\"`;\n    if (subtitle) {\n      script += ` subtitle \"${escapeShell(subtitle)}\"`;\n    }\n    await new Deno.Command(\"osascript\", { args: [\"-e\", script] }).output();\n    \n  } else if (platform.isWindows) {\n    // Windows toast notification\n    try {\n      const script = `\n        [Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime] | Out-Null\n        [Windows.Data.Xml.Dom.XmlDocument, Windows.Data.Xml.Dom.XmlDocument, ContentType = WindowsRuntime] | Out-Null\n        \n        $template = @\"\n        <toast>\n          <visual>\n            <binding template=\"ToastGeneric\">\n              <text>${escapedTitle}</text>\n              <text>${escapedMessage}</text>\n            </binding>\n          </visual>\n        </toast>\n\"@\n        $xml = New-Object Windows.Data.Xml.Dom.XmlDocument\n        $xml.LoadXml($template)\n        $toast = New-Object Windows.UI.Notifications.ToastNotification $xml\n        [Windows.UI.Notifications.ToastNotificationManager]::CreateToastNotifier(\"HLVM\").Show($toast)\n      `;\n      await powershell(script);\n    } catch {\n      await alert(message, title);\n    }\n    \n  } else {\n    // Linux notify-send\n    try {\n      await new Deno.Command(\"notify-send\", {\n        args: [title, message]\n      }).output();\n    } catch {\n      console.error(ERRORS.LINUX_NOTIFY);\n    }\n  }\n}",
  "computer/screen.js": "// Screen module - Cross-platform screen capture\n\nimport * as platform from \"../core/platform.js\";\n\nexport async function capture(output = null, options = {}) {\n  // Use platform-specific temp file if no output specified\n  if (!output) {\n    const tempDir = platform.tempDir();\n    const timestamp = Date.now();\n    output = `${tempDir}${platform.pathSep}screenshot-${timestamp}.png`;\n  }\n  \n  if (platform.isDarwin) {\n    // macOS: screencapture (built-in)\n    const args = [\"-x\"]; // No sound\n    \n    if (options.interactive) {\n      args.push(\"-i\"); // Interactive mode (user selects window)\n    }\n    if (options.selection || options.select) {\n      args.push(\"-s\"); // Selection mode (user draws rectangle)\n    }\n    if (options.window) {\n      args.push(\"-w\"); // Window selection mode\n    }\n    if (options.delay) {\n      args.push(\"-T\", String(options.delay)); // Delay in seconds\n    }\n    \n    args.push(output);\n    \n    const { success } = await new Deno.Command(\"screencapture\", { args }).output();\n    if (!success) throw new Error(\"Screenshot failed\");\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell screenshot (built-in)\n    const script = `\n      Add-Type -AssemblyName System.Windows.Forms\n      Add-Type -AssemblyName System.Drawing\n      \n      $screen = [System.Windows.Forms.Screen]::PrimaryScreen\n      $bounds = $screen.Bounds\n      $bitmap = New-Object System.Drawing.Bitmap($bounds.Width, $bounds.Height)\n      $graphics = [System.Drawing.Graphics]::FromImage($bitmap)\n      $graphics.CopyFromScreen($bounds.Location, [System.Drawing.Point]::Empty, $bounds.Size)\n      $bitmap.Save(\"${output.replace(/\\\\/g, '\\\\\\\\')}\")\n      $graphics.Dispose()\n      $bitmap.Dispose()\n    `;\n    \n    const { success } = await new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", script]\n    }).output();\n    if (!success) throw new Error(\"Screenshot failed\");\n    \n  } else {\n    // Linux: Try multiple screenshot tools\n    const tools = [\n      {\n        cmd: \"scrot\",\n        args: options.selection ? [\"-s\", output] : [output]\n      },\n      {\n        cmd: \"gnome-screenshot\",\n        args: options.selection \n          ? [\"-a\", \"-f\", output]\n          : [\"-f\", output]\n      },\n      {\n        cmd: \"spectacle\",\n        args: options.selection\n          ? [\"-r\", \"-b\", \"-n\", \"-o\", output]\n          : [\"-b\", \"-n\", \"-o\", output]\n      },\n      {\n        cmd: \"import\", // ImageMagick\n        args: [output]\n      }\n    ];\n    \n    let captured = false;\n    for (const tool of tools) {\n      try {\n        const { success } = await new Deno.Command(tool.cmd, {\n          args: tool.args\n        }).output();\n        if (success) {\n          captured = true;\n          break;\n        }\n      } catch {\n        // Try next tool\n      }\n    }\n    \n    if (!captured) {\n      throw new Error(\n        \"Screenshot failed. Install one of: scrot, gnome-screenshot, spectacle, or imagemagick\"\n      );\n    }\n  }\n  \n  return output;\n}\n\n// Get screen dimensions (cross-platform)\nexport async function getScreenSize() {\n  if (platform.isDarwin) {\n    // macOS: Use system_profiler\n    const { stdout } = await new Deno.Command(\"system_profiler\", {\n      args: [\"SPDisplaysDataType\", \"-json\"]\n    }).output();\n    \n    try {\n      const data = JSON.parse(new TextDecoder().decode(stdout));\n      const display = data.SPDisplaysDataType[0].spdisplays_ndrvs[0];\n      const resolution = display._spdisplays_resolution.match(/(\\d+) x (\\d+)/);\n      if (resolution) {\n        return {\n          width: parseInt(resolution[1]),\n          height: parseInt(resolution[2])\n        };\n      }\n    } catch {}\n    \n  } else if (platform.isWindows) {\n    // Windows: Use PowerShell\n    const script = `\n      Add-Type -AssemblyName System.Windows.Forms\n      $screen = [System.Windows.Forms.Screen]::PrimaryScreen\n      Write-Host \"$($screen.Bounds.Width),$($screen.Bounds.Height)\"\n    `;\n    \n    const { stdout } = await new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", script]\n    }).output();\n    \n    const [width, height] = new TextDecoder().decode(stdout).trim().split(\",\");\n    return {\n      width: parseInt(width),\n      height: parseInt(height)\n    };\n    \n  } else {\n    // Linux: Try xrandr or xdpyinfo\n    try {\n      const { stdout } = await new Deno.Command(\"xrandr\", {\n        args: [\"--current\"]\n      }).output();\n      \n      const output = new TextDecoder().decode(stdout);\n      const match = output.match(/primary (\\d+)x(\\d+)/);\n      if (match) {\n        return {\n          width: parseInt(match[1]),\n          height: parseInt(match[2])\n        };\n      }\n    } catch {\n      try {\n        const { stdout } = await new Deno.Command(\"xdpyinfo\").output();\n        const output = new TextDecoder().decode(stdout);\n        const match = output.match(/dimensions:\\s+(\\d+)x(\\d+)/);\n        if (match) {\n          return {\n            width: parseInt(match[1]),\n            height: parseInt(match[2])\n          };\n        }\n      } catch {}\n    }\n  }\n  \n  // Fallback\n  return { width: 1920, height: 1080 };\n}",
  "core/async-spinner.js": "// HLVM Async Spinner - Shows progress for long-running async operations\n\nlet spinnerTimeout = null;\nlet spinnerInterval = null;\nlet spinnerActive = false;\n\n// Simple animated dots\nfunction startSpinner() {\n  if (spinnerActive) return;\n  spinnerActive = true;\n  \n  const dots = ['   ', '.  ', '.. ', '...'];\n  let i = 0;\n  \n  spinnerInterval = setInterval(() => {\n    process.stdout.write(`\\r\\x1b[36m⏳ Processing${dots[i++ % 4]}\\x1b[0m`);\n  }, 300);\n}\n\nfunction stopSpinner() {\n  if (spinnerTimeout) {\n    clearTimeout(spinnerTimeout);\n    spinnerTimeout = null;\n  }\n  \n  if (spinnerInterval) {\n    clearInterval(spinnerInterval);\n    spinnerInterval = null;\n  }\n  \n  if (spinnerActive) {\n    spinnerActive = false;\n    process.stdout.write('\\r\\x1b[K'); // Clear line\n  }\n}\n\n// Wrap Promise.prototype.then to show spinner for slow async ops\nexport function enableAsyncSpinner() {\n  const originalThen = Promise.prototype.then;\n  \n  Promise.prototype.then = function(onFulfilled, onRejected) {\n    // Only show spinner if operation takes longer than 100ms\n    if (!spinnerActive && !spinnerTimeout) {\n      spinnerTimeout = setTimeout(() => {\n        startSpinner();\n      }, 100);\n    }\n    \n    // Wrap callbacks to stop spinner when done\n    const wrappedFulfilled = onFulfilled && function(value) {\n      stopSpinner();\n      return onFulfilled(value);\n    };\n    \n    const wrappedRejected = onRejected && function(reason) {\n      stopSpinner();\n      return onRejected(reason);\n    };\n    \n    return originalThen.call(this, wrappedFulfilled, wrappedRejected);\n  };\n}\n\nexport default { enableAsyncSpinner };",
  "core/command.js": "// Unified cross-platform command execution\n// Eliminates duplicate platform detection across modules\n\nimport { isDarwin, isWindows, isLinux, decode, powershell, linuxTool } from \"./platform.js\";\n\n/**\n * Execute platform-specific commands with automatic OS detection\n * @param {Object} commands - Object with mac, windows, linux command configs\n * @returns {Promise<any>} Command output\n */\nexport async function runPlatformCommand(commands) {\n  if (isDarwin && commands.mac) {\n    return await runMacCommand(commands.mac);\n  } else if (isWindows && commands.windows) {\n    return await runWindowsCommand(commands.windows);\n  } else if (isLinux && commands.linux) {\n    return await runLinuxCommand(commands.linux);\n  }\n  throw new Error(`Unsupported platform or missing command configuration`);\n}\n\nasync function runMacCommand(config) {\n  const { cmd = \"osascript\", args = [], script, fallback } = config;\n  \n  try {\n    if (script) {\n      const result = await new Deno.Command(cmd, {\n        args: [...args, \"-e\", script]\n      }).output();\n      \n      if (config.decode !== false) {\n        return decode(result.stdout);\n      }\n      return result;\n    }\n    \n    const result = await new Deno.Command(cmd, { args }).output();\n    if (!result.success && fallback) {\n      throw new Error(\"Primary command failed\");\n    }\n    \n    if (config.decode !== false && result.stdout) {\n      return decode(result.stdout);\n    }\n    return result;\n  } catch (error) {\n    if (fallback) {\n      // Handle fallback - can be a function or command config\n      if (typeof fallback === 'function') {\n        return await fallback();\n      }\n      return await runMacCommand(fallback);\n    }\n    throw error;\n  }\n}\n\nasync function runWindowsCommand(config) {\n  const { script, decode: shouldDecode = true } = config;\n  \n  if (script) {\n    const result = await powershell(script);\n    if (shouldDecode) {\n      return decode(result.stdout);\n    }\n    return result;\n  }\n  \n  throw new Error(\"Windows command requires a script\");\n}\n\nasync function runLinuxCommand(config) {\n  const { xdotool, ydotool, fallback, errorMsg, cmd, args } = config;\n  \n  // Use specific command if provided\n  if (cmd) {\n    try {\n      const result = await new Deno.Command(cmd, { args: args || [] }).output();\n      if (!result.success && fallback) {\n        throw new Error(\"Primary command failed\");\n      }\n      if (config.decode !== false) {\n        return decode(result.stdout);\n      }\n      return result;\n    } catch (error) {\n      if (fallback) {\n        // Handle fallback - can be function, array, or single command\n        if (typeof fallback === 'function') {\n          return await fallback();\n        }\n        if (Array.isArray(fallback)) {\n          for (const fb of fallback) {\n            try {\n              const result = await new Deno.Command(fb.cmd, { args: fb.args }).output();\n              if (config.decode !== false) {\n                return decode(result.stdout);\n              }\n              return result;\n            } catch {\n              continue;\n            }\n          }\n          throw new Error(errorMsg || \"No Linux command available\");\n        }\n        // Single fallback command\n        return await runLinuxCommand(fallback);\n      }\n      throw error;\n    }\n  }\n  \n  // Use xdotool/ydotool fallback pattern\n  if (xdotool && ydotool) {\n    const result = await linuxTool(xdotool, ydotool, errorMsg);\n    if (config.decode !== false) {\n      return decode(result.stdout);\n    }\n    return result;\n  }\n  \n  // Use fallback if no primary command\n  if (fallback) {\n    if (typeof fallback === 'function') {\n      return await fallback();\n    }\n    if (Array.isArray(fallback)) {\n      for (const fb of fallback) {\n        try {\n          const result = await new Deno.Command(fb.cmd, { args: fb.args }).output();\n          if (config.decode !== false) {\n            return decode(result.stdout);\n          }\n          return result;\n        } catch {\n          continue;\n        }\n      }\n    }\n    throw new Error(errorMsg || \"No Linux command available\");\n  }\n  \n  throw new Error(\"Linux command configuration required\");\n}\n\n/**\n * Simple command runner that returns decoded text by default\n */\nexport async function runCommand(cmd, args = []) {\n  const result = await new Deno.Command(cmd, { args }).output();\n  return decode(result.stdout);\n}\n\n/**\n * Check if a command exists on the system\n */\nexport async function commandExists(cmd) {\n  try {\n    const checkCmd = isWindows ? \"where\" : \"which\";\n    await new Deno.Command(checkCmd, { args: [cmd] }).output();\n    return true;\n  } catch {\n    return false;\n  }\n}",
  "core/database.js": "// Database module - Cross-platform SQLite persistence\n\nimport { DatabaseSync } from \"node:sqlite\";  // Works in compiled binaries!\nimport * as platform from \"./platform.js\";\nimport { notifyModulesChanged, notifyEvent } from \"./notifier.js\";\n\n// Module configuration\nclass ModuleConfig {\n  static get dbPath() {\n    if (platform.isDarwin) {\n      return `${platform.homeDir()}/Library/Application Support/HLVM/HLVM.sqlite`;\n    } else if (platform.isWindows) {\n      const appData = Deno.env.get(\"APPDATA\") || `${platform.homeDir()}\\\\AppData\\\\Roaming`;\n      return `${appData}\\\\HLVM\\\\HLVM.sqlite`;\n    } else {\n      const xdgData = Deno.env.get(\"XDG_DATA_HOME\") || `${platform.homeDir()}/.local/share`;\n      return `${xdgData}/HLVM/HLVM.sqlite`;\n    }\n  }\n\n  static get dbDir() {\n    const path = this.dbPath;\n    return path.substring(0, path.lastIndexOf(platform.isWindows ? \"\\\\\" : \"/\"));\n  }\n\n  static get modulesDir() {\n    return `${this.dbDir}${platform.pathSep}modules`;\n  }\n}\n\n// Database manager\nclass DatabaseManager {\n  constructor() {\n    this.path = ModuleConfig.dbPath;\n    this.dbDir = ModuleConfig.dbDir;\n    this.modulesDir = ModuleConfig.modulesDir;\n    this.db = null;\n    this.esbuild = null;\n  }\n\n  async init() {\n    // Ensure directories exist\n    await Deno.mkdir(this.dbDir, { recursive: true });\n    await Deno.mkdir(this.modulesDir, { recursive: true });\n\n    // Open database with WAL mode\n    this.db = new DatabaseSync(this.path);\n    this.db.exec(\"PRAGMA journal_mode=WAL\");\n\n    // Initialize schema\n    await this.initSchema();\n\n    // Try to load esbuild for bundling\n    try {\n      this.esbuild = await import(\"https://deno.land/x/esbuild@0.20.0/mod.js\");\n    } catch {\n      // esbuild not available - bundling will be disabled\n    }\n  }\n\n  async initSchema() {\n    const tableInfo = this.db.prepare(\"PRAGMA table_info(modules)\").all();\n    const hasSourceCode = tableInfo.some(col => col.name === 'source_code');\n    const hasFilePath = tableInfo.some(col => col.name === 'file_path');\n\n    if (hasSourceCode && !hasFilePath) {\n      await this.migrateFromOldSchema();\n    } else if (!hasSourceCode && !hasFilePath) {\n      this.createNewSchema();\n    }\n  }\n\n  async migrateFromOldSchema() {\n    console.log(\"Migrating HLVM database to new schema...\");\n    \n    this.db.exec(`\n      CREATE TABLE IF NOT EXISTS modules_new (\n        key TEXT PRIMARY KEY,\n        namespace TEXT NOT NULL,\n        file_path TEXT NOT NULL,\n        entry_point TEXT DEFAULT 'default',\n        metadata TEXT DEFAULT '{}',\n        type TEXT DEFAULT 'javascript',\n        updated_at INTEGER NOT NULL,\n        spotlight BOOLEAN DEFAULT 1\n      )\n    `);\n    \n    const oldModules = this.db.prepare(\"SELECT * FROM modules\").all();\n    for (const mod of oldModules) {\n      const fileName = `${mod.key}.module.js`;\n      const filePath = `${this.modulesDir}${platform.pathSep}${fileName}`;\n      await Deno.writeTextFile(filePath, mod.source_code);\n      \n      this.db.prepare(`\n        INSERT INTO modules_new (key, namespace, file_path, entry_point, metadata, type, updated_at, spotlight)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n      `).run(mod.key, mod.namespace, `modules/${fileName}`, 'default', mod.metadata, mod.type, mod.updated_at, mod.spotlight);\n    }\n    \n    this.db.exec(\"DROP TABLE modules\");\n    this.db.exec(\"ALTER TABLE modules_new RENAME TO modules\");\n    console.log(\"Migration complete!\");\n  }\n\n  createNewSchema() {\n    this.db.exec(`\n      CREATE TABLE IF NOT EXISTS modules (\n        key TEXT PRIMARY KEY,\n        namespace TEXT NOT NULL,\n        file_path TEXT NOT NULL,\n        entry_point TEXT DEFAULT 'default',\n        metadata TEXT DEFAULT '{}',\n        type TEXT DEFAULT 'javascript',\n        updated_at INTEGER NOT NULL,\n        spotlight BOOLEAN DEFAULT 1\n      )\n    `);\n  }\n}\n\n// Module bundler\nclass ModuleBundler {\n  constructor(esbuild) {\n    this.esbuild = esbuild;\n  }\n\n  isFilePath(input) {\n    try {\n      const stat = Deno.statSync(input);\n      return stat.isFile;\n    } catch {\n      return input.includes('/') || input.endsWith('.js') || input.endsWith('.ts');\n    }\n  }\n\n  async bundle(codeOrPath) {\n    if (!this.esbuild) {\n      // Fallback without bundling\n      const isPath = this.isFilePath(codeOrPath);\n      if (isPath) {\n        return await Deno.readTextFile(codeOrPath);\n      }\n      return typeof codeOrPath === 'function' \n        ? `export default ${codeOrPath.toString()}`\n        : codeOrPath;\n    }\n    \n    const isPath = this.isFilePath(codeOrPath);\n    \n    try {\n      const result = await this.esbuild.build({\n        entryPoints: isPath ? [codeOrPath] : undefined,\n        stdin: !isPath ? {\n          contents: typeof codeOrPath === 'function' \n            ? `export default ${codeOrPath.toString()}`\n            : codeOrPath,\n          loader: 'js',\n          resolveDir: Deno.cwd(),\n        } : undefined,\n        bundle: true,\n        format: 'esm',\n        platform: 'browser',\n        target: 'esnext',\n        write: false,\n      });\n      \n      if (result.errors.length > 0) {\n        const error = result.errors[0];\n        throw new Error(`${error.text} at ${error.location?.file || 'input'}:${error.location?.line || 0}`);\n      }\n      \n      await this.esbuild.stop();\n      return result.outputFiles[0].text;\n    } catch (error) {\n      error.type = this.getErrorType(error.message);\n      throw error;\n    }\n  }\n\n  getErrorType(message) {\n    if (message.includes('Could not resolve')) return 'import';\n    if (message.includes('Syntax') || message.includes('Unexpected')) return 'syntax';\n    return 'bundle';\n  }\n}\n\n// Module operations\nclass ModuleOperations {\n  constructor(dbManager, bundler) {\n    this.dbManager = dbManager;\n    this.bundler = bundler;\n  }\n\n  async save(name, codeOrPath) {\n    try {\n      const bundled = await this.bundler.bundle(codeOrPath);\n      const hasDefaultFunction = this.hasDefaultExport(bundled);\n      \n      // Save file\n      const fileName = `${name}.module.js`;\n      const filePath = `${this.dbManager.modulesDir}${platform.pathSep}${fileName}`;\n      await Deno.writeTextFile(filePath, bundled);\n      \n      // Save metadata\n      const metadata = this.createMetadata(hasDefaultFunction);\n      this.saveToDatabase(name, fileName, hasDefaultFunction, metadata);\n      \n      await notifyModulesChanged();\n      return true;\n    } catch (error) {\n      await this.handleSaveError(name, error);\n      throw error;\n    }\n  }\n\n  hasDefaultExport(code) {\n    return code.includes('export default function') || \n           code.includes('export default async function');\n  }\n\n  createMetadata(hasDefaultFunction) {\n    return JSON.stringify({\n      hasDefaultFunction,\n      createdAt: new Date().toISOString(),\n      platform: platform.os,\n      bundled: true,\n      isUserModule: true\n    });\n  }\n\n  saveToDatabase(name, fileName, hasDefaultFunction, metadata) {\n    const namespace = `hlvm.${name}`;\n    const entryPoint = hasDefaultFunction ? 'default' : 'script';\n    \n    this.dbManager.db.prepare(`\n      INSERT OR REPLACE INTO modules \n      (key, namespace, file_path, entry_point, metadata, type, updated_at, spotlight)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    `).run(name, namespace, `modules/${fileName}`, entryPoint, metadata, 'javascript', Date.now(), 1);\n  }\n\n  async handleSaveError(name, error) {\n    console.error(`❌ Failed to save '${name}': ${error.message}`);\n    await notifyEvent('module.bundle.failed', {\n      name,\n      error: error.message,\n      type: error.type || 'unknown'\n    });\n  }\n\n  async load(name) {\n    try {\n      const module = this.getModule(name);\n      if (!module) throw new Error(`Module '${name}' not found`);\n      \n      const code = await this.readModuleCode(module);\n      const imported = await this.importModule(name, code);\n      \n      return imported.default || imported;\n    } catch (e) {\n      throw new Error(`Load failed: ${e.message}`);\n    }\n  }\n\n  getModule(name) {\n    return this.dbManager.db.prepare(\"SELECT * FROM modules WHERE key = ?\").get(name);\n  }\n\n  async readModuleCode(module) {\n    const filePath = `${this.dbManager.dbDir}${platform.pathSep}${module.file_path}`;\n    return await Deno.readTextFile(filePath);\n  }\n\n  async importModule(name, code) {\n    const tempDir = platform.tempDir();\n    const tempFile = `${tempDir}${platform.pathSep}hlvm-module-${name}-${Date.now()}.js`;\n    await Deno.writeTextFile(tempFile, code);\n    \n    const imported = await import(`file://${tempFile}`);\n    \n    // Clean up after import\n    setTimeout(() => Deno.remove(tempFile).catch(() => {}), 1000);\n    \n    return imported;\n  }\n\n  async getSource(name) {\n    try {\n      const module = this.getModule(name);\n      if (!module) throw new Error(`Module '${name}' not found`);\n      \n      return await this.readModuleCode(module);\n    } catch (e) {\n      throw new Error(`Get source failed: ${e.message}`);\n    }\n  }\n\n  list() {\n    try {\n      const modules = this.dbManager.db.prepare(`\n        SELECT key, namespace, file_path, entry_point, type, updated_at, spotlight \n        FROM modules \n        WHERE spotlight = 1 \n        ORDER BY updated_at DESC\n      `).all();\n      \n      return modules.map(m => ({\n        key: m.key,\n        namespace: m.namespace,\n        filePath: m.file_path,\n        entryPoint: m.entry_point,\n        type: m.type,\n        updatedAt: new Date(m.updated_at)\n      }));\n    } catch (e) {\n      return [];\n    }\n  }\n\n  async remove(name) {\n    try {\n      const module = this.getModule(name);\n      \n      if (module) {\n        const filePath = `${this.dbManager.dbDir}${platform.pathSep}${module.file_path}`;\n        await Deno.remove(filePath).catch(() => {});\n      }\n      \n      this.dbManager.db.prepare(\"DELETE FROM modules WHERE key = ?\").run(name);\n      await notifyModulesChanged();\n      \n      return true;\n    } catch (e) {\n      throw new Error(`Remove failed: ${e.message}`);\n    }\n  }\n}\n\n// Initialize and export\nconst dbManager = new DatabaseManager();\nawait dbManager.init();\n\nconst bundler = new ModuleBundler(dbManager.esbuild);\nconst operations = new ModuleOperations(dbManager, bundler);\n\n// Export public API\nexport const path = dbManager.path;\nexport const db = dbManager.db;\nexport const save = (name, codeOrPath) => operations.save(name, codeOrPath);\nexport const load = (name) => operations.load(name);\nexport const getSource = (name) => operations.getSource(name);\nexport const list = () => operations.list();\nexport const remove = (name) => operations.remove(name);",
  "core/env.js": "// HLVM Environment Settings - Persistent configuration\n// Uses existing database infrastructure\n\nimport { db } from \"./database.js\";\n\n// Essential defaults - only critical parameters\nconst DEFAULTS = {\n  'ai.model': 'qwen2.5-coder:1.5b',\n  'ollama.host': '127.0.0.1:11434',\n  'ai.temperature': 0.7,\n  'ai.max_tokens': 4000\n};\n\n// Create env table on module load\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS hlvm_env (\n    key TEXT PRIMARY KEY,\n    value TEXT NOT NULL,\n    updated_at INTEGER NOT NULL\n  )\n`);\n\nexport function get(key) {\n  const row = db.prepare('SELECT value FROM hlvm_env WHERE key = ?').get(key);\n  if (row) {\n    // Parse numbers for numeric settings\n    if (key === 'ai.temperature' || key === 'ai.max_tokens') {\n      return parseFloat(row.value);\n    }\n    return row.value;\n  }\n  return DEFAULTS[key];\n}\n\nexport function set(key, value) {\n  db.prepare(`\n    INSERT OR REPLACE INTO hlvm_env (key, value, updated_at) \n    VALUES (?, ?, ?)\n  `).run(key, String(value), Date.now());\n  console.log(`✓ Set ${key} = ${value}`);\n  return value;\n}\n\nexport function show() {\n  const current = db.prepare('SELECT * FROM hlvm_env ORDER BY key').all();\n  \n  console.log('\\nHLVM Environment:');\n  console.log('─'.repeat(40));\n  \n  // Show current settings\n  if (current.length > 0) {\n    current.forEach(row => {\n      console.log(`${row.key}: ${row.value}`);\n    });\n  } else {\n    console.log('(no custom settings)');\n  }\n  \n  // Show available defaults not yet set\n  console.log('\\nAvailable settings:');\n  Object.entries(DEFAULTS).forEach(([key, value]) => {\n    if (!current.find(r => r.key === key)) {\n      console.log(`${key}: ${value} (default)`);\n    }\n  });\n  \n  console.log('\\nUsage:');\n  console.log('  hlvm.env.set(\"ai.model\", \"codellama:7b\")');\n  console.log('  hlvm.env.get(\"ai.model\")');\n}\n\nexport function list() {\n  const all = db.prepare('SELECT * FROM hlvm_env ORDER BY key').all();\n  return Object.fromEntries(all.map(row => [row.key, row.value]));\n}\n\nexport function reset(key) {\n  if (key) {\n    db.prepare('DELETE FROM hlvm_env WHERE key = ?').run(key);\n    console.log(`✓ Reset ${key} to default`);\n  } else {\n    db.prepare('DELETE FROM hlvm_env').run();\n    console.log('✓ Reset all settings to defaults');\n  }\n}\n\nexport default {\n  get,\n  set,\n  show,\n  list,\n  reset\n};",
  "core/event.js": "// HLVM Core Event System - Observe functions, properties, and files\n// Smart observation API that detects what you're trying to observe\n\n// Store all active observers\nconst observers = new Map();\nconst fileWatchers = new Map();\n\n/**\n * Observe function calls, property changes, or file modifications\n * @param {string} target - Path to observe (hlvm.*, file path, or pattern)\n * @param {Object} hooks - Observation hooks\n * @param {Function} [hooks.before] - Called before function execution\n * @param {Function} [hooks.after] - Called after function execution  \n * @param {Function} [hooks.error] - Called on function error\n * @param {Function} [hooks.onChange] - Called on property/file change\n * @returns {boolean} True if observer was added successfully\n * @example\n * // Observe function calls\n * hlvm.core.event.observe('hlvm.core.io.fs.write', {\n *   before: (args) => console.log('Writing:', args[0]),\n *   after: (result) => console.log('Wrote successfully')\n * })\n * @example\n * // Observe file changes\n * hlvm.core.event.observe('/tmp/watch.txt', {\n *   onChange: (event) => console.log('File changed:', event.kind)\n * })\n * @example  \n * // Observe pattern (all fs functions)\n * hlvm.core.event.observe('hlvm.core.io.fs.*', {\n *   before: (args, path) => console.log(`Calling ${path}:`, args)\n * })\n */\nexport function observe(target, hooks) {\n  if (typeof target !== 'string') {\n    throw new Error('Target must be a string path');\n  }\n  \n  // Detect what type of target this is\n  if (isFilePath(target)) {\n    return observeFile(target, hooks);\n  }\n  \n  if (target.includes('*')) {\n    return observePattern(target, hooks);\n  }\n  \n  if (target.startsWith('hlvm.')) {\n    return observeHlvmPath(target, hooks);\n  }\n  \n  throw new Error(`Cannot observe: ${target}`);\n}\n\n/**\n * Stop observing a target or all targets\n * @param {string} [target] - Path to stop observing. If omitted, removes ALL observers\n * @returns {number|boolean} Count of removed observers (if no target) or success boolean\n * @example\n * // Remove specific observer\n * hlvm.core.event.unobserve('hlvm.core.io.fs.write')\n * @example\n * // Remove all observers\n * const count = hlvm.core.event.unobserve()\n * console.log(`Removed ${count} observers`)\n */\nexport function unobserve(target) {\n  // If no target, remove ALL observers\n  if (target === undefined) {\n    let count = 0;\n    \n    // Remove all function/property observers\n    for (const [path] of observers) {\n      if (unobserve(path)) count++;\n    }\n    \n    // Remove all file watchers\n    for (const [path] of fileWatchers) {\n      if (unobserve(path)) count++;\n    }\n    \n    return count;\n  }\n  \n  // Remove specific observer\n  if (observers.has(target)) {\n    const observer = observers.get(target);\n    \n    // Restore original function if it was wrapped\n    if (observer.type === 'function' && observer.original) {\n      const parts = target.split('.');\n      let obj = globalThis;\n      \n      for (let i = 0; i < parts.length - 1; i++) {\n        obj = obj[parts[i]];\n      }\n      \n      obj[parts[parts.length - 1]] = observer.original;\n    }\n    \n    // Remove property descriptor if it was modified\n    if (observer.type === 'property' && observer.descriptor) {\n      const parts = target.split('.');\n      let obj = globalThis;\n      \n      for (let i = 0; i < parts.length - 1; i++) {\n        obj = obj[parts[i]];\n      }\n      \n      Object.defineProperty(obj, parts[parts.length - 1], observer.descriptor);\n    }\n    \n    observers.delete(target);\n    return true;\n  }\n  \n  // Remove file watcher\n  if (fileWatchers.has(target)) {\n    const watcher = fileWatchers.get(target);\n    watcher.close();\n    fileWatchers.delete(target);\n    return true;\n  }\n  \n  // Remove pattern observers\n  if (target.includes('*')) {\n    let removed = false;\n    for (const [key, observer] of observers) {\n      if (observer.pattern === target) {\n        unobserve(key);\n        removed = true;\n      }\n    }\n    return removed;\n  }\n  \n  return false;\n}\n\n// Helper: Check if string is a file path\nfunction isFilePath(str) {\n  return str.startsWith('/') || \n         str.startsWith('./') || \n         str.startsWith('../') ||\n         str.startsWith('~') ||\n         (str.includes('.') && !str.startsWith('hlvm.'));\n}\n\n// Helper: Observe a file for changes\nfunction observeFile(path, hooks) {\n  if (!hooks.onChange) {\n    throw new Error('File observation requires onChange hook');\n  }\n  \n  // Use Deno.watchFs for file watching\n  const watcher = Deno.watchFs(path);\n  \n  // Store watcher for cleanup\n  fileWatchers.set(path, watcher);\n  \n  // Start watching in background\n  (async () => {\n    try {\n      for await (const event of watcher) {\n        if (event.kind === 'modify' || event.kind === 'create') {\n          await hooks.onChange(event, path);\n        }\n      }\n    } catch (error) {\n      if (hooks.error) {\n        await hooks.error(error, path);\n      }\n    }\n  })();\n  \n  return true;\n}\n\n// Helper: Observe pattern (e.g., hlvm.core.io.fs.*)\nfunction observePattern(pattern, hooks) {\n  const base = pattern.replace('*', '');\n  \n  // Find all matching functions\n  const parts = base.split('.');\n  let obj = globalThis;\n  \n  for (const part of parts) {\n    if (part) {\n      obj = obj[part];\n      if (!obj) return false;\n    }\n  }\n  \n  // Wrap all functions in the object\n  let count = 0;\n  for (const key in obj) {\n    if (typeof obj[key] === 'function') {\n      const fullPath = base + key;\n      observeHlvmPath(fullPath, hooks);\n      count++;\n    }\n  }\n  \n  return count > 0;\n}\n\n// Helper: Observe HLVM path (function or property)\nfunction observeHlvmPath(path, hooks) {\n  const parts = path.split('.');\n  let obj = globalThis;\n  \n  // Navigate to parent object\n  for (let i = 0; i < parts.length - 1; i++) {\n    obj = obj[parts[i]];\n    if (!obj) {\n      throw new Error(`Path not found: ${path}`);\n    }\n  }\n  \n  const propName = parts[parts.length - 1];\n  const value = obj[propName];\n  \n  // Check if it's a function\n  if (typeof value === 'function') {\n    return observeFunction(obj, propName, path, hooks);\n  } else {\n    return observeProperty(obj, propName, path, hooks);\n  }\n}\n\n// Helper: Observe a function\nfunction observeFunction(obj, propName, path, hooks) {\n  const original = obj[propName];\n  \n  // Store original for restoration\n  observers.set(path, {\n    type: 'function',\n    original: original,\n    hooks: hooks\n  });\n  \n  // Create wrapper function\n  obj[propName] = async function(...args) {\n    let modifiedArgs = args;\n    \n    // Call before hook\n    if (hooks.before) {\n      const result = await hooks.before(args, path);\n      if (result !== undefined) {\n        modifiedArgs = Array.isArray(result) ? result : [result];\n      }\n    }\n    \n    try {\n      // Call original function\n      const result = await original.apply(this, modifiedArgs);\n      \n      // Call after hook\n      if (hooks.after) {\n        await hooks.after(result, modifiedArgs, path);\n      }\n      \n      return result;\n    } catch (error) {\n      // Call error hook\n      if (hooks.error) {\n        await hooks.error(error, modifiedArgs, path);\n      }\n      throw error;\n    }\n  };\n  \n  // Preserve function name and properties\n  Object.defineProperty(obj[propName], 'name', { value: original.name });\n  Object.setPrototypeOf(obj[propName], original);\n  \n  return true;\n}\n\n// Helper: Observe a property\nfunction observeProperty(obj, propName, path, hooks) {\n  if (!hooks.onChange) {\n    throw new Error('Property observation requires onChange hook');\n  }\n  \n  const descriptor = Object.getOwnPropertyDescriptor(obj, propName);\n  let currentValue = obj[propName];\n  \n  // Store original descriptor for restoration\n  observers.set(path, {\n    type: 'property',\n    descriptor: descriptor,\n    hooks: hooks\n  });\n  \n  // Define new property with getter/setter\n  Object.defineProperty(obj, propName, {\n    get() {\n      return currentValue;\n    },\n    set(newValue) {\n      const oldValue = currentValue;\n      \n      // Call onChange hook\n      const result = hooks.onChange(newValue, oldValue, path);\n      \n      // Allow hook to modify or reject the value\n      if (result !== undefined) {\n        newValue = result;\n      }\n      \n      currentValue = newValue;\n      return true;\n    },\n    enumerable: descriptor ? descriptor.enumerable : true,\n    configurable: true\n  });\n  \n  return true;\n}\n\n/**\n * List all active observers\n * @returns {Array<{path: string, type: string, hooks: string[]}>} Array of observer info\n * @example\n * const observers = hlvm.core.event.list()\n * observers.forEach(o => console.log(`${o.path} (${o.type}): ${o.hooks.join(', ')}`)) \n */\nexport function list() {\n  const result = [];\n  \n  // Add function/property observers\n  for (const [path, observer] of observers) {\n    result.push({\n      path: path,\n      type: observer.type,\n      hooks: Object.keys(observer.hooks)\n    });\n  }\n  \n  // Add file watchers\n  for (const [path] of fileWatchers) {\n    result.push({\n      path: path,\n      type: 'file',\n      hooks: ['onChange']\n    });\n  }\n  \n  return result;\n}\n\n// Setup self-documentation\nfunction initializeDocs() {\n  const inspectSymbol = Symbol.for('Deno.customInspect');\n  \n  // Documentation for observe\n  observe.__doc__ = `\\x1b[36mobserve(target, hooks)\\x1b[0m\n\nObserve function calls, property changes, or file modifications\n\n\\x1b[33mParameters:\\x1b[0m\n  target: \\x1b[90mstring\\x1b[0m - Path to observe (hlvm.*, file path, or pattern)\n  hooks: \\x1b[90mObject\\x1b[0m - Observation hooks\n    before: Called before function execution\n    after: Called after function execution\n    error: Called on function error\n    onChange: Called on property/file change\n\n\\x1b[33mReturns:\\x1b[0m boolean - True if observer was added\n\n\\x1b[33mExamples:\\x1b[0m\n  // Observe function calls\n  observe('hlvm.core.io.fs.write', {\n    before: (args) => console.log('Writing:', args[0])\n  })\n  \n  // Observe file changes\n  observe('/tmp/watch.txt', {\n    onChange: (event) => console.log('Changed:', event.kind)\n  })\n  \n  // Observe pattern (all fs functions)\n  observe('hlvm.core.io.fs.*', {\n    before: (args, path) => console.log(\\`Calling \\${path}\\`)\n  })`;\n  \n  observe[inspectSymbol] = function() {\n    return observe.__doc__;\n  };\n  \n  // Documentation for unobserve\n  unobserve.__doc__ = `\\x1b[36munobserve(target?)\\x1b[0m\n\nStop observing a target or all targets\n\n\\x1b[33mParameters:\\x1b[0m\n  target: \\x1b[90mstring\\x1b[0m (optional) - Path to stop observing\n          If omitted, removes ALL observers\n\n\\x1b[33mReturns:\\x1b[0m number|boolean - Count if no target, else success\n\n\\x1b[33mExamples:\\x1b[0m\n  // Remove specific observer\n  unobserve('hlvm.core.io.fs.write')\n  \n  // Remove all observers\n  const count = unobserve()\n  console.log(\\`Removed \\${count} observers\\`)`;\n  \n  unobserve[inspectSymbol] = function() {\n    return unobserve.__doc__;\n  };\n  \n  // Documentation for list\n  list.__doc__ = `\\x1b[36mlist()\\x1b[0m\n\nList all active observers\n\n\\x1b[33mReturns:\\x1b[0m Array<Object> - Observer information\n  Each object contains:\n    path: The observed path\n    type: 'function'|'property'|'file'\n    hooks: Array of hook names\n\n\\x1b[33mExample:\\x1b[0m\n  const observers = list()\n  observers.forEach(o => {\n    console.log(\\`\\${o.path} (\\${o.type}): \\${o.hooks.join(', ')}\\`)\n  })`;\n  \n  list[inspectSymbol] = function() {\n    return list.__doc__;\n  };\n}\n\n// Initialize documentation on module load\ninitializeDocs();",
  "core/model-manager.js": "// HLVM Model Manager - Handles automatic model downloading with progress\n// This ensures AI features work out-of-the-box without blocking startup\n\nconst EMBEDDED_MODEL = globalThis.EMBEDDED_MODEL || \"qwen2.5-coder:1.5b\";\n\nlet modelChecked = false;\nlet modelAvailable = false;\nlet downloadInProgress = false;\n\n/**\n * Ensure model is available, download if needed with progress display\n * @returns {Promise<boolean>} True if model is ready\n */\nexport async function ensureModel() {\n  // Quick return if already checked\n  if (modelChecked && modelAvailable) return true;\n  if (downloadInProgress) {\n    console.log(\"⏳ Model download already in progress...\");\n    // Wait for download to complete\n    while (downloadInProgress) {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n    }\n    return modelAvailable;\n  }\n\n  try {\n    // Check if Ollama is running\n    const ollamaCheck = await globalThis.hlvm.core.ai.ollama.list().catch(() => null);\n    if (!ollamaCheck) {\n      console.log(\"\\n🚀 Starting AI service...\");\n      // Start Ollama in background\n      await globalThis.hlvm.core.system.exec([\"./resources/ollama\", \"serve\"], { background: true });\n      await new Promise(resolve => setTimeout(resolve, 2000)); // Wait for startup\n    }\n\n    // Check if model exists\n    const models = await globalThis.hlvm.core.ai.ollama.list();\n    const hasModel = models.models?.some(m => m.name === EMBEDDED_MODEL);\n    \n    if (hasModel) {\n      modelChecked = true;\n      modelAvailable = true;\n      return true;\n    }\n\n    // Model doesn't exist, need to download\n    downloadInProgress = true;\n    console.log(\"\\n╔════════════════════════════════════════════════════════════════╗\");\n    console.log(\"║  🤖 Setting up AI capabilities (one-time download)              ║\");\n    console.log(\"║                                                                  ║\");\n    console.log(`║  Downloading model: ${EMBEDDED_MODEL.padEnd(40)}  ║`);\n    console.log(\"║  This will take a few minutes but only happens once.            ║\");\n    console.log(\"║                                                                  ║\");\n    console.log(\"╚════════════════════════════════════════════════════════════════╝\\n\");\n\n    // Pull model with progress\n    const pullProcess = await globalThis.hlvm.core.system.exec(\n      [\"./resources/ollama\", \"pull\", EMBEDDED_MODEL],\n      { stream: true }\n    );\n\n    // Display progress\n    let lastLine = \"\";\n    for await (const chunk of pullProcess) {\n      const lines = chunk.split('\\n').filter(line => line.trim());\n      for (const line of lines) {\n        // Clear previous line if it was a progress update\n        if (lastLine.includes('%') || lastLine.includes('pulling')) {\n          process.stdout.write('\\r\\x1b[K'); // Clear line\n        }\n        \n        // Display current line\n        if (line.includes('%') || line.includes('pulling')) {\n          process.stdout.write(`  ${line}`);\n          lastLine = line;\n        } else if (line.includes('success')) {\n          console.log(\"\\n✅ Model downloaded successfully!\");\n        }\n      }\n    }\n\n    // Verify download\n    const verifyModels = await globalThis.hlvm.core.ai.ollama.list();\n    modelAvailable = verifyModels.models?.some(m => m.name === EMBEDDED_MODEL);\n    \n    if (modelAvailable) {\n      console.log(\"\\n🎉 AI capabilities ready! Your command will now continue...\\n\");\n    } else {\n      console.error(\"\\n❌ Failed to download model. AI features may not work.\");\n    }\n\n    modelChecked = true;\n    downloadInProgress = false;\n    return modelAvailable;\n\n  } catch (error) {\n    downloadInProgress = false;\n    modelChecked = true;\n    console.error(\"\\n⚠️ Could not set up AI:\", error.message);\n    console.error(\"   AI features will not be available in this session.\");\n    return false;\n  }\n}",
  "core/model-setup.js": "// HLVM Model Setup - Extract and install embedded model on first run\n// Use global EMBEDDED_MODEL set by hlvm-init.js\nconst EMBEDDED_MODEL = globalThis.EMBEDDED_MODEL || \"qwen3:0.6b\";\n\n/**\n * Check if the embedded model is already installed\n */\nasync function isModelInstalled() {\n  try {\n    // Check if ollama has our model\n    const { exec } = await import(\"./system.js\");\n    const result = await exec([\"./resources/ollama\", \"list\"]);\n    return result.includes(EMBEDDED_MODEL);\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Extract and install the embedded model bundle\n */\nexport async function setupEmbeddedModel() {\n  // Check if model already installed\n  if (await isModelInstalled()) {\n    return true; // Already set up\n  }\n  \n  console.log(`🤖 Setting up embedded model ${EMBEDDED_MODEL}...`);\n  \n  try {\n    // The model bundle is extracted to temp dir alongside deno/ollama\n    // Find it in the same temp directory where our runtime is\n    const tempBase = Deno.execPath().replace(/\\/hlvm-deno$/, \"\");\n    let modelBundlePath = `${tempBase}/hlvm-model`;\n    \n    // Check if model bundle exists in temp (as executable)\n    try {\n      await Deno.stat(modelBundlePath);\n      console.log(\"  Found embedded model bundle\");\n      // Strip the shebang line when extracting\n      const modelData = await Deno.readFile(modelBundlePath);\n      // Find where tar.gz actually starts (after #!/bin/sh\\n)\n      const shebangEnd = 10; // \"#!/bin/sh\\n\" is 10 bytes\n      const tarData = modelData.slice(shebangEnd);\n      // Write clean tar.gz to temp\n      const cleanTarPath = `${tempBase}/model-clean.tar.gz`;\n      await Deno.writeFile(cleanTarPath, tarData);\n      modelBundlePath = cleanTarPath;\n    } catch {\n      // Fallback: check resources directory (for development)\n      const devPath = \"resources/model-bundle.tar.gz\";\n      try {\n        await Deno.stat(devPath);\n        modelBundlePath = devPath;\n      } catch {\n        console.log(\"⚠️  Model bundle not found. Model will be downloaded on first use.\");\n        return false;\n      }\n    }\n    \n    // Ensure ~/.ollama directory exists\n    const ollamaDir = `${Deno.env.get(\"HOME\")}/.ollama`;\n    await Deno.mkdir(ollamaDir, { recursive: true });\n    \n    // Extract to ~/.ollama\n    const { exec } = await import(\"./system.js\");\n    console.log(\"  Extracting model files...\");\n    await exec([\"tar\", \"-xzf\", modelBundlePath, \"-C\", ollamaDir]);\n    \n    console.log(`✅ Model ${EMBEDDED_MODEL} installed successfully`);\n    return true;\n    \n  } catch (error) {\n    console.error(`❌ Failed to setup embedded model: ${error.message}`);\n    console.error(`   You may need to run: ./resources/ollama pull ${EMBEDDED_MODEL}`);\n    return false;\n  }\n}\n\n// Auto-setup on module load (runs once at startup)\nlet setupPromise = null;\n\nexport function ensureModelSetup() {\n  if (!setupPromise) {\n    setupPromise = setupEmbeddedModel();\n  }\n  return setupPromise;\n}",
  "core/notifier.js": "// Cross-platform system notification module\n// Notifies other processes about HLVM changes\n\nimport * as platform from \"./platform.js\";\n\n/**\n * Notify system-wide that HLVM modules have changed\n * This allows GUI apps to refresh their module lists in real-time\n */\nexport async function notifyModulesChanged() {\n  try {\n    if (platform.isDarwin) {\n      // macOS: Use Darwin distributed notifications via Swift\n      const cmd = new Deno.Command(\"swift\", {\n        args: [\"-e\", `\n          import Foundation\n          CFNotificationCenterPostNotification(\n            CFNotificationCenterGetDarwinNotifyCenter(),\n            CFNotificationName(\"com.hlvm.modules.changed\" as CFString),\n            nil,\n            nil,\n            true\n          )\n        `],\n        stdout: \"null\",\n        stderr: \"null\"\n      });\n      await cmd.output();\n      console.log(\"📢 Notified system: modules changed\");\n      return true;\n      \n    } else if (platform.isWindows) {\n      // Windows: Could use named pipes or registry events\n      // For now, just log\n      console.log(\"📢 Windows notification not implemented yet\");\n      return false;\n      \n    } else if (platform.isLinux) {\n      // Linux: Could use D-Bus notifications\n      try {\n        const cmd = new Deno.Command(\"dbus-send\", {\n          args: [\n            \"--system\",\n            \"--type=signal\",\n            \"/com/hlvm/modules\",\n            \"com.hlvm.modules.Changed\"\n          ],\n          stdout: \"null\",\n          stderr: \"null\"\n        });\n        await cmd.output();\n        console.log(\"📢 Notified system via D-Bus: modules changed\");\n        return true;\n      } catch {\n        console.log(\"📢 Linux notification failed (D-Bus not available)\");\n        return false;\n      }\n      \n    } else {\n      console.log(\"📢 Platform notification not supported\");\n      return false;\n    }\n  } catch (error) {\n    console.error(\"Failed to send system notification:\", error.message);\n    return false;\n  }\n}\n\n/**\n * Notify system about a specific event\n * @param {string} event - Event name (e.g., \"module.saved\", \"module.removed\")\n * @param {object} data - Optional event data\n */\nexport async function notifyEvent(event, data = null) {\n  try {\n    if (platform.isDarwin) {\n      // macOS: Send event-specific notification\n      const notificationName = `com.hlvm.${event}`;\n      const cmd = new Deno.Command(\"swift\", {\n        args: [\"-e\", `\n          import Foundation\n          CFNotificationCenterPostNotification(\n            CFNotificationCenterGetDarwinNotifyCenter(),\n            CFNotificationName(\"${notificationName}\" as CFString),\n            nil,\n            ${data ? `[\"data\": \"${JSON.stringify(data).replace(/\"/g, '\\\\\"')}\"] as CFDictionary` : 'nil'},\n            true\n          )\n        `],\n        stdout: \"null\",\n        stderr: \"null\"\n      });\n      await cmd.output();\n      console.log(`📢 Notified system: ${event}`);\n      return true;\n    }\n    // Add other platforms as needed\n    return false;\n  } catch (error) {\n    console.error(`Failed to send ${event} notification:`, error.message);\n    return false;\n  }\n}\n\n// Export convenience functions for common events\nexport const notifyModuleSaved = (moduleName) => notifyEvent(\"module.saved\", { name: moduleName });\nexport const notifyModuleRemoved = (moduleName) => notifyEvent(\"module.removed\", { name: moduleName });\nexport const notifyDatabaseChanged = () => notifyEvent(\"database.changed\");",
  "core/platform.js": "// Platform module - Cross-platform OS information\n\nexport const os = Deno.build.os;\nexport const arch = Deno.build.arch;\nexport const version = Deno.osRelease();\nexport const isDarwin = os === \"darwin\";\nexport const isWindows = os === \"windows\";\nexport const isLinux = os === \"linux\";\nexport function tempDir() {\n  const envTemp = Deno.env.get(\"TMPDIR\") || \n                  Deno.env.get(\"TEMP\") || \n                  Deno.env.get(\"TMP\");\n  if (envTemp) return envTemp;\n  \n  if (isWindows) {\n    const userProfile = Deno.env.get(\"USERPROFILE\");\n    if (userProfile) {\n      return `${userProfile}\\\\AppData\\\\Local\\\\Temp`;\n    }\n    return \"C:\\\\Windows\\\\Temp\";\n  }\n  \n  return \"/tmp\";\n}\n\nexport function homeDir() {\n  if (isWindows) {\n    return Deno.env.get(\"USERPROFILE\") || Deno.env.get(\"HOMEDRIVE\") + Deno.env.get(\"HOMEPATH\");\n  }\n  return Deno.env.get(\"HOME\") || \"/\";\n}\n\n// Path and executable info\nexport const pathSep = isWindows ? \"\\\\\" : \"/\";\nexport const exeExt = isWindows ? \".exe\" : \"\";\n\n// Shell access\nexport function shell() {\n  if (isWindows) {\n    return [\"cmd\", \"/c\"];\n  }\n  return [\"sh\", \"-c\"];\n}\n\n// ===== MERGED FROM utils.js =====\n\n// Escape string for shell command (cross-platform)\nexport function escapeShell(str) {\n  if (isWindows) {\n    // PowerShell escaping\n    return str.replace(/\"/g, '`\"').replace(/\\$/g, '`$');\n  } else {\n    // Unix shell escaping\n    return str.replace(/'/g, \"'\\\\''\");\n  }\n}\n\n// Escape text for keyboard input (cross-platform)\nexport function escapeKeyboard(text) {\n  if (isWindows) {\n    // PowerShell SendKeys escaping\n    return text\n      .replace(/\\{/g, '{{')\n      .replace(/\\}/g, '}}')\n      .replace(/\\(/g, '{(}')\n      .replace(/\\)/g, '{)}')\n      .replace(/\\+/g, '{+}')\n      .replace(/\\^/g, '{^}')\n      .replace(/%/g, '{%}')\n      .replace(/~/g, '{~}');\n  } else {\n    // Unix shell escaping for osascript\n    return text.replace(/'/g, \"'\\\\''\");\n  }\n}\n\n// ===== MERGED FROM exec.js =====\n\n// Decode text from command output\nexport function decode(buffer) {\n  return new TextDecoder().decode(buffer);\n}\n\n// Run PowerShell command with standard args\nexport async function powershell(script) {\n  return await new Deno.Command(\"powershell\", {\n    args: [\"-NoProfile\", \"-Command\", script]\n  }).output();\n}\n\n// PowerShell script boilerplate\nexport const PS = {\n  forms: \"Add-Type -AssemblyName System.Windows.Forms\",\n  drawing: \"Add-Type -AssemblyName System.Drawing\",\n  visualBasic: \"Add-Type -AssemblyName Microsoft.VisualBasic\"\n};\n\n// Linux tool with xdotool/ydotool fallback\nexport async function linuxTool(xdotoolArgs, ydotoolArgs, errorMsg) {\n  try {\n    return await new Deno.Command(\"xdotool\", { args: xdotoolArgs }).output();\n  } catch {\n    try {\n      return await new Deno.Command(\"ydotool\", { args: ydotoolArgs }).output();\n    } catch {\n      throw new Error(errorMsg || \"Install xdotool (X11) or ydotool (Wayland)\");\n    }\n  }\n}\n\n// Common error messages\nexport const ERRORS = {\n  LINUX_TOOLS: \"Install xdotool (X11) or ydotool (Wayland)\",\n  LINUX_NOTIFY: \"Install libnotify-bin (notify-send)\",\n  LINUX_DIALOG: \"Install zenity or kdialog\"\n};",
  "core/system.js": "// System module - Cross-platform system utilities\n\nimport * as platform from \"./platform.js\";\n\nexport async function hostname() {\n  try {\n    return Deno.hostname();\n  } catch {\n    const p = new Deno.Command(\"hostname\");\n    const { stdout } = await p.output();\n    return new TextDecoder().decode(stdout).trim();\n  }\n}\n\nexport async function exec(cmd) {\n  const shell = platform.shell();\n  const p = new Deno.Command(shell[0], { \n    args: [...shell.slice(1), cmd] \n  });\n  const { stdout, stderr, code } = await p.output();\n  return {\n    stdout: new TextDecoder().decode(stdout),\n    stderr: new TextDecoder().decode(stderr),\n    code\n  };\n}\n\n// Direct exports from Deno\nexport const exit = Deno.exit;\nexport const pid = () => Deno.pid;\nexport const cwd = Deno.cwd;\nexport const chdir = Deno.chdir;\n\nexport function env(key, value) {\n  if (value !== undefined) {\n    Deno.env.set(key, value);\n  }\n  return Deno.env.get(key);\n}",
  "fs/filesystem.js": "// Filesystem module - Cross-platform file operations\n\nimport * as platform from \"../core/platform.js\";\n\n// File operations\nclass FileOps {\n  /**\n   * Reads text content from a file\n   * @param {string} path - File path to read\n   * @returns {Promise<string>} File content as text\n   * @example\n   * await read('/tmp/test.txt')\n   * // → \"Hello World\"\n   */\n  static read = (path) => Deno.readTextFile(path);\n  /**\n   * Writes text content to a file\n   * @param {string} path - File path to write\n   * @param {string} content - Text content to write\n   * @returns {Promise<void>}\n   * @example\n   * await write('/tmp/test.txt', 'Hello World')\n   * // → File created with content\n   */\n  static write = (path, content) => Deno.writeTextFile(path, content);\n  /**\n   * Reads binary content from a file\n   * @param {string} path - File path to read\n   * @returns {Promise<Uint8Array>} File content as bytes\n   * @example\n   * await readBytes('/tmp/image.png')\n   * // → Uint8Array[137, 80, 78, ...]\n   */\n  static readBytes = (path) => Deno.readFile(path);\n  /**\n   * Writes binary content to a file\n   * @param {string} path - File path to write\n   * @param {Uint8Array} data - Binary data to write\n   * @returns {Promise<void>}\n   * @example\n   * await writeBytes('/tmp/data.bin', new Uint8Array([1,2,3]))\n   * // → Binary file created\n   */\n  static writeBytes = (path, data) => Deno.writeFile(path, data);\n  \n  /**\n   * Checks if a file or directory exists\n   * @param {string} path - Path to check\n   * @returns {Promise<boolean>} True if exists\n   * @example\n   * await exists('/tmp/test.txt')\n   * // → true\n   */\n  static async exists(path) {\n    try {\n      await Deno.stat(path);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  \n  /**\n   * Gets file or directory information\n   * @param {string} path - Path to stat\n   * @returns {Promise<Deno.FileInfo>} File information\n   * @example\n   * await stat('/tmp/test.txt')\n   * // → {size: 11, isFile: true, isDirectory: false, ...}\n   */\n  static stat = (path) => Deno.stat(path);\n}\n\n// Directory operations\nclass DirOps {\n  /**\n   * Creates a directory\n   * @param {string} path - Directory path to create\n   * @param {Object} [options={recursive: true}] - Creation options\n   * @returns {Promise<void>}\n   * @example\n   * await mkdir('/tmp/test/deep/path')\n   * // → Creates all directories in path\n   */\n  static mkdir = (path, options = { recursive: true }) => Deno.mkdir(path, options);\n  /**\n   * Reads directory contents\n   * @param {string} path - Directory path to read\n   * @returns {AsyncIterable<Deno.DirEntry>} Directory entries\n   * @example\n   * for await (const entry of readdir('/tmp')) {\n   *   console.log(entry.name, entry.isFile)\n   * }\n   * // → test.txt true\n   * // → subdir false\n   */\n  static readdir = (path) => Deno.readDir(path);\n  /**\n   * Removes a file or directory\n   * @param {string} path - Path to remove\n   * @param {Object} [options={recursive: true}] - Removal options\n   * @returns {Promise<void>}\n   * @example\n   * await remove('/tmp/test')\n   * // → Removes test and all contents\n   */\n  static remove = (path, options = { recursive: true }) => Deno.remove(path, options);\n  \n  /**\n   * Copies files or directories recursively\n   * @param {string} src - Source path\n   * @param {string} dest - Destination path\n   * @returns {Promise<void>}\n   * @example\n   * await copy('/tmp/source', '/tmp/backup')\n   * // → Creates backup with all contents\n   */\n  static async copy(src, dest) {\n    const srcStat = await FileOps.stat(src);\n    \n    if (srcStat.isFile) {\n      const data = await FileOps.readBytes(src);\n      await FileOps.writeBytes(dest, data);\n    } else if (srcStat.isDirectory) {\n      await this.mkdir(dest);\n      for await (const entry of this.readdir(src)) {\n        await this.copy(\n          PathUtils.join(src, entry.name),\n          PathUtils.join(dest, entry.name)\n        );\n      }\n    }\n  }\n  \n  /**\n   * Moves or renames files and directories\n   * @param {string} src - Source path\n   * @param {string} dest - Destination path\n   * @returns {Promise<void>}\n   * @example\n   * await move('/tmp/old.txt', '/tmp/new.txt')\n   * // → Renames old.txt to new.txt\n   */\n  static async move(src, dest) {\n    try {\n      await Deno.rename(src, dest);\n    } catch {\n      // If rename fails (e.g., across drives on Windows), copy and delete\n      await this.copy(src, dest);\n      await this.remove(src);\n    }\n  }\n}\n\n// Path utilities\nclass PathUtils {\n  /**\n   * Joins path segments using platform separator\n   * @param {...string} paths - Path segments to join\n   * @returns {string} Joined path\n   * @example\n   * join('/tmp', 'test', 'file.txt')\n   * // → '/tmp/test/file.txt' (Unix)\n   * // → '\\tmp\\test\\file.txt' (Windows)\n   */\n  static join(...paths) {\n    return paths.join(platform.pathSep);\n  }\n  \n  /**\n   * Gets directory name from path\n   * @param {string} path - File path\n   * @returns {string} Directory path\n   * @example\n   * dirname('/tmp/test/file.txt')\n   * // → '/tmp/test'\n   */\n  static dirname(path) {\n    const sep = platform.pathSep;\n    const lastIndex = path.lastIndexOf(sep);\n    return lastIndex === -1 ? \".\" : path.substring(0, lastIndex);\n  }\n  \n  /**\n   * Gets filename from path\n   * @param {string} path - File path\n   * @param {string} [ext=''] - Extension to remove\n   * @returns {string} Filename\n   * @example\n   * basename('/tmp/test/file.txt')\n   * // → 'file.txt'\n   * basename('/tmp/test/file.txt', '.txt')\n   * // → 'file'\n   */\n  static basename(path, ext = \"\") {\n    const sep = platform.pathSep;\n    const lastIndex = path.lastIndexOf(sep);\n    const base = lastIndex === -1 ? path : path.substring(lastIndex + 1);\n    return ext && base.endsWith(ext) \n      ? base.substring(0, base.length - ext.length)\n      : base;\n  }\n  \n  /**\n   * Gets file extension from path\n   * @param {string} path - File path\n   * @returns {string} Extension including dot\n   * @example\n   * extname('/tmp/test/file.txt')\n   * // → '.txt'\n   * extname('/tmp/test/file')\n   * // → ''\n   */\n  static extname(path) {\n    const lastDot = path.lastIndexOf(\".\");\n    return lastDot === -1 ? \"\" : path.substring(lastDot);\n  }\n}\n\n// Initialize documentation for REPL display\nfunction initializeDocs() {\n  // File operations docs\n  FileOps.read.__doc__ = `\\x1b[36mread(path)\\x1b[0m\n\nReads text content from a file\n\n\\x1b[33mParameters:\\x1b[0m\n  path: \\x1b[90mstring\\x1b[0m - File path to read\n\n\\x1b[33mReturns:\\x1b[0m Promise<string> - File content as text\n\n\\x1b[33mExample:\\x1b[0m\n  await read('/tmp/test.txt')\n  \\x1b[32m// → \"Hello World\"\\x1b[0m`;\n  FileOps.read[Symbol.for('Deno.customInspect')] = function() { return FileOps.read.__doc__; };\n\n  FileOps.write.__doc__ = `\\x1b[36mwrite(path, content)\\x1b[0m\n\nWrites text content to a file\n\n\\x1b[33mParameters:\\x1b[0m\n  path: \\x1b[90mstring\\x1b[0m - File path to write\n  content: \\x1b[90mstring\\x1b[0m - Text content to write\n\n\\x1b[33mReturns:\\x1b[0m Promise<void>\n\n\\x1b[33mExample:\\x1b[0m\n  await write('/tmp/test.txt', 'Hello World')\n  \\x1b[32m// → File created with content\\x1b[0m`;\n  FileOps.write[Symbol.for('Deno.customInspect')] = function() { return FileOps.write.__doc__; };\n\n  FileOps.exists.__doc__ = `\\x1b[36mexists(path)\\x1b[0m\n\nChecks if a file or directory exists\n\n\\x1b[33mParameters:\\x1b[0m\n  path: \\x1b[90mstring\\x1b[0m - Path to check\n\n\\x1b[33mReturns:\\x1b[0m Promise<boolean>\n\n\\x1b[33mExample:\\x1b[0m\n  await exists('/tmp/test.txt')\n  \\x1b[32m// → true\\x1b[0m`;\n  FileOps.exists[Symbol.for('Deno.customInspect')] = function() { return FileOps.exists.__doc__; };\n\n  // Directory operations docs\n  DirOps.mkdir.__doc__ = `\\x1b[36mmkdir(path, options?)\\x1b[0m\n\nCreates a directory\n\n\\x1b[33mParameters:\\x1b[0m\n  path: \\x1b[90mstring\\x1b[0m - Directory path to create\n  options: \\x1b[90mObject\\x1b[0m (optional) - {recursive: true}\n\n\\x1b[33mReturns:\\x1b[0m Promise<void>\n\n\\x1b[33mExample:\\x1b[0m\n  await mkdir('/tmp/test/deep/path')\n  \\x1b[32m// → Creates all directories in path\\x1b[0m`;\n  DirOps.mkdir[Symbol.for('Deno.customInspect')] = function() { return DirOps.mkdir.__doc__; };\n\n  DirOps.remove.__doc__ = `\\x1b[36mremove(path, options?)\\x1b[0m\n\nRemoves a file or directory\n\n\\x1b[33mParameters:\\x1b[0m\n  path: \\x1b[90mstring\\x1b[0m - Path to remove\n  options: \\x1b[90mObject\\x1b[0m (optional) - {recursive: true}\n\n\\x1b[33mReturns:\\x1b[0m Promise<void>\n\n\\x1b[33mExample:\\x1b[0m\n  await remove('/tmp/test')\n  \\x1b[32m// → Removes test and all contents\\x1b[0m`;\n  DirOps.remove[Symbol.for('Deno.customInspect')] = function() { return DirOps.remove.__doc__; };\n\n  DirOps.copy.__doc__ = `\\x1b[36mcopy(src, dest)\\x1b[0m\n\nCopies files or directories recursively\n\n\\x1b[33mParameters:\\x1b[0m\n  src: \\x1b[90mstring\\x1b[0m - Source path\n  dest: \\x1b[90mstring\\x1b[0m - Destination path\n\n\\x1b[33mReturns:\\x1b[0m Promise<void>\n\n\\x1b[33mExample:\\x1b[0m\n  await copy('/tmp/source', '/tmp/backup')\n  \\x1b[32m// → Creates backup with all contents\\x1b[0m`;\n  DirOps.copy[Symbol.for('Deno.customInspect')] = function() { return DirOps.copy.__doc__; };\n\n  DirOps.move.__doc__ = `\\x1b[36mmove(src, dest)\\x1b[0m\n\nMoves or renames files and directories\n\n\\x1b[33mParameters:\\x1b[0m\n  src: \\x1b[90mstring\\x1b[0m - Source path\n  dest: \\x1b[90mstring\\x1b[0m - Destination path\n\n\\x1b[33mReturns:\\x1b[0m Promise<void>\n\n\\x1b[33mExample:\\x1b[0m\n  await move('/tmp/old.txt', '/tmp/new.txt')\n  \\x1b[32m// → Renames old.txt to new.txt\\x1b[0m`;\n  DirOps.move[Symbol.for('Deno.customInspect')] = function() { return DirOps.move.__doc__; };\n\n  // Path utilities docs\n  PathUtils.join.__doc__ = `\\x1b[36mjoin(...paths)\\x1b[0m\n\nJoins path segments using platform separator\n\n\\x1b[33mParameters:\\x1b[0m\n  ...paths: \\x1b[90mstring[]\\x1b[0m - Path segments to join\n\n\\x1b[33mReturns:\\x1b[0m string - Joined path\n\n\\x1b[33mExample:\\x1b[0m\n  join('/tmp', 'test', 'file.txt')\n  \\x1b[32m// → '/tmp/test/file.txt' (Unix)\n  // → '\\\\tmp\\\\test\\\\file.txt' (Windows)\\x1b[0m`;\n  PathUtils.join[Symbol.for('Deno.customInspect')] = function() { return PathUtils.join.__doc__; };\n}\n\n// Initialize docs on module load\ninitializeDocs();\n\n// Export public API (maintain backward compatibility)\nexport const read = FileOps.read;\nexport const write = FileOps.write;\nexport const readBytes = FileOps.readBytes;\nexport const writeBytes = FileOps.writeBytes;\nexport const exists = FileOps.exists;\nexport const stat = FileOps.stat;\n\nexport const mkdir = DirOps.mkdir;\nexport const readdir = DirOps.readdir;\nexport const remove = DirOps.remove;\nexport const copy = DirOps.copy;\nexport const move = DirOps.move;\n\nexport const join = PathUtils.join;\nexport const dirname = PathUtils.dirname;\nexport const basename = PathUtils.basename;\nexport const extname = PathUtils.extname;",
  "io/clipboard.js": "// Clipboard module - Cross-platform clipboard operations\n\nimport * as platform from \"../core/platform.js\";\n\n/**\n * Reads text from system clipboard\n * @returns {Promise<string>} Clipboard text content\n * @example\n * await read()\n * // → \"Hello from clipboard\"\n */\nexport async function read() {\n  if (platform.isDarwin) {\n    // macOS: pbpaste (built-in)\n    const p = new Deno.Command(\"pbpaste\");\n    const { stdout } = await p.output();\n    return new TextDecoder().decode(stdout);\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell Get-Clipboard (built-in)\n    const p = new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", \"Get-Clipboard\"]\n    });\n    const { stdout } = await p.output();\n    return new TextDecoder().decode(stdout).replace(/\\r\\n$/, '');\n    \n  } else {\n    // Linux: Try multiple clipboard tools in order of preference\n    const tools = [\n      { cmd: \"xclip\", args: [\"-selection\", \"clipboard\", \"-o\"] },\n      { cmd: \"xsel\", args: [\"--clipboard\", \"--output\"] },\n      { cmd: \"wl-paste\", args: [] } // Wayland\n    ];\n    \n    for (const tool of tools) {\n      try {\n        const p = new Deno.Command(tool.cmd, { args: tool.args });\n        const { stdout, success } = await p.output();\n        if (success) {\n          return new TextDecoder().decode(stdout);\n        }\n      } catch {\n        // Try next tool\n      }\n    }\n    \n    throw new Error(\n      \"Clipboard read failed. Install one of: xclip, xsel, or wl-clipboard\"\n    );\n  }\n}\n\n/**\n * Writes text to system clipboard\n * @param {string} text - Text to write to clipboard\n * @returns {Promise<void>}\n * @example\n * await write(\"Hello clipboard\")\n * // → Text copied to clipboard\n */\nexport async function write(text) {\n  if (platform.isDarwin) {\n    // macOS: pbcopy (built-in)\n    const p = new Deno.Command(\"pbcopy\", { stdin: \"piped\" });\n    const proc = p.spawn();\n    const writer = proc.stdin.getWriter();\n    await writer.write(new TextEncoder().encode(text));\n    await writer.close();\n    await proc.status;\n    \n  } else if (platform.isWindows) {\n    // Windows: PowerShell Set-Clipboard (built-in)\n    // Escape quotes for PowerShell\n    const escaped = text.replace(/\"/g, '`\"').replace(/\\$/g, '`$');\n    const p = new Deno.Command(\"powershell\", {\n      args: [\"-NoProfile\", \"-Command\", `Set-Clipboard -Value \"${escaped}\"`]\n    });\n    await p.output();\n    \n  } else {\n    // Linux: Try multiple clipboard tools\n    const tools = [\n      { cmd: \"xclip\", args: [\"-selection\", \"clipboard\"] },\n      { cmd: \"xsel\", args: [\"--clipboard\", \"--input\"] },\n      { cmd: \"wl-copy\", args: [] } // Wayland\n    ];\n    \n    for (const tool of tools) {\n      try {\n        const p = new Deno.Command(tool.cmd, { \n          args: tool.args,\n          stdin: \"piped\"\n        });\n        const proc = p.spawn();\n        const writer = proc.stdin.getWriter();\n        await writer.write(new TextEncoder().encode(text));\n        await writer.close();\n        const { success } = await proc.status;\n        if (success) return;\n      } catch {\n        // Try next tool\n      }\n    }\n    \n    throw new Error(\n      \"Clipboard write failed. Install one of: xclip, xsel, or wl-clipboard\"\n    );\n  }\n}\n\n/**\n * Checks if clipboard operations are available\n * @returns {Promise<boolean>} True if clipboard is available\n * @example\n * await isAvailable()\n * // → true (on macOS/Windows)\n * // → false (on Linux without xclip/xsel)\n */\nexport async function isAvailable() {\n  try {\n    if (platform.isDarwin || platform.isWindows) {\n      return true; // Built-in support\n    }\n    \n    // Linux: Check for tools\n    const tools = [\"xclip\", \"xsel\", \"wl-paste\"];\n    for (const tool of tools) {\n      try {\n        const p = new Deno.Command(\"which\", { args: [tool] });\n        const { success } = await p.output();\n        if (success) return true;\n      } catch {}\n    }\n    return false;\n  } catch {\n    return false;\n  }\n}",
  "ui/control.js": "// UI Control Module - Control macOS GUI via WebSocket\n// Replaces __HLVM_COMMAND__ strings with proper JSON-RPC calls\n\nlet socket = null;\nlet requestId = 0;\nconst pending = new Map();\n\n// Connect to macOS app WebSocket server\nasync function connect(port = 11436) {\n  return new Promise((resolve, reject) => {\n    try {\n      socket = new WebSocket(`ws://localhost:${port}`);\n      \n      socket.onopen = () => {\n        console.log(\"Connected to macOS app\");\n        resolve(true);\n      };\n      \n      socket.onerror = (error) => {\n        reject(new Error(`Connection failed: ${error}`));\n      };\n      \n      socket.onmessage = (event) => {\n        try {\n          const msg = JSON.parse(event.data);\n          \n          // Handle response to our request\n          if (msg.id && pending.has(msg.id)) {\n            const { resolve, reject } = pending.get(msg.id);\n            pending.delete(msg.id);\n            \n            if (msg.error) {\n              reject(new Error(msg.error.message));\n            } else {\n              resolve(msg.result);\n            }\n          }\n          \n          // Handle notifications from app\n          if (!msg.id && msg.method) {\n            handleNotification(msg.method, msg.params);\n          }\n        } catch (e) {\n          console.error(\"Message handling error:\", e);\n        }\n      };\n      \n      socket.onclose = () => {\n        console.log(\"Disconnected from macOS app\");\n        socket = null;\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n// Send JSON-RPC request and wait for response\nasync function request(method, params = null) {\n  if (!socket || socket.readyState !== WebSocket.OPEN) {\n    // Try to connect\n    try {\n      await connect();\n    } catch {\n      return { error: \"macOS app not available\" };\n    }\n  }\n  \n  const id = `req-${++requestId}`;\n  \n  return new Promise((resolve, reject) => {\n    const timeout = setTimeout(() => {\n      pending.delete(id);\n      reject(new Error(\"Request timeout\"));\n    }, 5000);\n    \n    pending.set(id, { \n      resolve: (result) => {\n        clearTimeout(timeout);\n        resolve(result);\n      }, \n      reject: (error) => {\n        clearTimeout(timeout);\n        reject(error);\n      }\n    });\n    \n    const request = {\n      jsonrpc: \"2.0\",\n      id,\n      method,\n      params\n    };\n    \n    socket.send(JSON.stringify(request));\n  });\n}\n\n// Send notification (no response expected)\nfunction notify(method, params = null) {\n  if (!socket || socket.readyState !== WebSocket.OPEN) {\n    console.warn(\"App not connected\");\n    return;\n  }\n  \n  const notification = {\n    jsonrpc: \"2.0\",\n    method,\n    params\n  };\n  \n  socket.send(JSON.stringify(notification));\n}\n\n// Handle notifications from app\nfunction handleNotification(method, params) {\n  console.log(`Notification from app: ${method}`, params);\n  \n  // Emit events if needed\n  if (globalThis.hlvm?.events) {\n    globalThis.hlvm.events.emit(method, params);\n  }\n}\n\n// UI control commands (replacing __HLVM_COMMAND__ strings)\nexport const ui = {\n  // Connection management\n  connect,\n  disconnect: () => {\n    if (socket) {\n      socket.close();\n      socket = null;\n    }\n  },\n  \n  isConnected: () => socket && socket.readyState === WebSocket.OPEN,\n  \n  // Spotlight commands (replacing __HLVM_SPOTLIGHT_*)\n  spotlight: {\n    toggle: () => request(\"spotlight.toggle\"),\n    show: () => request(\"spotlight.show\"),\n    hide: () => request(\"spotlight.hide\"),\n    navigateIn: () => request(\"spotlight.navigateIn\"),\n    navigateOut: () => request(\"spotlight.navigateOut\"),\n    search: (query) => request(\"spotlight.search\", { query }),\n    \n    // Note: Module management moved to hlvm.modules for generic use\n  },\n  \n  // Chat commands (replacing __HLVM_CHAT_*)\n  chat: {\n    toggle: () => request(\"chat.toggle\"),\n    stop: () => request(\"chat.stop\"),\n    cancel: () => request(\"chat.cancel\"),\n    createRoom: (name) => request(\"chat.createRoom\", { name }),\n    send: (message) => request(\"chat.send\", { message }),\n    list: () => request(\"chat.list\"),\n    selectRoom: (id) => request(\"chat.selectRoom\", { id }),\n    ask: (prompt) => request(\"chat.ask\", { prompt })\n  },\n  \n  // Playground commands (replacing __HLVM_PLAYGROUND_*)\n  playground: {\n    toggle: () => request(\"playground.toggle\"),\n    eval: (code) => request(\"playground.eval\", { code }),\n    increaseFont: () => request(\"playground.increaseFont\"),\n    decreaseFont: () => request(\"playground.decreaseFont\"),\n    setCode: (code) => request(\"playground.setCode\", { code })\n  },\n  \n  // Screenshot commands (replacing __HLVM_SCREENSHOT_*)\n  screenshot: {\n    capture: () => request(\"screenshot.capture\"),\n    captureScreen: () => request(\"screenshot.captureScreen\"),\n    captureEntire: () => request(\"screenshot.captureEntire\"),\n    captureSelection: () => request(\"screenshot.captureSelection\")\n  },\n  \n  // App commands (replacing __HLVM_APP_*)\n  preferences: () => request(\"app.preferences\"),\n  escape: () => request(\"app.escape\"),\n  eval: (code) => request(\"app.eval\", { code }),\n  settings: () => request(\"app.settings\"),\n  textEditor: () => request(\"app.textEditor\"),\n  minimize: () => request(\"app.minimize\"),\n  quit: () => request(\"app.quit\"),\n  \n  // Code commands (replacing __HLVM_CODE_*)\n  code: {\n    paste: (code) => request(\"code.paste\", { code }),\n    copy: () => request(\"code.copy\")\n  },\n  \n  // Utility commands\n  // Note: Clipboard operations use hlvm.clipboard directly (not via WebSocket)\n  \n  // REPL commands\n  repl: {\n    toggle: () => request(\"repl.toggle\"),\n    clear: () => request(\"repl.clear\"),\n    execute: (code) => request(\"repl.execute\", { code })\n  },\n  \n  // AI commands\n  ai: {\n    write: (prompt) => request(\"ai.write\", { prompt })\n  },\n  \n  // Raw request for custom commands\n  request,\n  notify\n};\n\nexport default ui;"
};

export const embeddedInit = "// HLVM Initialization - Clean Mediator\n// Imports all stdlib modules and exposes them through the hlvm namespace\n\n// Enable async spinner for all promises in REPL (disabled for now)\n// import asyncSpinner from \"./stdlib/core/async-spinner.js\";\n// asyncSpinner.enableAsyncSpinner();\n\n// Import all stdlib modules from organized structure\nimport * as platform from \"./stdlib/core/platform.js\";\nimport * as system from \"./stdlib/core/system.js\";\nimport * as db from \"./stdlib/core/database.js\";\nimport * as fs from \"./stdlib/fs/filesystem.js\";\nimport * as clipboard from \"./stdlib/io/clipboard.js\";\nimport * as notification from \"./stdlib/computer/notification.js\";\nimport * as screen from \"./stdlib/computer/screen.js\";\nimport * as keyboard from \"./stdlib/computer/keyboard.js\";\nimport * as mouse from \"./stdlib/computer/mouse.js\";\nimport * as ollama from \"./stdlib/ai/ollama.js\";\nimport ui from \"./stdlib/ui/control.js\";\nimport appControl from \"./stdlib/app/control.js\";\nimport { context as computerContext } from \"./stdlib/computer/context.js\";\n\n// Import stdlib AI module\nimport * as stdlibAI from \"./stdlib/ai.js\";\n\n// Import core event module\nimport * as event from \"./stdlib/core/event.js\";\n\n// Import environment settings module\nimport * as env from \"./stdlib/core/env.js\";\n\n// Create hlvm namespace inside IIFE to hide from global scope\nglobalThis.hlvm = (() => {\n  const hlvmBase = {\n    // LAYER 1: Core primitives - all building blocks\n    core: {\n      // System - OS/environment stuff (merge platform + system)\n      system: {\n        // Info & platform\n        os: platform.os,\n        arch: platform.arch,\n        version: platform.version,\n        hostname: system.hostname,\n        pid: system.pid,\n        isDarwin: platform.isDarwin,\n        isWindows: platform.isWindows,\n        isLinux: platform.isLinux,\n        \n        // Working directory & paths\n        homeDir: platform.homeDir,\n        tempDir: platform.tempDir,\n        cwd: system.cwd,\n        chdir: system.chdir,\n        pathSep: platform.pathSep,\n        exeExt: platform.exeExt,\n        \n        // Environment & execution\n        env: system.env,\n        exit: system.exit,\n        exec: system.exec,\n        shell: platform.shell,\n        powershell: platform.powershell,\n        \n        // Utilities\n        escapeShell: platform.escapeShell,\n        escapeKeyboard: platform.escapeKeyboard,\n        decode: platform.decode,\n        linuxTool: platform.linuxTool,\n        \n        // Constants\n        PS: platform.PS,\n        ERRORS: platform.ERRORS\n      },\n      \n      // Storage - persistence\n      storage: {\n        db: Object.assign(db.db, {\n          path: db.path,\n          load: db.load,\n          getSource: db.getSource\n        }),\n        modules: {\n          save: db.save,\n          remove: async (name) => {\n            // If no name given, remove ALL modules (nuke)\n            if (!name) {\n              const allModules = db.list();\n              for (const mod of allModules) {\n                await db.remove(mod.key);\n              }\n              console.log(`Removed all ${allModules.length} modules`);\n              return true;\n            }\n            // Otherwise remove specific module\n            return db.remove(name);\n          },\n          list: db.list,\n          load: db.load,\n          get: db.getSource,\n          has: async (name) => {\n            const modules = db.list();\n            return modules.some(m => m.key === name);\n          },\n          \n          // Alias management - permanent global aliases\n          alias: async (name, path) => {\n            // Remove alias if path is null\n            if (path === null || path === undefined) {\n              return removeAlias(name);\n            }\n            return createAlias(name, path);\n          },\n          aliases: () => listAliases(),\n          removeAlias: (name) => removeAlias(name),\n          updateAlias: (name, path) => createAlias(name, path)\n        }\n      },\n      \n      // IO - input/output\n      io: {\n        fs: {\n          read: fs.read,\n          write: fs.write,\n          readBytes: fs.readBytes,\n          writeBytes: fs.writeBytes,\n          exists: fs.exists,\n          stat: fs.stat,\n          remove: fs.remove,\n          copy: fs.copy,\n          move: fs.move,\n          mkdir: fs.mkdir,\n          readdir: fs.readdir,\n          // Path utilities stay here (fs context)\n          join: fs.join,\n          dirname: fs.dirname,\n          basename: fs.basename,\n          extname: fs.extname\n        },\n        clipboard: {\n          isAvailable: clipboard.isAvailable,\n          read: clipboard.read,\n          write: clipboard.write\n        }\n      },\n      \n      // Computer - automation\n      computer: {\n        keyboard: {\n          type: keyboard.type,\n          press: keyboard.press,\n          onKeyPress: keyboard.onKeyPress,\n          offKeyPress: keyboard.offKeyPress,\n          listKeyListeners: keyboard.listKeyListeners\n        },\n        mouse: {\n          move: mouse.move,\n          click: mouse.click,\n          doubleClick: mouse.doubleClick,\n          drag: mouse.drag,\n          position: mouse.position\n        },\n        screen: {\n          capture: screen.capture,\n          getScreenSize: screen.getScreenSize\n        },\n        context: computerContext\n      },\n      \n      // UI - user interface\n      ui: {\n        notification: {\n          alert: notification.alert,\n          confirm: notification.confirm,\n          notify: notification.notify,\n          prompt: notification.prompt\n        }\n      },\n      \n      // AI - AI services\n      ai: {\n        ollama: ollama\n      },\n      \n      // Event - observation system\n      event: {\n        observe: event.observe,\n        unobserve: event.unobserve,\n        list: event.list\n      }\n    },\n    \n    // LAYER 2: App control (top-level, not core!)\n    app: {\n      // HLVM's own UI controls (WebSocket bridge, etc.)\n      hlvm: ui,\n      \n      // External app control (cross-platform)\n      get: appControl.get,\n      list: appControl.list,\n      frontmost: appControl.frontmost,\n      aliases: appControl.aliases,\n      isAvailable: appControl.isAvailable\n    },\n    \n    // LAYER 3: High-level stdlib\n    stdlib: {\n      ai: {\n        revise: stdlibAI.revise,\n        draw: stdlibAI.draw,\n        refactor: stdlibAI.refactor\n      }\n    },\n    \n    // Environment settings (persistent configuration)\n    env: env,\n    \n    // Context - returns context object (keep at root for convenience)\n    get context() {\n      return hlvmBase.core.computer.context;\n    },\n  \n  // Help\n  help: () => {\n    console.log(`\nHLVM - High-Level Virtual Machine\n==================================\n\nSTRUCTURE:\n  hlvm.core.*               - Core primitives (building blocks)\n  hlvm.app.*                - App control (GUI functions)\n  hlvm.stdlib.*             - High-level functions (coming soon)\n\nCORE MODULES:\n  hlvm.core.system          - OS/environment (exec, env, paths)\n  hlvm.core.storage         - Persistence (db, modules)\n  hlvm.core.io              - Input/Output (fs, clipboard)\n  hlvm.core.computer        - Automation (keyboard, mouse, screen)\n  hlvm.core.ui              - User interface (notifications)\n  hlvm.core.ai              - AI services (ollama)\n  hlvm.core.event           - Observation system (observe, unobserve)\n\nSTORAGE & MODULES:\n  hlvm.core.storage.modules.save()    - Save module\n  hlvm.core.storage.modules.remove()  - Remove module(s)\n  hlvm.core.storage.modules.list()    - List modules\n  hlvm.core.storage.modules.load()    - Load module\n\nFILE OPERATIONS:\n  hlvm.core.io.fs.read(path)          - Read text file\n  hlvm.core.io.fs.write(path, text)   - Write text file\n  hlvm.core.io.fs.exists(path)        - Check if path exists\n  hlvm.core.io.fs.remove(path)        - Delete file/directory\n  hlvm.core.io.fs.mkdir(path)         - Create directory\n  hlvm.core.io.fs.copy(src, dest)     - Copy file/directory\n  hlvm.core.io.fs.move(src, dest)     - Move file/directory\n\nCOMPUTER AUTOMATION:\n  hlvm.core.computer.keyboard.type()  - Type text\n  hlvm.core.computer.keyboard.press() - Press keys (array format: [\"cmd\", \"s\"])\n  hlvm.core.computer.mouse.click()    - Click mouse\n  hlvm.core.computer.mouse.move()     - Move mouse\n  hlvm.core.computer.screen.capture() - Capture screen\n\nAI SERVICES:\n  hlvm.core.ai.ollama.list()          - List models\n  hlvm.core.ai.ollama.chat()          - Chat with AI\n\nAPP CONTROL:\n  hlvm.app.spotlight                  - Spotlight UI\n  hlvm.app.chat                       - Chat UI\n  hlvm.app.playground                 - Code playground\n\nExamples:\n  // Files\n  await hlvm.core.io.fs.write('/tmp/test.txt', 'Hello')\n  const text = await hlvm.core.io.fs.read('/tmp/test.txt')\n  \n  // Notifications\n  await hlvm.core.ui.notification.notify(\"Done!\", \"HLVM\")\n  const name = await hlvm.core.ui.notification.prompt(\"Name?\")\n  \n  // Automation\n  await hlvm.core.computer.screen.capture(\"/tmp/screen.png\")\n  await hlvm.core.computer.keyboard.type(\"Hello\")\n  await hlvm.core.computer.mouse.click(100, 100)\n  \n  // AI\n  const response = await hlvm.core.ai.ollama.chat({ \n    model: 'llama3', \n    prompt: 'Hello' \n  }\n    `);\n  },\n  \n  // Status\n  status: () => {\n    const modules = Object.keys(hlvm).filter(k => typeof hlvm[k] === 'object');\n    const savedModules = hlvmBase.core.storage.modules.list();\n    \n    console.log('\\nHLVM Status:');\n    console.log('─'.repeat(40));\n    console.log('Top-level:', modules.join(', '));\n    console.log(`Saved Modules: ${savedModules.length} modules`);\n    console.log(`Database: ${hlvmBase.core.storage.db.path}`);\n    console.log(`Platform: ${hlvmBase.core.system.os} (${hlvmBase.core.system.arch}`);\n    console.log(`Temp Dir: ${hlvmBase.core.system.tempDir()}`);\n    console.log(`Home Dir: ${hlvmBase.core.system.homeDir()}`);\n  }\n  };\n\n  // Setup alias persistence\n  function setupAliases() {\n    // Create aliases table if not exists\n    db.db.exec(`\n    CREATE TABLE IF NOT EXISTS aliases (\n      name TEXT PRIMARY KEY,\n      path TEXT NOT NULL,\n      created_at INTEGER NOT NULL,\n      updated_at INTEGER NOT NULL\n    )\n  `);\n  \n  // Load existing aliases and create global functions\n  const aliases = db.db.prepare('SELECT * FROM aliases').all();\n  aliases.forEach(alias => {\n    try {\n      // Create the global alias function\n      globalThis[alias.name] = async (...args) => {\n        // Navigate the path to find the function\n        const parts = alias.path.split('.');\n        let current = globalThis;\n        for (const part of parts) {\n          current = current[part];\n          if (!current) {\n            throw new Error(`Path ${alias.path} not found`);\n          }\n        }\n        \n        // Call the function if it's callable\n        if (typeof current === 'function') {\n          return await current(...args);\n        }\n        return current;\n      };\n    } catch (e) {\n      console.error(`Failed to restore alias '${alias.name}':`, e.message);\n    }\n  });\n}\n\n  // Create an alias\n  function createAlias(name, path) {\n  // Validate name doesn't conflict with system\n  const reserved = ['hlvm', 'Deno', 'console', 'global', 'globalThis', 'window', \n                    'document', 'alert', 'confirm', 'prompt', 'eval', 'Function',\n                    'Object', 'Array', 'String', 'Number', 'Boolean', 'Symbol',\n                    'Math', 'Date', 'RegExp', 'Error', 'JSON', 'Promise'];\n  \n  if (reserved.includes(name)) {\n    throw new Error(`Cannot use reserved name '${name}' for alias`);\n  }\n  \n  // Save to database\n  const now = Date.now();\n  db.db.prepare(`\n    INSERT OR REPLACE INTO aliases (name, path, created_at, updated_at)\n    VALUES (?, ?, ?, ?)\n  `).run(name, path, now, now);\n  \n  // Create the global function\n  globalThis[name] = async (...args) => {\n    const parts = path.split('.');\n    let current = globalThis;\n    for (const part of parts) {\n      current = current[part];\n      if (!current) {\n        throw new Error(`Path ${path} not found`);\n      }\n    }\n    \n    if (typeof current === 'function') {\n      return await current(...args);\n    }\n    return current;\n  };\n  \n  console.log(`✅ Created alias: ${name}() → ${path}`);\n  return true;\n}\n\n  // Remove an alias\n  function removeAlias(name) {\n  // Remove from database\n  db.db.prepare('DELETE FROM aliases WHERE name = ?').run(name);\n  \n  // Remove from global scope\n  delete globalThis[name];\n  \n  console.log(`✅ Removed alias: ${name}`);\n  return true;\n}\n\n  // List all aliases\n  function listAliases() {\n  const aliases = db.db.prepare('SELECT * FROM aliases ORDER BY name').all();\n  return aliases.map(s => ({\n    name: s.name,\n    path: s.path,\n    createdAt: new Date(s.created_at),\n    updatedAt: new Date(s.updated_at)\n  }));\n}\n\n  // Setup custom property persistence\n  function setupCustomPropertyPersistence() {\n  // Create custom_properties table if not exists\n  db.db.exec(`\n    CREATE TABLE IF NOT EXISTS custom_properties (\n      key TEXT PRIMARY KEY,\n      value TEXT NOT NULL,\n      type TEXT NOT NULL,\n      updated_at INTEGER NOT NULL\n    )\n  `);\n  \n  // Load existing custom properties\n  const props = db.db.prepare('SELECT * FROM custom_properties').all();\n  props.forEach(prop => {\n    try {\n      if (prop.type === 'function') {\n        // Recreate function from string\n        cleanHlvm[prop.key] = eval(`(${prop.value})`);\n      } else {\n        cleanHlvm[prop.key] = JSON.parse(prop.value);\n      }\n    } catch (e) {\n      console.error(`Failed to restore custom property '${prop.key}':`, e.message);\n    }\n  });\n}\n\n  // Save custom property to database\n  function saveCustomProperty(key, value) {\n  let serialized;\n  let type = typeof value;\n  \n  if (value === null || value === undefined) {\n    // Handle null/undefined - remove from database\n    db.db.prepare('DELETE FROM custom_properties WHERE key = ?').run(key);\n    return;\n  }\n  \n  if (type === 'function') {\n    serialized = value.toString();\n  } else {\n    serialized = JSON.stringify(value);\n  }\n  \n  db.db.prepare(`\n    INSERT OR REPLACE INTO custom_properties (key, value, type, updated_at)\n    VALUES (?, ?, ?, ?)\n  `).run(key, serialized, type, Date.now());\n}\n\n  // Create a clean object without Object.prototype for better tab completion\n  // This prevents showing methods like valueOf, toString, etc.\n  const cleanHlvm = Object.create(null);\n  \n  // Copy all properties from hlvmBase to cleanHlvm\n  for (const key in hlvmBase) {\n    cleanHlvm[key] = hlvmBase[key];\n  }\n  \n  // Setup persistence (must be after cleanHlvm is created)\n  setupAliases();\n  setupCustomPropertyPersistence();\n\n  // Add custom property setter directly to the clean object\n  // This preserves TAB completion while allowing custom properties\n  Object.defineProperty(cleanHlvm, '__set', {\n    value: function(prop, value) {\n      const systemProps = ['core', 'app', 'stdlib', 'env', 'context', 'help', 'status', '__set', '__delete'];\n      \n      if (systemProps.includes(prop)) {\n        console.error(`Cannot override system property: hlvm.${prop}`);\n        return false;\n      }\n      \n      // Save to database for persistence\n      saveCustomProperty(prop, value);\n      \n      // Set the value\n      if (value === null || value === undefined) {\n        delete this[prop];\n      } else {\n        this[prop] = value;\n      }\n      return true;\n    },\n    enumerable: false,\n    configurable: false\n  });\n  \n  Object.defineProperty(cleanHlvm, '__delete', {\n    value: function(prop) {\n      // Remove from database\n      db.db.prepare('DELETE FROM custom_properties WHERE key = ?').run(prop);\n      delete this[prop];\n      return true;\n    },\n    enumerable: false,\n    configurable: false\n  });\n\n  // Return the clean object for TAB completion to work\n  return cleanHlvm;\n})();  // End IIFE - hlvmBase is now hidden from global scope\n\n// Global utilities\nglobalThis.pprint = (obj) => console.log(JSON.stringify(obj, null, 2));\n\n// Setup custom inspect for functions with documentation\n(function setupFunctionDocs() {\n  // Create a special inspect symbol for documented functions\n  const inspectSymbol = Symbol.for('Deno.customInspect');\n  \n  // Helper to attach docs to a function\n  globalThis.__attachDocs = function(func, doc) {\n    func.__doc__ = doc;\n    func[inspectSymbol] = function() {\n      return this.__doc__;\n    };\n    return func;\n  };\n  \n  // Process all functions in hlvm namespace to add inspect if they have __doc__\n  function processObject(obj, path = '') {\n    for (const key in obj) {\n      const value = obj[key];\n      if (typeof value === 'function' && value.__doc__) {\n        value[inspectSymbol] = function() {\n          return this.__doc__;\n        };\n      } else if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n        processObject(value, path ? `${path}.${key}` : key);\n      }\n    }\n  }\n  \n  // Process the hlvm namespace after a small delay to ensure all modules are loaded\n  setTimeout(() => processObject(globalThis.hlvm), 100);\n})();\n\n// Global shorthand for context - removed to prevent startup issues";
export const embeddedBridge = "// HLVM Bridge - WebSocket server for GUI control commands\n// NOTE: JavaScript eval uses stdin/stdout, NOT this WebSocket bridge\n// This bridge is only for hlvm.app GUI control commands\n\ninterface JSONRPCRequest {\n  jsonrpc: \"2.0\";\n  id?: string | number;\n  method: string;\n  params?: any;\n}\n\ninterface JSONRPCResponse {\n  jsonrpc: \"2.0\";\n  id: string | number;\n  result?: any;\n  error?: {\n    code: number;\n    message: string;\n    data?: any;\n  };\n}\n\ninterface JSONRPCNotification {\n  jsonrpc: \"2.0\";\n  method: string;\n  params?: any;\n}\n\n// Handler types for better type safety\ntype HandlerFunction = (params: any) => Promise<any>;\ntype HandlerRegistry = Map<string, HandlerFunction>;\n\n// Separate handler classes following Single Responsibility Principle\nclass SystemHandlers {\n  static getInfo(): Promise<any> {\n    return Promise.resolve({\n      platform: Deno.build.os,\n      arch: Deno.build.arch,\n      version: \"2.0\",\n      pid: Deno.pid\n    });\n  }\n}\n\nclass ModuleHandlers {\n  static async list(): Promise<any> {\n    return globalThis.hlvm?.modules?.list?.() || [];\n  }\n\n  static async save(params: any): Promise<any> {\n    if (!globalThis.hlvm?.modules?.save) {\n      throw new Error(\"Module save not available\");\n    }\n    return globalThis.hlvm.modules.save(params.name, params.code);\n  }\n\n  static async load(params: any): Promise<any> {\n    if (!globalThis.hlvm?.modules?.load) {\n      throw new Error(\"Module load not available\");\n    }\n    return globalThis.hlvm.modules.load(params.name);\n  }\n}\n\nclass AIHandlers {\n  static async generate(params: any): Promise<any> {\n    if (!globalThis.hlvm?.ai?.ollama?.chat) {\n      throw new Error(\"AI not available\");\n    }\n    return globalThis.hlvm.ai.ollama.chat(params.prompt, params.model);\n  }\n}\n\nclass FileSystemHandlers {\n  static async read(params: any): Promise<string> {\n    return Deno.readTextFile(params.path);\n  }\n\n  static async write(params: any): Promise<{ success: boolean }> {\n    await Deno.writeTextFile(params.path, params.content);\n    return { success: true };\n  }\n\n  static async exists(params: any): Promise<boolean> {\n    try {\n      await Deno.stat(params.path);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\n// Connection manager for WebSocket connections\nclass ConnectionManager {\n  private connections = new Set<WebSocket>();\n\n  add(socket: WebSocket): void {\n    this.connections.add(socket);\n  }\n\n  remove(socket: WebSocket): void {\n    this.connections.delete(socket);\n  }\n\n  get size(): number {\n    return this.connections.size;\n  }\n\n  get all(): Set<WebSocket> {\n    return this.connections;\n  }\n\n  get first(): WebSocket | undefined {\n    return this.connections.values().next().value;\n  }\n\n  clear(): void {\n    for (const socket of this.connections) {\n      socket.close();\n    }\n    this.connections.clear();\n  }\n}\n\nclass HLVMBridge {\n  private connectionManager = new ConnectionManager();\n  private server?: Deno.HttpServer;\n  private handlers: HandlerRegistry = new Map();\n\n  constructor() {\n    this.registerHandlers();\n  }\n\n  private registerHandlers(): void {\n    // System handlers\n    this.handlers.set(\"system.info\", SystemHandlers.getInfo);\n\n    // Module handlers\n    this.handlers.set(\"modules.list\", ModuleHandlers.list);\n    this.handlers.set(\"modules.save\", ModuleHandlers.save);\n    this.handlers.set(\"modules.load\", ModuleHandlers.load);\n\n    // AI handlers\n    this.handlers.set(\"ai.generate\", AIHandlers.generate);\n\n    // File system handlers\n    this.handlers.set(\"fs.read\", FileSystemHandlers.read);\n    this.handlers.set(\"fs.write\", FileSystemHandlers.write);\n    this.handlers.set(\"fs.exists\", FileSystemHandlers.exists);\n  }\n\n  async start(port = 11436): Promise<void> {\n    this.server = Deno.serve({ \n      port, \n      onListen: () => console.log(`HLVM Bridge running on ws://localhost:${port}`)\n    }, (req) => this.handleRequest(req));\n  }\n\n  private handleRequest(req: Request): Response {\n    if (req.headers.get(\"upgrade\") === \"websocket\") {\n      return this.handleWebSocketUpgrade(req);\n    }\n    \n    if (req.url.endsWith(\"/health\")) {\n      return this.handleHealthCheck();\n    }\n    \n    return new Response(\"HLVM Bridge WebSocket Server\", { status: 200 });\n  }\n\n  private handleWebSocketUpgrade(req: Request): Response {\n    const { socket, response } = Deno.upgradeWebSocket(req);\n    \n    socket.onopen = () => this.handleSocketOpen(socket);\n    socket.onmessage = (event) => this.handleSocketMessage(socket, event);\n    socket.onclose = () => this.handleSocketClose(socket);\n    socket.onerror = (error) => console.error(\"WebSocket error:\", error);\n    \n    return response;\n  }\n\n  private handleSocketOpen(socket: WebSocket): void {\n    console.log(\"macOS app connected\");\n    this.connectionManager.add(socket);\n    this.sendConnectionNotification(socket);\n  }\n\n  private sendConnectionNotification(socket: WebSocket): void {\n    const notification: JSONRPCNotification = {\n      jsonrpc: \"2.0\",\n      method: \"connection.established\",\n      params: {\n        version: \"2.0\",\n        capabilities: Array.from(this.handlers.keys())\n      }\n    };\n    socket.send(JSON.stringify(notification));\n  }\n\n  private async handleSocketMessage(socket: WebSocket, event: MessageEvent): Promise<void> {\n    try {\n      const request = JSON.parse(event.data) as JSONRPCRequest;\n      \n      if (request.jsonrpc !== \"2.0\") {\n        throw new Error(\"Invalid JSON-RPC version\");\n      }\n\n      if (request.id !== undefined) {\n        await this.handleRequestWithResponse(socket, request);\n      } else {\n        await this.handleNotification(request);\n      }\n    } catch (error) {\n      console.error(\"Message handling error:\", error);\n    }\n  }\n\n  private async handleRequestWithResponse(socket: WebSocket, request: JSONRPCRequest): Promise<void> {\n    const response: JSONRPCResponse = {\n      jsonrpc: \"2.0\",\n      id: request.id!\n    };\n\n    try {\n      const handler = this.handlers.get(request.method);\n      if (!handler) {\n        response.error = {\n          code: -32601,\n          message: `Method not found: ${request.method}`\n        };\n      } else {\n        response.result = await handler(request.params);\n      }\n    } catch (error) {\n      response.error = {\n        code: -32603,\n        message: error.message\n      };\n    }\n\n    socket.send(JSON.stringify(response));\n  }\n\n  private async handleNotification(request: JSONRPCRequest): Promise<void> {\n    const handler = this.handlers.get(request.method);\n    if (handler) {\n      handler(request.params).catch(console.error);\n    }\n  }\n\n  private handleSocketClose(socket: WebSocket): void {\n    console.log(\"macOS app disconnected\");\n    this.connectionManager.remove(socket);\n  }\n\n  private handleHealthCheck(): Response {\n    return new Response(JSON.stringify({ \n      status: \"ok\", \n      connections: this.connectionManager.size \n    }), {\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n  }\n\n  broadcast(method: string, params?: any): void {\n    const notification: JSONRPCNotification = {\n      jsonrpc: \"2.0\",\n      method,\n      params\n    };\n    \n    const message = JSON.stringify(notification);\n    for (const socket of this.connectionManager.all) {\n      if (socket.readyState === WebSocket.OPEN) {\n        socket.send(message);\n      }\n    }\n  }\n\n  async request(method: string, params?: any): Promise<any> {\n    const socket = this.connectionManager.first;\n    if (!socket) {\n      throw new Error(\"No macOS app connected\");\n    }\n\n    return this.sendRequestAndWaitForResponse(socket, method, params);\n  }\n\n  private sendRequestAndWaitForResponse(socket: WebSocket, method: string, params?: any): Promise<any> {\n    const id = this.generateRequestId();\n    const timeoutMs = 5000;\n    \n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => reject(new Error(\"Request timeout\")), timeoutMs);\n      \n      const handler = this.createResponseHandler(id, timeout, resolve, reject);\n      socket.addEventListener(\"message\", handler);\n      \n      const request: JSONRPCRequest = { jsonrpc: \"2.0\", id, method, params };\n      socket.send(JSON.stringify(request));\n    });\n  }\n\n  private generateRequestId(): string {\n    return `req-${Date.now()}-${Math.random()}`;\n  }\n\n  private createResponseHandler(\n    expectedId: string | number,\n    timeout: NodeJS.Timeout,\n    resolve: (value: any) => void,\n    reject: (reason: any) => void\n  ): (event: MessageEvent) => void {\n    return function handler(event: MessageEvent) {\n      try {\n        const response = JSON.parse(event.data) as JSONRPCResponse;\n        if (response.id === expectedId) {\n          clearTimeout(timeout);\n          (event.target as WebSocket).removeEventListener(\"message\", handler);\n          \n          if (response.error) {\n            reject(new Error(response.error.message));\n          } else {\n            resolve(response.result);\n          }\n        }\n      } catch {}\n    };\n  }\n\n  stop(): void {\n    this.connectionManager.clear();\n    this.server?.shutdown();\n  }\n}\n\n// Export for use in HLVM\nexport { HLVMBridge };\nexport const bridge = new HLVMBridge();\n\n// Start bridge if running as standalone\nif (import.meta.main) {\n  await bridge.start(11436);\n}";
