#!/usr/bin/env -S deno run --allow-read --allow-write

// Script to embed stdlib files into TypeScript code for compilation

import { join, dirname } from "https://deno.land/std@0.220.0/path/mod.ts";

const __dirname = dirname(new URL(import.meta.url).pathname);

// Define stdlib modules to embed
const stdlibModules = [
  { name: "core/platform.js", path: "./stdlib/core/platform.js" },
  { name: "core/system.js", path: "./stdlib/core/system.js" },
  { name: "core/database.js", path: "./stdlib/core/database.js" },
  { name: "fs/filesystem.js", path: "./stdlib/fs/filesystem.js" },
  { name: "io/clipboard.js", path: "./stdlib/io/clipboard.js" },
  { name: "computer/notification.js", path: "./stdlib/computer/notification.js" },
  { name: "computer/screen.js", path: "./stdlib/computer/screen.js" },
  { name: "computer/keyboard.js", path: "./stdlib/computer/keyboard.js" },
  { name: "computer/mouse.js", path: "./stdlib/computer/mouse.js" },
  { name: "ai/ollama.js", path: "./stdlib/ai/ollama.js" },
  { name: "app/control.js", path: "./stdlib/app/control.js" }
];

// Read all stdlib modules
const embeddedModules: Record<string, string> = {};

for (const module of stdlibModules) {
  try {
    const fullPath = new URL(module.path, import.meta.url);
    const content = await Deno.readTextFile(fullPath);
    embeddedModules[module.name] = content;
    console.log(`✓ Embedded ${module.name} (${content.length} bytes)`);
  } catch (error) {
    console.error(`✗ Failed to embed ${module.name}:`, error.message);
  }
}

// Read init and bridge files
let initContent = "";
let bridgeContent = "";

try {
  initContent = await Deno.readTextFile(new URL("./hlvm-init.js", import.meta.url));
  console.log(`✓ Embedded hlvm-init.js (${initContent.length} bytes)`);
} catch (error) {
  console.error("✗ Failed to embed hlvm-init.js:", error.message);
}

try {
  bridgeContent = await Deno.readTextFile(new URL("./hlvm-bridge.ts", import.meta.url));
  console.log(`✓ Embedded hlvm-bridge.ts (${bridgeContent.length} bytes)`);
} catch (error) {
  console.error("✗ Failed to embed hlvm-bridge.ts:", error.message);
}

// Generate embedded-stdlib.ts
const output = `// Auto-generated file with embedded stdlib modules
// This file is generated by embed-stdlib.ts and should not be edited manually

export const embeddedStdlib = {
${Object.entries(embeddedModules).map(([name, content]) => 
  `  "${name}": ${JSON.stringify(content)}`
).join(',\n')}
};

export const embeddedInit = ${JSON.stringify(initContent)};
export const embeddedBridge = ${JSON.stringify(bridgeContent)};
`;

// Write the output file
const outputPath = new URL("./embedded-stdlib.ts", import.meta.url);
await Deno.writeTextFile(outputPath, output);

console.log(`\n✓ Generated embedded-stdlib.ts (${output.length} bytes)`);
console.log(`  Total modules embedded: ${Object.keys(embeddedModules).length}`);