#!/usr/bin/env -S deno run --allow-read --allow-write --allow-run

// Script to embed stdlib files into TypeScript code for compilation

import { relative } from "https://deno.land/std@0.220.0/path/mod.ts";
import { walk } from "https://deno.land/std@0.220.0/fs/walk.ts";
import { EMBEDDED_MODEL } from "./version.ts";

// Automatically discover all .js files in stdlib directory
const stdlibModules = [];
const stdlibPath = new URL("./stdlib", import.meta.url).pathname;

for await (const entry of walk(stdlibPath, { 
  exts: [".js"],
  followSymlinks: false 
})) {
  if (entry.isFile) {
    // Convert absolute path to relative module name
    const moduleName = relative(stdlibPath, entry.path).replace(/\\/g, "/");
    const relativePath = `./stdlib/${moduleName}`;
    stdlibModules.push({ 
      name: moduleName, 
      path: relativePath 
    });
  }
}

// Sort modules for consistent output
stdlibModules.sort((a, b) => a.name.localeCompare(b.name));

// Read all stdlib modules
const embeddedModules: Record<string, string> = {};

for (const module of stdlibModules) {
  try {
    const fullPath = new URL(module.path, import.meta.url);
    const content = await Deno.readTextFile(fullPath);
    embeddedModules[module.name] = content;
    console.log(`✓ Embedded ${module.name} (${content.length} bytes)`);
  } catch (error) {
    console.error(`✗ Failed to embed ${module.name}:`, error.message);
  }
}

// Read init and bridge files
let initContent = "";
let bridgeContent = "";

try {
  initContent = await Deno.readTextFile(new URL("./hlvm-init.js", import.meta.url));
  console.log(`✓ Embedded hlvm-init.js (${initContent.length} bytes)`);
} catch (error) {
  console.error("✗ Failed to embed hlvm-init.js:", error.message);
}

try {
  bridgeContent = await Deno.readTextFile(new URL("./hlvm-bridge.ts", import.meta.url));
  console.log(`✓ Embedded hlvm-bridge.ts (${bridgeContent.length} bytes)`);
} catch (error) {
  console.error("✗ Failed to embed hlvm-bridge.ts:", error.message);
}

// Generate embedded-stdlib.ts
const output = `// Auto-generated file with embedded stdlib modules
// This file is generated by embed-stdlib.ts and should not be edited manually

// Export embedded model from version.ts
export const EMBEDDED_MODEL = "${EMBEDDED_MODEL}";

export const embeddedStdlib = {
${Object.entries(embeddedModules).map(([name, content]) => 
  `  "${name}": ${JSON.stringify(content)}`
).join(',\n')}
};

export const embeddedInit = ${JSON.stringify(initContent)};
export const embeddedBridge = ${JSON.stringify(bridgeContent)};
`;

// Write the output file
const outputPath = new URL("./embedded-stdlib.ts", import.meta.url);
await Deno.writeTextFile(outputPath, output);

console.log(`\n✓ Generated embedded-stdlib.ts (${output.length} bytes)`);
console.log(`  Total modules embedded: ${Object.keys(embeddedModules).length}`);